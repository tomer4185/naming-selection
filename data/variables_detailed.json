{
  "github_extracted/iterative_dvc/analytics.py": {
    "variables": [
      "system",
      "ci_id",
      "group_id",
      "headers",
      "fobj",
      "scm",
      "user_id",
      "version",
      "logger",
      "url",
      "report",
      "enabled"
    ],
    "function_params": [
      "return_code",
      "args",
      "path"
    ],
    "function_names": [
      "send",
      "_system_info",
      "collect_and_send_report",
      "is_enabled",
      "_runtime_info",
      "_scm_in_use"
    ],
    "class_names": [],
    "imports": [
      "dvc.log",
      "DVC_NO_ANALYTICS",
      "Config",
      "dvc",
      "distro",
      "find_or_create_user_id",
      "dvc.utils",
      "dvc.repo",
      "dvc.daemon",
      "dvc.config",
      "json",
      "Repo",
      "requests",
      "sys",
      "dvc.exceptions",
      "SCMError",
      "to_bool",
      "__version__",
      "env",
      "_generate_ci_id",
      "NotDvcRepoError",
      "os",
      "daemon",
      "tempfile",
      "NoSCM",
      "is_binary",
      "scm",
      "env2bool",
      "DVC_ANALYTICS_ENDPOINT",
      "SCM",
      "logger",
      "iterative_telemetry",
      "dvc.scm",
      "platform"
    ]
  },
  "github_extracted/iterative_dvc/hook-dvc.py": {
    "variables": [
      "hiddenimports",
      "datas"
    ],
    "function_params": [],
    "function_names": [],
    "class_names": [],
    "imports": [
      "PyInstaller.utils.hooks",
      "copy_metadata"
    ]
  },
  "github_extracted/iterative_dvc/hook-dvc_task.py": {
    "variables": [
      "hiddenimports"
    ],
    "function_params": [],
    "function_names": [],
    "class_names": [],
    "imports": [
      "PyInstaller.utils.hooks",
      "collect_submodules"
    ]
  },
  "github_extracted/iterative_dvc/data.py": {
    "variables": [
      "fd",
      "index",
      "repo_kwargs",
      "fs",
      "entry",
      "fobj",
      "remote_fs",
      "fs_path",
      "remote_path",
      "kwargs",
      "_repo",
      "args"
    ],
    "function_params": [
      "func",
      "remote_config",
      "encoding",
      "rev",
      "path",
      "name",
      "mode",
      "config",
      "repo",
      "kwds",
      "self",
      "url",
      "remote",
      "args"
    ],
    "function_names": [
      "__init__",
      "_wrap_exceptions",
      "open",
      "get_url",
      "__getattr__",
      "read",
      "_open"
    ],
    "class_names": [
      "_OpenContextManager"
    ],
    "imports": [
      "dvc.fs.dvc",
      "Union",
      "dvc.repo",
      "FileSystem",
      "dvc.config",
      "NoRemoteError",
      "Any",
      "reraise",
      "contextmanager",
      "Repo",
      "PathMissingError",
      "dvc.exceptions",
      "IsADirectoryError",
      "TYPE_CHECKING",
      "DVCFileSystem",
      "FileMissingError",
      "dvc_data.index",
      "Optional",
      "_GeneratorContextManager",
      "funcy",
      "os",
      "DataFileSystem",
      "contextlib",
      "NoRemoteInExternalRepoError",
      "dvc.fs",
      "typing",
      "StorageKeyError",
      "dvc.fs.data",
      "OutputNotFoundError",
      "NoOutputInExternalRepoError"
    ]
  },
  "github_extracted/iterative_dvc/__main__.py": {
    "variables": [],
    "function_params": [],
    "function_names": [],
    "class_names": [],
    "imports": [
      "sys",
      "dvc.cli",
      "main"
    ]
  },
  "github_extracted/iterative_dvc/dataset.py": {
    "variables": [
      "path",
      "name",
      "dataset",
      "files",
      "repo",
      "_",
      "version",
      "add_note",
      "url",
      "matches",
      "fs_cls",
      "join_version",
      "versioned_path",
      "type",
      "file",
      "sha",
      "protocol"
    ],
    "function_params": [
      "name"
    ],
    "function_names": [
      "get"
    ],
    "class_names": [
      "DVCDataset",
      "URLDataset",
      "DatachainDataset"
    ],
    "imports": [
      "TypedDict",
      "dvc.fs",
      "Literal",
      "Repo",
      "get_cloud_fs",
      "typing",
      "Union",
      "get_close_matches",
      "difflib",
      "dvc.repo",
      "datasets"
    ]
  },
  "github_extracted/iterative_dvc/annotations.py": {
    "variables": [
      "desc",
      "ANNOTATION_FIELDS",
      "PARAM_LABELS",
      "meta",
      "path",
      "field",
      "ANNOTATION_SCHEMA",
      "PARAM_DESC",
      "labels",
      "PARAM_TYPE",
      "PARAM_PATH",
      "type",
      "PARAM_META",
      "ARTIFACT_SCHEMA"
    ],
    "function_params": [
      "self"
    ],
    "function_names": [
      "to_dict"
    ],
    "class_names": [
      "Annotation",
      "Artifact"
    ],
    "imports": [
      "field",
      "voluptuous",
      "Optional",
      "Any",
      "Required",
      "asdict",
      "compact",
      "dataclass",
      "dataclasses",
      "typing",
      "ClassVar",
      "fields",
      "funcy"
    ]
  },
  "github_extracted/iterative_dvc/hook-fsspec.py": {
    "variables": [
      "hiddenimports"
    ],
    "function_params": [],
    "function_names": [],
    "class_names": [],
    "imports": []
  },
  "github_extracted/iterative_dvc/experiments.py": {
    "variables": [
      "v",
      "v_str",
      "exp_row",
      "repo",
      "k",
      "experiments",
      "td",
      "_",
      "_repo"
    ],
    "function_params": [
      "name",
      "revs",
      "config",
      "exp_rows",
      "param_deps",
      "repo",
      "num",
      "include_untracked",
      "force"
    ],
    "function_names": [
      "exp_save",
      "_postprocess",
      "exp_show"
    ],
    "class_names": [],
    "imports": [
      "rich.text",
      "Optional",
      "Text",
      "Repo",
      "typing",
      "Union",
      "tabulate",
      "dvc.repo",
      "dvc.repo.experiments.show"
    ]
  },
  "github_extracted/iterative_dvc/show.py": {
    "variables": [
      "v",
      "rev",
      "to_merge",
      "metrics",
      "params",
      "file_name",
      "k",
      "counts",
      "stages",
      "file_data",
      "processed",
      "_repo",
      "rev_data"
    ],
    "function_params": [
      "results"
    ],
    "function_names": [
      "_postprocess",
      "params_show",
      "metrics_show"
    ],
    "class_names": [],
    "imports": [
      "Iterable",
      "collections",
      "Counter",
      "dvc.repo",
      "Optional",
      "Repo",
      "typing",
      "dvc.repo.metrics.show",
      "Union",
      "collections.abc",
      "first",
      "funcy",
      "to_relpath"
    ]
  },
  "github_extracted/iterative_dvc/hook-dvc.utils.flatten.py": {
    "variables": [
      "datas"
    ],
    "function_params": [],
    "function_names": [],
    "class_names": [],
    "imports": [
      "PyInstaller.utils.hooks",
      "copy_metadata"
    ]
  },
  "github_extracted/iterative_dvc/hook-pydrive2.py": {
    "variables": [
      "datas"
    ],
    "function_params": [],
    "function_names": [],
    "class_names": [],
    "imports": [
      "PyInstaller.utils.hooks",
      "copy_metadata"
    ]
  },
  "github_extracted/iterative_dvc/scm.py": {
    "variables": [
      "_repo"
    ],
    "function_params": [
      "repo"
    ],
    "function_names": [
      "all_tags",
      "all_branches",
      "all_commits"
    ],
    "class_names": [],
    "imports": [
      "typing",
      "Repo",
      "Optional",
      "dvc.repo"
    ]
  },
  "github_extracted/iterative_dvc/hook-asyncssh.py": {
    "variables": [
      "hiddenimports"
    ],
    "function_params": [],
    "function_names": [],
    "class_names": [],
    "imports": []
  },
  "github_extracted/iterative_dvc/__init__.py": {
    "variables": [
      "__all__"
    ],
    "function_params": [],
    "function_names": [],
    "class_names": [],
    "imports": [
      "dvc.fs.dvc",
      "artifacts",
      "exp_save",
      "all_commits",
      "open",
      "show",
      "get_url",
      "params_show",
      "metrics_show",
      "get",
      "all_tags",
      "data",
      "exp_show",
      "_DVCFileSystem",
      "dataset",
      "all_branches",
      "scm",
      "experiments",
      "artifacts_show",
      "read"
    ]
  },
  "github_extracted/iterative_dvc/hook-celery.py": {
    "variables": [
      "module",
      "hiddenimports",
      "_EXCLUDES"
    ],
    "function_params": [],
    "function_names": [],
    "class_names": [],
    "imports": [
      "PyInstaller.utils.hooks",
      "is_module_or_submodule",
      "collect_submodules"
    ]
  },
  "github_extracted/iterative_dvc/artifacts.py": {
    "variables": [
      "repo_kwargs",
      "rev",
      "dirname",
      "root",
      "r",
      "path",
      "parts",
      "_dirname",
      "_",
      "_repo"
    ],
    "function_params": [
      "version",
      "name",
      "stage",
      "repo"
    ],
    "function_names": [
      "artifacts_show"
    ],
    "class_names": [],
    "imports": [
      "Optional",
      "Any",
      "Repo",
      "typing",
      "as_posix",
      "dvc.utils",
      "dvc.repo",
      "os",
      "Artifacts",
      "dvc.repo.artifacts"
    ]
  },
  "github_extracted/iterative_dvc/_debug.py": {
    "variables": [
      "out",
      "prof",
      "stats",
      "fpath",
      "tracer",
      "kw",
      "_",
      "log_async",
      "verbose",
      "args",
      "profiler",
      "fmt",
      "stack",
      "depth",
      "ctx_id",
      "thread",
      "path_func",
      "threads",
      "st",
      "parser",
      "lines"
    ],
    "function_params": [
      "wall_clock",
      "now",
      "frame",
      "path",
      "ext",
      "depth",
      "msg",
      "separate_threads",
      "parser",
      "_",
      "log_async",
      "args",
      "dump_path",
      "tool",
      "html_output"
    ],
    "function_names": [
      "func",
      "viztracer_profile",
      "debug",
      "show_stack",
      "debugtools",
      "_sigshow",
      "profile",
      "debug_help",
      "add_debugging_flags",
      "yappi_profile",
      "_get_path_func",
      "instrument"
    ],
    "class_names": [],
    "imports": [
      "Union",
      "Callable",
      "viztracer",
      "SUPPRESS",
      "yappi",
      "Profiler",
      "contextmanager",
      "datetime",
      "signal",
      "sys",
      "get_terminal_size",
      "pyinstrument",
      "TYPE_CHECKING",
      "ExitStack",
      "ipdb",
      "cProfile",
      "FrameType",
      "Optional",
      "Namespace",
      "argparse",
      "pdb",
      "format_stack",
      "contextlib",
      "shutil",
      "typing",
      "traceback",
      "types"
    ]
  },
  "github_extracted/facebookresearch_detectron2/mask_rcnn_R_50_FPN_1x.py": {
    "variables": [],
    "function_params": [],
    "function_names": [],
    "class_names": [],
    "imports": [
      "common.optim",
      "common.models.mask_rcnn_fpn",
      "lr_multiplier_1x",
      "common.coco_schedule",
      "model",
      "common.train",
      "train",
      "SGD",
      "common.data.coco",
      "dataloader"
    ]
  },
  "github_extracted/facebookresearch_detectron2/retinanet_R_50_FPN_1x.py": {
    "variables": [],
    "function_params": [],
    "function_names": [],
    "class_names": [],
    "imports": [
      "common.optim",
      "lr_multiplier_1x",
      "common.coco_schedule",
      "common.models.retinanet",
      "model",
      "common.train",
      "train",
      "SGD",
      "common.data.coco",
      "dataloader"
    ]
  },
  "github_extracted/facebookresearch_detectron2/fcos_R_50_FPN_1x.py": {
    "variables": [],
    "function_params": [],
    "function_names": [],
    "class_names": [],
    "imports": [
      "common.optim",
      "lr_multiplier_1x",
      "common.coco_schedule",
      "model",
      "common.models.fcos",
      "common.train",
      "train",
      "SGD",
      "common.data.coco",
      "dataloader"
    ]
  },
  "github_extracted/facebookresearch_detectron2/coco_keypoint.py": {
    "variables": [],
    "function_params": [],
    "function_names": [],
    "class_names": [],
    "imports": [
      "create_keypoint_hflip_indices",
      "coco",
      "dataloader",
      "detectron2.data.detection_utils"
    ]
  },
  "github_extracted/facebookresearch_detectron2/coco_schedule.py": {
    "variables": [
      "lr_multiplier_1x",
      "lr_multiplier_6x",
      "lr_multiplier_9x",
      "lr_multiplier_3x",
      "total_steps_16bs",
      "lr_multiplier_2x",
      "scheduler"
    ],
    "function_params": [
      "num_X"
    ],
    "function_names": [
      "default_X_scheduler"
    ],
    "class_names": [],
    "imports": [
      "WarmupParamScheduler",
      "MultiStepParamScheduler",
      "fvcore.common.param_scheduler",
      "detectron2.solver",
      "detectron2.config",
      "LazyCall"
    ]
  },
  "github_extracted/facebookresearch_detectron2/mask_rcnn_regnetx_4gf_dds_fpn_1x.py": {
    "variables": [],
    "function_params": [],
    "function_names": [],
    "class_names": [],
    "imports": [
      "common.optim",
      "common.models.mask_rcnn_fpn",
      "lr_multiplier_1x",
      "common.coco_schedule",
      "model",
      "SimpleStem",
      "common.train",
      "RegNet",
      "detectron2.config",
      "train",
      "SGD",
      "detectron2.modeling.backbone.regnet",
      "LazyCall",
      "common.data.coco",
      "ResBottleneckBlock",
      "detectron2.modeling.backbone",
      "dataloader"
    ]
  },
  "github_extracted/facebookresearch_detectron2/mask_rcnn_c4.py": {
    "variables": [
      "model"
    ],
    "function_params": [],
    "function_names": [],
    "class_names": [],
    "imports": [
      "DefaultAnchorGenerator",
      "BasicStem",
      "detectron2.modeling.meta_arch",
      "ShapeSpec",
      "GeneralizedRCNN",
      "RPN",
      "detectron2.config",
      "FastRCNNOutputLayers",
      "Box2BoxTransform",
      "detectron2.modeling.proposal_generator",
      "MaskRCNNConvUpsampleHead",
      "detectron2.modeling.backbone",
      "detectron2.modeling.poolers",
      "detectron2.layers",
      "StandardRPNHead",
      "Res5ROIHeads",
      "ROIPooler",
      "constants",
      "detectron2.modeling.roi_heads",
      "BottleneckBlock",
      "ResNet",
      "detectron2.modeling.matcher",
      "data.constants",
      "detectron2.modeling.box_regression",
      "detectron2.modeling.anchor_generator",
      "LazyCall",
      "Matcher"
    ]
  },
  "github_extracted/facebookresearch_detectron2/keypoint_rcnn_fpn.py": {
    "variables": [
      "x"
    ],
    "function_params": [],
    "function_names": [],
    "class_names": [],
    "imports": [
      "detectron2.modeling.roi_heads",
      "model",
      "detectron2.modeling.poolers",
      "detectron2.config",
      "detectron2.layers",
      "ROIPooler",
      "LazyCall",
      "mask_rcnn_fpn",
      "KRCNNConvDeconvUpsampleHead",
      "ShapeSpec"
    ]
  },
  "github_extracted/facebookresearch_detectron2/keypoint_rcnn_R_50_FPN_1x.py": {
    "variables": [],
    "function_params": [],
    "function_names": [],
    "class_names": [],
    "imports": [
      "common.optim",
      "lr_multiplier_1x",
      "common.coco_schedule",
      "common.models.keypoint_rcnn_fpn",
      "model",
      "common.train",
      "common.data.coco_keypoint",
      "train",
      "SGD",
      "dataloader"
    ]
  },
  "github_extracted/facebookresearch_detectron2/torchvision_imagenet_R_50.py": {
    "variables": [
      "image",
      "pred",
      "all_corr_total",
      "label",
      "total",
      "model",
      "train",
      "lr_multiplier",
      "optimizer",
      "corr",
      "dataloader",
      "x"
    ],
    "function_params": [
      "num_workers",
      "model",
      "dataset",
      "training",
      "outputs",
      "batch_size",
      "self",
      "inputs"
    ],
    "function_names": [
      "__init__",
      "process",
      "build_data_loader",
      "forward",
      "evaluate",
      "device",
      "reset"
    ],
    "class_names": [
      "ClassificationNet",
      "ClassificationAcc"
    ],
    "imports": [
      "transforms",
      "WarmupParamScheduler",
      "detectron2.model_zoo",
      "get_config",
      "InferenceSampler",
      "detectron2.evaluation",
      "detectron2.utils",
      "torchvision.models.resnet",
      "omegaconf",
      "detectron2.solver",
      "get_default_optimizer_params",
      "detectron2.config",
      "torchvision.transforms",
      "OmegaConf",
      "Bottleneck",
      "MultiStepParamScheduler",
      "fvcore.common.param_scheduler",
      "functional",
      "detectron2.solver.build",
      "ResNet",
      "torch",
      "torchvision",
      "nn",
      "detectron2.data.samplers",
      "LazyCall",
      "torch.nn",
      "TrainingSampler",
      "comm",
      "DatasetEvaluator"
    ]
  },
  "github_extracted/facebookresearch_detectron2/coco.py": {
    "variables": [
      "dataloader"
    ],
    "function_params": [],
    "function_names": [],
    "class_names": [],
    "imports": [
      "build_detection_test_loader",
      "build_detection_train_loader",
      "get_detection_dataset_dicts",
      "omegaconf",
      "detectron2.data.transforms",
      "detectron2.config",
      "OmegaConf",
      "DatasetMapper",
      "COCOEvaluator",
      "LazyCall",
      "detectron2.evaluation",
      "detectron2.data"
    ]
  },
  "github_extracted/facebookresearch_detectron2/mask_rcnn_regnety_4gf_dds_fpn_1x.py": {
    "variables": [],
    "function_params": [],
    "function_names": [],
    "class_names": [],
    "imports": [
      "common.optim",
      "common.models.mask_rcnn_fpn",
      "lr_multiplier_1x",
      "common.coco_schedule",
      "model",
      "SimpleStem",
      "common.train",
      "RegNet",
      "detectron2.config",
      "train",
      "SGD",
      "detectron2.modeling.backbone.regnet",
      "LazyCall",
      "common.data.coco",
      "ResBottleneckBlock",
      "detectron2.modeling.backbone",
      "dataloader"
    ]
  },
  "github_extracted/facebookresearch_detectron2/coco_panoptic_separated.py": {
    "variables": [],
    "function_params": [],
    "function_names": [],
    "class_names": [],
    "imports": [
      "coco",
      "DatasetEvaluators",
      "detectron2.config",
      "COCOEvaluator",
      "COCOPanopticEvaluator",
      "LazyCall",
      "detectron2.evaluation",
      "SemSegEvaluator",
      "dataloader"
    ]
  },
  "github_extracted/facebookresearch_detectron2/panoptic_fpn_R_50_1x.py": {
    "variables": [],
    "function_params": [],
    "function_names": [],
    "class_names": [],
    "imports": [
      "common.optim",
      "lr_multiplier_1x",
      "common.coco_schedule",
      "common.models.panoptic_fpn",
      "model",
      "common.data.coco_panoptic_separated",
      "common.train",
      "train",
      "SGD",
      "dataloader"
    ]
  },
  "github_extracted/facebookresearch_detectron2/fcos.py": {
    "variables": [],
    "function_params": [],
    "function_names": [],
    "class_names": [],
    "imports": [
      "model",
      "detectron2.modeling.meta_arch.fcos",
      "FCOS",
      "FCOSHead",
      "retinanet"
    ]
  },
  "github_extracted/facebookresearch_detectron2/mmdet_mask_rcnn_R_50_FPN_1x.py": {
    "variables": [
      "model"
    ],
    "function_params": [],
    "function_names": [],
    "class_names": [],
    "imports": [
      "common.optim",
      "LazyCall",
      "lr_multiplier_1x",
      "common.coco_schedule",
      "common.train",
      "detectron2.config",
      "train",
      "SGD",
      "detectron2.modeling.mmdet_wrapper",
      "MMDetDetector",
      "common.data.coco",
      "constants",
      "common.data.constants",
      "dataloader"
    ]
  },
  "github_extracted/facebookresearch_detectron2/constants.py": {
    "variables": [
      "constants"
    ],
    "function_params": [],
    "function_names": [],
    "class_names": [],
    "imports": []
  },
  "github_extracted/facebookresearch_detectron2/mask_rcnn_R_50_C4_1x.py": {
    "variables": [],
    "function_params": [],
    "function_names": [],
    "class_names": [],
    "imports": [
      "common.optim",
      "lr_multiplier_1x",
      "common.coco_schedule",
      "model",
      "common.train",
      "train",
      "SGD",
      "common.models.mask_rcnn_c4",
      "common.data.coco",
      "dataloader"
    ]
  },
  "github_extracted/facebookresearch_detectron2/mask_rcnn_fpn.py": {
    "variables": [
      "model"
    ],
    "function_params": [],
    "function_names": [],
    "class_names": [],
    "imports": [
      "DefaultAnchorGenerator",
      "BasicStem",
      "detectron2.modeling.meta_arch",
      "detectron2.modeling.backbone.fpn",
      "ShapeSpec",
      "GeneralizedRCNN",
      "RPN",
      "StandardROIHeads",
      "detectron2.config",
      "FPN",
      "FastRCNNOutputLayers",
      "Box2BoxTransform",
      "detectron2.modeling.proposal_generator",
      "MaskRCNNConvUpsampleHead",
      "detectron2.modeling.backbone",
      "detectron2.modeling.poolers",
      "detectron2.layers",
      "StandardRPNHead",
      "ROIPooler",
      "LastLevelMaxPool",
      "constants",
      "FastRCNNConvFCHead",
      "detectron2.modeling.roi_heads",
      "ResNet",
      "detectron2.modeling.matcher",
      "data.constants",
      "detectron2.modeling.box_regression",
      "detectron2.modeling.anchor_generator",
      "LazyCall",
      "Matcher"
    ]
  },
  "github_extracted/facebookresearch_detectron2/cascade_rcnn.py": {
    "variables": [
      "k",
      "w2",
      "th",
      "w1"
    ],
    "function_params": [],
    "function_names": [],
    "class_names": [],
    "imports": [
      "detectron2.modeling.roi_heads",
      "model",
      "detectron2.modeling.matcher",
      "detectron2.config",
      "detectron2.modeling.box_regression",
      "detectron2.layers",
      "CascadeROIHeads",
      "FastRCNNOutputLayers",
      "Box2BoxTransform",
      "LazyCall",
      "Matcher",
      "mask_rcnn_fpn",
      "ShapeSpec",
      "FastRCNNConvFCHead"
    ]
  },
  "github_extracted/pytorch_pytorch/print_sccache_log.py": {
    "variables": [
      "log_file_path",
      "keyword",
      "f",
      "ignored_keywords",
      "lines",
      "line"
    ],
    "function_params": [],
    "function_names": [],
    "class_names": [],
    "imports": [
      "sys"
    ]
  },
  "github_extracted/pytorch_pytorch/cnn_smoke.py": {
    "variables": [
      "output",
      "net",
      "label",
      "optimizer",
      "outputs",
      "loss",
      "criterion",
      "device",
      "net_inputs"
    ],
    "function_params": [
      "self",
      "inputs"
    ],
    "function_names": [
      "forward",
      "__init__"
    ],
    "class_names": [
      "SimpleCNN"
    ],
    "imports": [
      "torch.nn.functional",
      "torch.nn",
      "torch",
      "torch.optim"
    ]
  },
  "github_extracted/pytorch_pytorch/smoke_test.py": {
    "variables": [
      "patch",
      "Vh",
      "major_version",
      "release_matrix",
      "out",
      "isa",
      "target_os",
      "MODULES",
      "cuda_exception_missed",
      "format_dt",
      "U",
      "date_m_delta",
      "dist",
      "A",
      "BASE_DIR",
      "v",
      "expected_error",
      "options",
      "i",
      "minor",
      "module_version",
      "release_version",
      "package_type",
      "basic_conv",
      "date_t_delta",
      "torch_cudnn_version",
      "x",
      "output",
      "torch_nccl_version",
      "m",
      "smoke_test_command",
      "module",
      "date_m_str",
      "dtype",
      "minor_version",
      "x_pt2",
      "channel",
      "version",
      "cwd",
      "dists",
      "stable_version",
      "x_eager",
      "imported_module",
      "date_t_str",
      "conv",
      "model",
      "fptr",
      "major",
      "S",
      "f",
      "input",
      "parser",
      "is_cuda_system",
      "gpu_arch_ver",
      "gpu_arch_type",
      "supported_dtypes",
      "NIGHTLY_ALLOWED_DELTA"
    ],
    "function_params": [
      "cudnn_version",
      "runtime_error_check",
      "filename",
      "pypi_version",
      "pypi_pkg_check",
      "device",
      "self",
      "torch_version",
      "torch_compile_check",
      "package",
      "x"
    ],
    "function_names": [
      "load_json_from_basedir",
      "smoke_test_cuda",
      "foo",
      "smoke_test_compile",
      "find_pypi_package_version",
      "smoke_test_modules",
      "check_nightly_binaries_date",
      "__init__",
      "test_linalg",
      "check_version",
      "read_release_matrix",
      "compare_pypi_to_torch_versions",
      "test_cuda_runtime_errors_captured",
      "forward",
      "smoke_test_conv2d",
      "test_cuda_gds_errors_captured",
      "test_numpy",
      "main",
      "parse_args",
      "cudnn_to_version_str"
    ],
    "class_names": [
      "Net"
    ],
    "imports": [
      "pathlib",
      "NamedTemporaryFile",
      "re",
      "json",
      "pick_vec_isa",
      "numpy",
      "metadata",
      "importlib",
      "datetime",
      "sys",
      "torch._dynamo",
      "torch.nn.functional",
      "Optional",
      "torch._inductor.codecache",
      "argparse",
      "os",
      "Path",
      "tempfile",
      "torch",
      "typing",
      "subprocess",
      "torch.nn"
    ]
  },
  "github_extracted/pytorch_pytorch/numpy.py": {
    "variables": [],
    "function_params": [],
    "function_names": [],
    "class_names": [],
    "imports": []
  },
  "github_extracted/pytorch_pytorch/check_binary_symbols.py": {
    "variables": [
      "num_workers",
      "y",
      "LIBTORCH_NAMESPACE_LIST",
      "executor",
      "tasks",
      "s_name",
      "PRE_CXX11_SYMBOLS",
      "LIBTORCH_PRE_CXX11_PATTERNS",
      "LIBTORCH_CXX11_PATTERNS",
      "i",
      "pre_cxx11_symbols",
      "libtorch_cpu_path",
      "x",
      "_s_type",
      "num_pre_cxx11_symbols",
      "rc",
      "install_root",
      "cxx11_symbols",
      "chunk_size",
      "all_symbols",
      "num_cxx11_symbols",
      "lines",
      "pattern",
      "CXX11_SYMBOLS",
      "_s_addr"
    ],
    "function_params": [
      "symbols",
      "patterns",
      "lib",
      "i"
    ],
    "function_names": [
      "_get_symbols_chunk",
      "grep_symbols",
      "check_lib_symbols_for_abi_correctness",
      "get_symbols",
      "main",
      "_grep_symbols",
      "_apply_libtorch_symbols"
    ],
    "class_names": [],
    "imports": [
      "concurrent.futures",
      "pathlib",
      "Any",
      "itertools",
      "check_output",
      "functools",
      "typing",
      "subprocess",
      "re",
      "distutils.sysconfig",
      "os",
      "Path"
    ]
  },
  "github_extracted/pytorch_pytorch/max_autotune.py": {
    "variables": [
      "use_mps",
      "loss",
      "use_cuda",
      "start",
      "device",
      "test_loader",
      "end",
      "batch_idx",
      "optimizer",
      "correct",
      "cuda_kwargs",
      "test_loss",
      "args",
      "result",
      "train_loader",
      "x",
      "output",
      "opt_model",
      "target",
      "data",
      "test_kwargs",
      "dataset1",
      "scheduler",
      "transform",
      "pred",
      "epoch",
      "model",
      "parser",
      "train_kwargs",
      "dataset2"
    ],
    "function_params": [
      "epoch",
      "model",
      "optimizer",
      "device",
      "self",
      "test_loader",
      "fn",
      "args",
      "train_loader",
      "x"
    ],
    "function_names": [
      "__init__",
      "forward",
      "train",
      "main",
      "test",
      "timed"
    ],
    "class_names": [
      "Net"
    ],
    "imports": [
      "transforms",
      "torch.nn.functional",
      "torch",
      "torch.optim.lr_scheduler",
      "torchvision",
      "torch.optim",
      "argparse",
      "StepLR",
      "torch.nn",
      "datasets"
    ]
  },
  "github_extracted/pytorch_pytorch/embed_library.py": {
    "variables": [
      "new_lib_soname",
      "out_dir",
      "ctx",
      "libtree",
      "tmp_whl_name",
      "f",
      "i",
      "filename",
      "lib_path",
      "_",
      "torchlib_path",
      "lines",
      "line",
      "new_lib_path",
      "whl_name",
      "patcher"
    ],
    "function_params": [
      "file_name",
      "filename",
      "self",
      "whl_path",
      "soname",
      "new_soname",
      "lib_soname",
      "update_tag"
    ],
    "function_names": [
      "embed_library",
      "set_soname",
      "replace_tag",
      "replace_needed"
    ],
    "class_names": [
      "AlignedPatchelf"
    ],
    "imports": [
      "auditwheel.wheeltools",
      "auditwheel.patcher",
      "tempfile",
      "TemporaryDirectory",
      "auditwheel.repair",
      "check_call",
      "InWheelCtx",
      "shutil",
      "lddtree",
      "copylib",
      "auditwheel.elfutils",
      "sys",
      "Patchelf",
      "subprocess",
      "os",
      "elf_file_filter",
      "auditwheel.lddtree"
    ]
  },
  "github_extracted/pytorch_pytorch/normalize_yaml_fragment.py": {
    "variables": [
      "data",
      "output"
    ],
    "function_params": [
      "use_pyyaml_formatter",
      "depth"
    ],
    "function_names": [
      "regurgitate"
    ],
    "class_names": [],
    "imports": [
      "cimodel.lib.miniyaml",
      "sys",
      "os",
      "yaml"
    ]
  },
  "github_extracted/pytorch_pytorch/trigger_azure_pipeline.py": {
    "variables": [
      "log_id",
      "retry",
      "build_base_url",
      "AZURE_PIPELINE_BASE_URL",
      "get_build_raw",
      "get_build_url",
      "log",
      "build_result",
      "build_id",
      "s",
      "resp",
      "MAX_RETRY",
      "build_status",
      "SOURCE_BRANCH",
      "PIPELINE_ID",
      "pr_num",
      "TARGET_BRANCH",
      "run_build_json",
      "get_build_logs_url",
      "TARGET_COMMIT",
      "PROJECT_ID",
      "AZURE_DEVOPS_PAT_BASE64",
      "logs",
      "log_content",
      "get_build_logs_raw",
      "build_detail",
      "handled_logs",
      "match",
      "run_build_raw"
    ],
    "function_params": [
      "pipeline_id",
      "_id",
      "source_branch",
      "url",
      "project_id",
      "source_version"
    ],
    "function_names": [
      "wait_for_build",
      "submit_build",
      "get_build_logs",
      "get_log_content",
      "get_build"
    ],
    "class_names": [],
    "imports": [
      "requests",
      "sys",
      "time",
      "re",
      "os",
      "json"
    ]
  },
  "github_extracted/pytorch_pytorch/rnn_smoke_win_arm64.py": {
    "variables": [
      "output",
      "h0",
      "hn",
      "rnn",
      "inputs"
    ],
    "function_params": [],
    "function_names": [],
    "class_names": [],
    "imports": [
      "torch.nn",
      "torch"
    ]
  },
  "github_extracted/pytorch_pytorch/run_python_nn_smoketests.py": {
    "variables": [
      "GPU_TESTS",
      "debugger",
      "command_string",
      "description",
      "python_commands",
      "COMMON_TESTS",
      "TESTS",
      "command_args",
      "sdk_root"
    ],
    "function_params": [],
    "function_names": [],
    "class_names": [],
    "imports": [
      "sys",
      "os",
      "subprocess"
    ]
  },
  "github_extracted/pytorch_pytorch/check_gomp.py": {
    "variables": [
      "python_path",
      "libgomp",
      "omp_max_threads",
      "abiflags",
      "libgomp_path",
      "python_version",
      "libtorch_cpu_path",
      "python_prefix"
    ],
    "function_params": [],
    "function_names": [
      "get_gomp_thread",
      "main"
    ],
    "class_names": [],
    "imports": [
      "pathlib",
      "sys",
      "os",
      "ctypes",
      "Path"
    ]
  },
  "github_extracted/pytorch_pytorch/build_aarch64_wheel.py": {
    "variables": [
      "ec2",
      "build_vars",
      "ubuntu20_04_ami",
      "homedir_path",
      "out",
      "addr",
      "tmp_file",
      "pytorch_repaired_wheel_name",
      "audio_wheel_name",
      "key_name",
      "docker_cmd",
      "git_clone_flags",
      "instance",
      "tag",
      "wheel_name",
      "ld_library_path",
      "keyfile_path",
      "build_date",
      "vision_wheel_name",
      "i",
      "p",
      "ami",
      "default_path",
      "login_name",
      "domain_wheels",
      "args",
      "err",
      "prefix",
      "python_version",
      "group",
      "use_conda",
      "instances",
      "tmp",
      "build_opts",
      "os_amis",
      "d",
      "host",
      "rc",
      "version",
      "running_inst",
      "pytorch_wheel_name",
      "enable_mkldnn",
      "embed_library_script",
      "basename",
      "make_flags",
      "data_wheel_name",
      "acl_build_flags",
      "build_version",
      "inst",
      "container_id",
      "parser",
      "instance_name",
      "text_wheel_name",
      "az",
      "local_file",
      "ifaces"
    ],
    "function_params": [
      "image",
      "addr",
      "key_name",
      "git_clone_flags",
      "suffix",
      "instance",
      "wheel_name",
      "port",
      "keyfile_path",
      "ami",
      "login_name",
      "python_version",
      "args",
      "filter_name",
      "branch",
      "use_conda",
      "attempt_cnt",
      "host",
      "instance_type",
      "whl",
      "self",
      "ebs_size",
      "path",
      "timeout",
      "filter_value",
      "instance_id",
      "remote_file",
      "local_file"
    ],
    "function_names": [
      "download_wheel",
      "start_docker",
      "using_docker",
      "download_file",
      "start_instance",
      "build_domains",
      "terminate_instances",
      "ec2_instances_of_type",
      "compute_keyfile_path",
      "__init__",
      "configure_system",
      "update_apt_repo",
      "upload_file",
      "build_torchvision",
      "check_ssh_output",
      "run_tests",
      "parse_arguments",
      "build_torchtext",
      "get_instance_name",
      "list_dir",
      "build_torchdata",
      "scp_download_file",
      "check_output",
      "run_cmd",
      "embed_libgomp",
      "build_OpenBLAS",
      "ec2_get_instances",
      "wait_for_connection",
      "build_torchaudio",
      "install_condaforge",
      "_split_cmd",
      "_gen_ssh_prefix",
      "scp_upload_file",
      "install_condaforge_python",
      "list_instances",
      "checkout_repo",
      "start_build",
      "ec2_instances_by_id",
      "run_ssh_cmd",
      "build_ArmComputeLibrary"
    ],
    "class_names": [
      "RemoteHost"
    ],
    "imports": [
      "tempfile",
      "NamedTemporaryFile",
      "Optional",
      "boto3",
      "ArgumentParser",
      "typing",
      "sys",
      "time",
      "Union",
      "subprocess",
      "socket",
      "argparse",
      "os"
    ]
  },
  "github_extracted/pytorch_pytorch/aarch64_wheel_ci_build.py": {
    "variables": [
      "build_vars",
      "filename",
      "lib_path",
      "acl_install_dir",
      "wheel_name",
      "libs_to_copy",
      "build_date",
      "desired_cuda",
      "i",
      "line",
      "folder",
      "lib_name",
      "args",
      "branch",
      "d",
      "version",
      "pytorch_wheel_name",
      "wheelname",
      "override_package_version",
      "repaired_wheel_name",
      "acl_checkout_dir",
      "enable_cuda",
      "acl_build_flags",
      "wheel_path",
      "f",
      "parser",
      "lines",
      "enable_mkldnn"
    ],
    "function_params": [
      "path",
      "wheel_path",
      "desired_cuda",
      "filename",
      "folder"
    ],
    "function_names": [
      "list_dir",
      "complete_wheel",
      "package_cuda_wheel",
      "replace_tag",
      "parse_arguments",
      "build_ArmComputeLibrary"
    ],
    "class_names": [],
    "imports": [
      "check_call",
      "ArgumentParser",
      "shutil",
      "check_output",
      "subprocess",
      "argparse",
      "os"
    ]
  },
  "github_extracted/pytorch_pytorch/reuse_old_whl.py": {
    "variables": [
      "new_version",
      "run_id",
      "new_stem",
      "removed_files",
      "response",
      "file",
      "workflow_runs",
      "old_version",
      "headers",
      "old_stem",
      "changed_files",
      "labels",
      "args",
      "sha",
      "head_sha",
      "label",
      "env",
      "url",
      "workflow_id",
      "run",
      "path",
      "wheel_path",
      "f",
      "parser",
      "FORCE_REBUILD_LABEL",
      "merge_base",
      "pr",
      "content",
      "zip_path"
    ],
    "function_params": [
      "build_environment",
      "run_id",
      "url",
      "workflow_id",
      "args",
      "file",
      "sha"
    ],
    "function_names": [
      "get_merge_base",
      "is_main_branch",
      "find_old_whl",
      "unzip_artifact_and_replace_files",
      "change_content_to_new_version",
      "rename_to_new_version",
      "ok_changed_file",
      "set_output",
      "can_reuse_whl",
      "query_github_api",
      "get_head_sha",
      "check_issue_open",
      "get_workflow_id",
      "check_changed_files",
      "check_labels_for_pr",
      "parse_args"
    ],
    "class_names": [],
    "imports": [
      "pathlib",
      "Optional",
      "Any",
      "cast",
      "functools",
      "typing",
      "requests",
      "lru_cache",
      "Union",
      "subprocess",
      "argparse",
      "os",
      "Path"
    ]
  },
  "github_extracted/pytorch_pytorch/ssl-check.py": {
    "variables": [
      "BAD_SSL",
      "EXC",
      "GOOD_SSL"
    ],
    "function_params": [],
    "function_names": [],
    "class_names": [],
    "imports": [
      "urllib.request",
      "sys",
      "urlopen"
    ]
  },
  "github_extracted/pytorch_pytorch/rnn_smoke.py": {
    "variables": [
      "output",
      "h0",
      "hn",
      "rnn",
      "device",
      "inputs"
    ],
    "function_params": [],
    "function_names": [],
    "class_names": [],
    "imports": [
      "torch.nn",
      "torch"
    ]
  },
  "github_extracted/pytorch_pytorch/create_test_cert.py": {
    "variables": [
      "csr",
      "pkey",
      "cert",
      "issuer",
      "f",
      "ca_cert",
      "key",
      "subject",
      "ca_key",
      "temp_dir"
    ],
    "function_params": [
      "csr_cert",
      "private_ca_key",
      "path",
      "ST",
      "O",
      "C",
      "ca_cert",
      "L",
      "key"
    ],
    "function_names": [
      "sign_certificate_request",
      "create_req",
      "create_cert",
      "genrsa"
    ],
    "class_names": [],
    "imports": [
      "mkdtemp",
      "tempfile",
      "hashes",
      "cryptography.x509.oid",
      "cryptography.hazmat.primitives.asymmetric",
      "cryptography.hazmat.primitives",
      "cryptography",
      "datetime",
      "timedelta",
      "rsa",
      "timezone",
      "x509",
      "NameOID",
      "serialization"
    ]
  },
  "github_extracted/pytorch_pytorch/cnn_smoke_win_arm64.py": {
    "variables": [
      "output",
      "net",
      "label",
      "optimizer",
      "outputs",
      "loss",
      "criterion",
      "net_inputs"
    ],
    "function_params": [
      "self",
      "inputs"
    ],
    "function_names": [
      "forward",
      "__init__"
    ],
    "class_names": [
      "SimpleCNN"
    ],
    "imports": [
      "torch.nn.functional",
      "torch.nn",
      "torch",
      "torch.optim"
    ]
  },
  "github_extracted/pytorch_pytorch/manylinux1-check.py": {
    "variables": [
      "piece",
      "version_str",
      "version",
      "gnu_get_libc_version",
      "process_namespace"
    ],
    "function_params": [
      "major",
      "minimum_minor"
    ],
    "function_names": [
      "have_compatible_glibc",
      "is_manylinux1_compatible"
    ],
    "class_names": [],
    "imports": [
      "get_platform",
      "sys",
      "_manylinux",
      "distutils.util",
      "ctypes"
    ]
  },
  "github_extracted/ivy-llc_ivy/data_type.py": {
    "variables": [],
    "function_params": [],
    "function_names": [],
    "class_names": [
      "_ArrayWithData_typeExperimental"
    ],
    "imports": [
      "abc"
    ]
  },
  "github_extracted/ivy-llc_ivy/elementwise.py": {
    "variables": [],
    "function_params": [
      "self",
      "x2"
    ],
    "function_names": [
      "subtract",
      "lcm",
      "logaddexp2",
      "isreal",
      "rad2deg",
      "tanh",
      "trunc",
      "logical_and",
      "atan",
      "isinf",
      "trunc_divide",
      "negative",
      "minimum",
      "asinh",
      "remainder",
      "gcd",
      "logical_or",
      "multiply",
      "sinh",
      "deg2rad",
      "reciprocal",
      "fmin",
      "equal",
      "log",
      "logical_not",
      "not_equal",
      "square",
      "add",
      "greater_equal",
      "atan2",
      "bitwise_invert",
      "less_equal",
      "angle",
      "real",
      "floor",
      "erf",
      "cos",
      "trapz",
      "log1p",
      "exp",
      "sign",
      "asin",
      "ceil",
      "expm1",
      "logaddexp",
      "cosh",
      "floor_divide",
      "divide",
      "exp2",
      "positive",
      "sqrt",
      "pow",
      "log10",
      "acosh",
      "bitwise_left_shift",
      "round",
      "bitwise_and",
      "less",
      "sin",
      "tan",
      "maximum",
      "abs",
      "logical_xor",
      "nan_to_num",
      "bitwise_right_shift",
      "isnan",
      "isfinite",
      "greater",
      "log2",
      "bitwise_xor",
      "atanh",
      "bitwise_or",
      "acos"
    ],
    "class_names": [
      "_ArrayWithElementwise"
    ],
    "imports": [
      "abc",
      "Optional",
      "Literal",
      "typing",
      "Union",
      "ivy"
    ]
  },
  "github_extracted/ivy-llc_ivy/update_db.py": {
    "variables": [
      "workflow",
      "collection",
      "fw_submod",
      "submodule",
      "run_id",
      "res",
      "result_config",
      "cluster",
      "db",
      "action_url",
      "key",
      "backend",
      "test_configs",
      "result"
    ],
    "function_params": [
      "name",
      "url"
    ],
    "function_names": [
      "make_clickable",
      "update_test_results"
    ],
    "class_names": [],
    "imports": [
      "sys",
      "pymongo",
      "MongoClient"
    ]
  },
  "github_extracted/ivy-llc_ivy/partial_conf.py": {
    "variables": [
      "html_js_files",
      "autosectionlabel_prefix_document",
      "discussion_channel_map",
      "autosummary_generate",
      "skippable_method_attributes",
      "html_sidebars",
      "repo_name"
    ],
    "function_params": [],
    "function_names": [],
    "class_names": [],
    "imports": [
      "docs.demos.demos_conf",
      "*",
      "docs.conf",
      "List",
      "typing",
      "html_theme_options"
    ]
  },
  "github_extracted/ivy-llc_ivy/gpu_framework_directory.py": {
    "variables": [
      "ver",
      "versions",
      "path",
      "pkg",
      "package_info",
      "arg_lis",
      "url",
      "response"
    ],
    "function_params": [
      "req",
      "path",
      "pkg",
      "package_name",
      "base"
    ],
    "function_names": [
      "directory_generator",
      "install_pkg",
      "get_latest_package_version"
    ],
    "class_names": [],
    "imports": [
      "requests",
      "sys",
      "os",
      "subprocess"
    ]
  },
  "github_extracted/ivy-llc_ivy/_version.py": {
    "variables": [
      "__version__"
    ],
    "function_params": [],
    "function_names": [],
    "class_names": [],
    "imports": []
  },
  "github_extracted/ivy-llc_ivy/creation.py": {
    "variables": [],
    "function_params": [
      "upper_edge_hertz",
      "lower_edge_hertz",
      "dft_length",
      "num_segments",
      "num_mel_bins",
      "sample_rate",
      "self",
      "segment_ids"
    ],
    "function_names": [
      "blackman_window",
      "unsorted_segment_mean",
      "eye_like",
      "trilu",
      "mel_weight_matrix",
      "unsorted_segment_sum",
      "polyval",
      "unsorted_segment_min"
    ],
    "class_names": [
      "_ArrayWithCreationExperimental"
    ],
    "imports": [
      "abc",
      "Optional",
      "typing",
      "Union",
      "ivy"
    ]
  },
  "github_extracted/ivy-llc_ivy/activations.py": {
    "variables": [],
    "function_params": [
      "out",
      "self",
      "complex_mode"
    ],
    "function_names": [
      "hardtanh",
      "softshrink",
      "silu",
      "celu",
      "scaled_tanh",
      "hardshrink",
      "hardsilu",
      "tanhshrink",
      "elu",
      "threshold",
      "relu6",
      "logit",
      "thresholded_relu",
      "selu",
      "prelu",
      "logsigmoid"
    ],
    "class_names": [
      "_ArrayWithActivationsExperimental"
    ],
    "imports": [
      "abc",
      "Optional",
      "Literal",
      "typing",
      "Union",
      "ivy"
    ]
  },
  "github_extracted/ivy-llc_ivy/array.py": {
    "variables": [
      "rep",
      "data_dict",
      "t",
      "res",
      "dec_vals",
      "i",
      "ivy_backend",
      "args",
      "ivy_array",
      "sig_fig",
      "jax_array",
      "np_array",
      "backend",
      "data",
      "native_var",
      "repr",
      "arr_np",
      "attr",
      "kwargs"
    ],
    "function_params": [
      "memodict",
      "other",
      "stream",
      "power",
      "args",
      "val",
      "query",
      "cls",
      "self",
      "data",
      "api_version",
      "func",
      "dynamic_backend",
      "item",
      "value",
      "types",
      "state",
      "key",
      "kwargs"
    ],
    "function_names": [
      "__ilshift__",
      "__getattribute__",
      "imag",
      "__contains__",
      "__rfloordiv__",
      "__torch_function__",
      "__dlpack_device__",
      "__ge__",
      "__lshift__",
      "__or__",
      "dtype",
      "__ifloordiv__",
      "base",
      "dynamic_backend",
      "__le__",
      "__add__",
      "__deepcopy__",
      "__abs__",
      "__divmod__",
      "__imod__",
      "__getitem__",
      "__neg__",
      "__rdivmod__",
      "__gt__",
      "__array_wrap__",
      "__dlpack__",
      "__int__",
      "__mod__",
      "__getattr__",
      "__rxor__",
      "__getstate__",
      "__dir__",
      "__ior__",
      "__pow__",
      "T",
      "__array__",
      "__rmod__",
      "__ixor__",
      "__rmul__",
      "__complex__",
      "__radd__",
      "__floordiv__",
      "__array_ufunc__",
      "__iter__",
      "device",
      "__float__",
      "__sub__",
      "__rpow__",
      "__array_prepare__",
      "__setstate__",
      "__imul__",
      "_view_attributes",
      "__len__",
      "__iadd__",
      "__matmul__",
      "__imatmul__",
      "__rshift__",
      "__irshift__",
      "__setitem__",
      "__repr__",
      "data",
      "_init",
      "__bool__",
      "__and__",
      "__ne__",
      "__rrshift__",
      "__invert__",
      "__rsub__",
      "__ror__",
      "__ivy_array_function__",
      "size",
      "__rand__",
      "__itruediv__",
      "__mul__",
      "__pos__",
      "__rtruediv__",
      "__rmatmul__",
      "shape",
      "__init__",
      "ndim",
      "strides",
      "real",
      "__truediv__",
      "__xor__",
      "itemsize",
      "backend",
      "__iand__",
      "__lt__",
      "__isub__",
      "__rlshift__",
      "__ipow__",
      "mT",
      "__array_namespace__",
      "__eq__"
    ],
    "class_names": [
      "Array"
    ],
    "imports": [
      "image",
      "_ArrayWithSorting",
      "experimental",
      "_ArrayWithCreation",
      "_ArrayWithNormsExperimental",
      "_ArrayWithSortingExperimental",
      "_ArrayWithStatisticalExperimental",
      "linear_algebra",
      "sorting",
      "device",
      "utility",
      "_ArrayWithActivations",
      "_variable",
      "norms",
      "_ArrayWithLayers",
      "_ArrayWithRandom",
      "_ArrayWithSetExperimental",
      "numpy",
      "elementwise",
      "_ArrayWithSet",
      "creation",
      "_ArrayWithDataTypes",
      "statistical",
      "_ArrayWithLinearAlgebraExperimental",
      "random",
      "_data_to_new_backend",
      "conversions",
      "_get_backend_for_arg",
      "general",
      "_ArrayWithLossesExperimental",
      "ivy",
      "ivy.functional.ivy.gradients",
      "_ArrayWithManipulation",
      "_ArrayWithImage",
      "_ArrayWithGradientsExperimental",
      "_ArrayWithGeneral",
      "_ArrayWithCreationExperimental",
      "_ArrayWithUtilityExperimental",
      "ivy.utils.backend.handler",
      "_ArrayWithDeviceExperimental",
      "_ArrayWithConversionsExperimental",
      "Optional",
      "layers",
      "args_to_native",
      "_ArrayWithSearching",
      "ivy.func_wrapper",
      "to_ivy",
      "_ArrayWithLosses",
      "searching",
      "set",
      "_ArrayWithGradients",
      "_ArrayWithElementWiseExperimental",
      "_ArrayWithNorms",
      "_ArrayWithGeneralExperimental",
      "_ArrayWithStatistical",
      "_ArrayWithSearchingExperimental",
      "gradients",
      "_ArrayWithRandomExperimental",
      "_ArrayWithLinearAlgebra",
      "_ArrayWithData_typeExperimental",
      "copy",
      "_ArrayWithManipulationExperimental",
      "_ArrayWithActivationsExperimental",
      "_ArrayWithLayersExperimental",
      "activations",
      "_ArrayWithDevice",
      "typing",
      "_ArrayWithUtility",
      "losses",
      "_ArrayWithElementwise",
      "manipulation",
      "_is_variable",
      "data_type",
      "handle_view_indexing",
      "_ArrayWithImageExperimental"
    ]
  },
  "github_extracted/ivy-llc_ivy/__init__.py": {
    "variables": [],
    "function_params": [],
    "function_names": [],
    "class_names": [],
    "imports": [
      "image",
      "_ArrayWithSortingExperimental",
      "_ArrayWithNormsExperimental",
      "_ArrayWithStatisticalExperimental",
      "linear_algebra",
      "sorting",
      "device",
      "utility",
      "norms",
      "_ArrayWithSetExperimental",
      "elementwise",
      "creation",
      "_ArrayWithLinearAlgebraExperimental",
      "statistical",
      "random",
      "conversions",
      "general",
      "_ArrayWithLossesExperimental",
      "_ArrayWithGradientsExperimental",
      "_ArrayWithCreationExperimental",
      "_ArrayWithUtilityExperimental",
      "_ArrayWithDeviceExperimental",
      "_ArrayWithConversionsExperimental",
      "layers",
      "set",
      "_ArrayWithElementWiseExperimental",
      "searching",
      "_ArrayWithGeneralExperimental",
      "_ArrayWithSearchingExperimental",
      "gradients",
      "_ArrayWithData_typeExperimental",
      "_ArrayWithManipulationExperimental",
      "_ArrayWithActivationsExperimental",
      "_ArrayWithLayersExperimental",
      "activations",
      "losses",
      "manipulation",
      "_ArrayWithRandomExperimental",
      "data_type",
      "_ArrayWithImageExperimental"
    ]
  },
  "github_extracted/ivy-llc_ivy/multiversion_framework_directory.py": {
    "variables": [
      "keys",
      "ver",
      "versions",
      "path",
      "json_data",
      "pkg",
      "arg_lis",
      "json_path",
      "fw",
      "file",
      "dep"
    ],
    "function_params": [
      "req",
      "path",
      "pkg",
      "pkgs",
      "base",
      "path_to_json"
    ],
    "function_names": [
      "directory_generator",
      "install_deps",
      "install_pkg"
    ],
    "class_names": [],
    "imports": [
      "sys",
      "os",
      "json",
      "subprocess"
    ]
  },
  "github_extracted/ivy-llc_ivy/conversions.py": {
    "variables": [],
    "function_params": [],
    "function_names": [],
    "class_names": [
      "_ArrayWithConversionsExperimental"
    ],
    "imports": [
      "abc"
    ]
  },
  "github_extracted/ivy-llc_ivy/device.py": {
    "variables": [],
    "function_params": [
      "device",
      "self"
    ],
    "function_names": [
      "to_device",
      "dev"
    ],
    "class_names": [
      "_ArrayWithDevice"
    ],
    "imports": [
      "abc",
      "Optional",
      "Any",
      "typing",
      "Union",
      "ivy"
    ]
  },
  "github_extracted/pydantic_pydantic/_docs_extraction.py": {
    "variables": [
      "frame",
      "source",
      "lnum",
      "node_result",
      "block_lines",
      "block_tree",
      "stmt",
      "visitor",
      "_",
      "lines",
      "dedent_source",
      "docstring"
    ],
    "function_params": [
      "source",
      "cls",
      "self",
      "use_inspect",
      "node"
    ],
    "function_names": [
      "__init__",
      "visit_Expr",
      "_extract_source_from_frame",
      "extract_docstrings_from_cls",
      "visit_AnnAssign",
      "visit",
      "_dedent_source_lines"
    ],
    "class_names": [
      "DocstringVisitor"
    ],
    "imports": [
      "inspect",
      "Any",
      "annotations",
      "typing",
      "sys",
      "textwrap",
      "ast",
      "__future__"
    ]
  },
  "github_extracted/pydantic_pydantic/_dataclasses.py": {
    "variables": [
      "__pydantic_validator__",
      "__pydantic_config__",
      "__pydantic_decorators__",
      "__pydantic_complete__",
      "typevars_map",
      "schema",
      "__pydantic_fields__",
      "DeprecationWarning",
      "__pydantic_core_schema__",
      "s",
      "gen_schema",
      "cls",
      "__tracebackhide__",
      "original_init",
      "fields",
      "__pydantic_serializer__",
      "core_config"
    ],
    "function_params": [
      "ns_resolver",
      "cls",
      "config_wrapper",
      "__dataclass_self__"
    ],
    "function_names": [
      "set_dataclass_fields",
      "complete_dataclass",
      "__init__",
      "is_stdlib_dataclass"
    ],
    "class_names": [
      "PydanticDataclass"
    ],
    "imports": [
      "_fields",
      "PydanticDeprecatedSince20",
      "_namespace_utils",
      "TypeIs",
      "functools",
      "ClassVar",
      "PydanticUndefinedAnnotation",
      "PluggableSchemaValidator",
      "GenerateSchema",
      "_config",
      "collect_dataclass_fields",
      "get_standard_typevars_map",
      "SchemaValidator",
      "_mock_val_ser",
      "SchemaSerializer",
      "LazyClassAttribute",
      "FieldInfo",
      "set_dataclass_mocks",
      "Any",
      "annotations",
      "typing_extensions",
      "plugin._schema_validator",
      "config",
      "_utils",
      "create_schema_validator",
      "generate_pydantic_signature",
      "NsResolver",
      "_signature",
      "_generate_schema",
      "ConfigDict",
      "_generics",
      "_typeshed",
      "fields",
      "partial",
      "core_schema",
      "InvalidSchemaError",
      "typing",
      "pydantic_core",
      "errors",
      "DataclassInstance",
      "warnings",
      "_decorators",
      "__future__",
      "ArgsKwargs"
    ]
  },
  "github_extracted/pydantic_pydantic/_core_utils.py": {
    "variables": [
      "meta_k",
      "AnyFunctionSchema",
      "k",
      "CoreSchemaOrField",
      "arg",
      "_CORE_SCHEMA_FIELD_TYPES",
      "_LIST_LIKE_SCHEMA_WITH_ITEMS_TYPES",
      "v",
      "FunctionSchemaWithInnerSchema",
      "CoreSchemaField",
      "args",
      "pps",
      "qualname",
      "val",
      "meta_v",
      "module_name",
      "arg_ref",
      "arg_refs",
      "cleaned_schema",
      "origin",
      "type_ref",
      "_FUNCTION_WITH_INNER_SCHEMA_TYPES",
      "generic_metadata",
      "new_dct",
      "new_metadata"
    ],
    "function_params": [
      "schema",
      "obj",
      "val",
      "strip_metadata",
      "type_",
      "s",
      "args_override"
    ],
    "function_names": [
      "is_core_schema_field",
      "get_type_ref",
      "get_ref",
      "is_core_schema",
      "is_list_like_schema_with_items_schema",
      "_clean_schema_for_pretty_print",
      "is_function_with_inner_schema",
      "pretty_print_core_schema",
      "validate_core_schema"
    ],
    "class_names": [],
    "imports": [
      "Union",
      "_repr",
      "Sequence",
      "typing_objects",
      "is_generic_alias",
      "inspect",
      "TypeGuard",
      "_typing_extra",
      "Any",
      "get_args",
      "annotations",
      "collections.abc",
      "TYPE_CHECKING",
      "rich.console",
      "pprint",
      "TypeAdapter",
      "typing_extensions",
      "get_origin",
      "rich.pretty",
      "Console",
      "pydantic",
      "validate_core_schema",
      "BaseModel",
      "Mapping",
      "os",
      "pydantic.dataclasses",
      "core_schema",
      "CoreSchema",
      "is_pydantic_dataclass",
      "typing_inspection",
      "typing",
      "pydantic_core",
      "__future__"
    ]
  },
  "github_extracted/pydantic_pydantic/_decorators.py": {
    "variables": [
      "name",
      "field_validators",
      "mode",
      "_sentinel",
      "k",
      "var_name",
      "cls_var_name",
      "seqs",
      "is_field_serializer",
      "res",
      "info_arg",
      "unwrap_types",
      "bases",
      "v",
      "check_fields",
      "non_empty",
      "each_item",
      "wrapped",
      "s",
      "decorator_info",
      "computed_fields",
      "AnyDecoratorCallable",
      "first",
      "cls_ref",
      "seq",
      "candidate",
      "always",
      "root_validators",
      "json_schema_input_type",
      "ReturnType",
      "info",
      "not_head",
      "model_serializers",
      "when_used",
      "callable_obj",
      "var_value",
      "parameters",
      "return_type",
      "attribute_get",
      "field_serializer_decorator",
      "attribute",
      "fields",
      "base",
      "validators",
      "shim",
      "_function_like",
      "func",
      "DecoratorInfoType",
      "DecoratedType",
      "field_serializers",
      "computed_field_dec",
      "param",
      "value",
      "hints",
      "model_validators",
      "f",
      "sig",
      "decorator_repr",
      "attr",
      "DecoratorInfo",
      "n_positional",
      "existing",
      "call_func",
      "to_replace"
    ],
    "function_params": [
      "name",
      "mode",
      "model_dc",
      "seqs",
      "function",
      "globalns",
      "serializer",
      "instance",
      "bases",
      "obj",
      "obj_type",
      "config_wrapper",
      "callable_obj",
      "cls",
      "self",
      "func",
      "validator",
      "f",
      "sig",
      "tp",
      "localns",
      "n_positional",
      "cls_"
    ],
    "function_names": [
      "__get__",
      "count_positional_required_params",
      "_is_classmethod_from_sig",
      "_call_wrapped_attr",
      "get_attribute_from_bases",
      "unwrap_wrapped_function",
      "__set_name__",
      "get_bases",
      "is_instance_method_from_sig",
      "bind_to_cls",
      "inspect_annotated_serializer",
      "__getattr__",
      "ensure_classmethod_based_on_signature",
      "merge_seqs",
      "inspect_validator",
      "update_from_config",
      "__post_init__",
      "inspect_model_serializer",
      "get_callable_return_type",
      "ensure_property",
      "mro",
      "build",
      "get_attribute_from_base_dicts",
      "mro_for_bases",
      "inspect_field_serializer",
      "_serializer_info_arg"
    ],
    "class_names": [
      "ValidatorDecoratorInfo",
      "DecoratorInfos",
      "FieldSerializerDecoratorInfo",
      "Decorator",
      "RootValidatorDecoratorInfo",
      "FieldValidatorDecoratorInfo",
      "PydanticDescriptorProxy",
      "ModelSerializerDecoratorInfo",
      "ModelValidatorDecoratorInfo"
    ],
    "imports": [
      "field",
      "signature",
      "slots_true",
      "itertools",
      "_namespace_utils",
      "ComputedFieldInfo",
      "dataclass",
      "dataclasses",
      "functools",
      "cached_property",
      "isdatadescriptor",
      "ClassVar",
      "Union",
      "get_function_type_hints",
      "Callable",
      "_config",
      "functional_validators",
      "get_type_ref",
      "inspect",
      "collections",
      "is_typeddict",
      "FieldValidatorModes",
      "_typing_extra",
      "Any",
      "Literal",
      "TypeAlias",
      "PydanticUserError",
      "annotations",
      "Generic",
      "ConfigWrapper",
      "collections.abc",
      "TYPE_CHECKING",
      "partialmethod",
      "TypeVar",
      "PydanticUndefined",
      "_core_utils",
      "islice",
      "can_be_positional",
      "Parameter",
      "Iterable",
      "MappingNamespace",
      "typing_extensions",
      "deque",
      "ismethoddescriptor",
      "_utils",
      "fields",
      "Signature",
      "partial",
      "core_schema",
      "PydanticUndefinedType",
      "_internal_dataclass",
      "GlobalsNamespace",
      "typing",
      "pydantic_core",
      "errors",
      "types",
      "__future__"
    ]
  },
  "github_extracted/pydantic_pydantic/_decorators_v1.py": {
    "variables": [
      "val2",
      "V1Validator",
      "model_dict",
      "needs_values_kw",
      "values",
      "parameter",
      "RootValidatorValues",
      "k",
      "sig",
      "val1",
      "fields",
      "RootValidatorFieldsTuple",
      "init_vars",
      "fields_set",
      "param_name",
      "param_num",
      "model_dict_new",
      "model_extra"
    ],
    "function_params": [
      "pre",
      "validator",
      "param",
      "info",
      "__fields_tuple",
      "fields_tuple",
      "value",
      "values",
      "_",
      "self",
      "__value",
      "__info",
      "__values"
    ],
    "function_names": [
      "make_v1_generic_root_validator",
      "can_be_keyword",
      "wrapper1",
      "__call__",
      "_wrapper2",
      "make_generic_v1_field_validator",
      "wrapper2",
      "_wrapper1"
    ],
    "class_names": [
      "V1ValidatorWithKwargs",
      "V1ValidatorWithValues",
      "V1OnlyValueValidator",
      "V1ValidatorWithValuesKwOnly",
      "V1RootValidatorFunction",
      "V2CoreAfterRootValidator",
      "V1ValidatorWithValuesAndKwargs",
      "V2CoreBeforeRootValidator"
    ],
    "imports": [
      "Protocol",
      "inspect",
      "typing_extensions",
      "core_schema",
      "signature",
      "Any",
      "_utils",
      "cast",
      "PydanticUserError",
      "annotations",
      "typing",
      "pydantic_core",
      "errors",
      "Union",
      "__future__",
      "can_be_positional",
      "Parameter"
    ]
  },
  "github_extracted/pydantic_pydantic/_git.py": {
    "variables": [],
    "function_params": [
      "dir"
    ],
    "function_names": [
      "have_git",
      "git_revision",
      "is_git_repo"
    ],
    "class_names": [],
    "imports": [
      "pathlib",
      "annotations",
      "subprocess",
      "__future__",
      "Path"
    ]
  },
  "github_extracted/pydantic_pydantic/_forward_ref.py": {
    "variables": [
      "type_ref",
      "__hash__",
      "__name__"
    ],
    "function_params": [
      "other",
      "self"
    ],
    "function_names": [
      "__call__",
      "__ror__",
      "__or__"
    ],
    "class_names": [
      "PydanticRecursiveRef"
    ],
    "imports": [
      "dataclass",
      "annotations",
      "dataclasses",
      "typing",
      "Union",
      "__future__"
    ]
  },
  "github_extracted/pydantic_pydantic/_config.py": {
    "variables": [
      "validate_by_alias",
      "c",
      "title",
      "__slots__",
      "raw_annotations",
      "k",
      "str_min_length",
      "str_to_lower",
      "from_attributes",
      "plugin_settings",
      "config_new",
      "config_from_namespace",
      "deprecated_renamed_keys",
      "json_schema_serialization_defaults_required",
      "extra",
      "schema_generator",
      "V2_REMOVED_KEYS",
      "defer_build",
      "v",
      "alias_generator",
      "deprecated_removed_keys",
      "validate_return",
      "json_schema_extra",
      "json_schema_mode_override",
      "cache_strings",
      "config_keys",
      "validate_default",
      "serialize_by_alias",
      "V2_RENAMED_KEYS",
      "config_wrapper",
      "config_dict",
      "val_json_bytes",
      "protected_namespaces",
      "renamings",
      "frozen",
      "config_defaults",
      "ser_json_inf_nan",
      "DeprecationWarning",
      "config",
      "message",
      "validate_assignment",
      "loc_by_alias",
      "allow_inf_nan",
      "json_encoders",
      "ser_json_timedelta",
      "field_title_generator",
      "regex_engine",
      "strict",
      "revalidate_instances",
      "removed_bullets",
      "populate_by_name",
      "str_max_length",
      "ignored_types",
      "base",
      "use_attribute_docstrings",
      "config_class_from_namespace",
      "str_strip_whitespace",
      "use_enum_values",
      "config_dict_from_namespace",
      "ser_json_bytes",
      "coerce_numbers_to_str",
      "validation_error_cause",
      "hide_input_in_errors",
      "renamed_bullets",
      "model_title_generator",
      "arbitrary_types_allowed",
      "str_to_upper",
      "validate_by_name",
      "DEPRECATION_MESSAGE"
    ],
    "function_params": [
      "bases",
      "namespace",
      "name",
      "title",
      "config",
      "cls",
      "self",
      "config_wrapper",
      "kwargs",
      "config_dict"
    ],
    "function_names": [
      "__init__",
      "prepare_config",
      "check_deprecated",
      "__repr__",
      "tail",
      "__getattr__",
      "core_config",
      "for_model",
      "push"
    ],
    "class_names": [
      "ConfigWrapperStack",
      "ConfigWrapper"
    ],
    "imports": [
      "_internal._schema_generation_shared",
      "PydanticDeprecatedSince20",
      "Self",
      "ComputedFieldInfo",
      "aliases",
      "ExtraValues",
      "Callable",
      "re",
      "Pattern",
      "GenerateSchema",
      "FieldInfo",
      "PydanticDeprecatedSince210",
      "JsonSchemaExtraCallable",
      "Any",
      "Literal",
      "contextmanager",
      "JsonEncoder",
      "cast",
      "PydanticUserError",
      "annotations",
      "TYPE_CHECKING",
      "AliasGenerator",
      "JsonDict",
      "typing_extensions",
      "config",
      "fields",
      "ConfigDict",
      "contextlib",
      "core_schema",
      "typing",
      "pydantic_core",
      "errors",
      "warnings",
      "__future__"
    ]
  },
  "github_extracted/pydantic_pydantic/people.py": {
    "variables": [
      "title",
      "question_commentors",
      "top_reviewers",
      "min_count_last_month",
      "login",
      "pr_reviewers",
      "last_month_active",
      "issues",
      "discussion_commentors",
      "headers",
      "count",
      "min_count_reviewer",
      "replies",
      "question_last_month_commentors",
      "bot_names",
      "github_graphql_url",
      "issue_nodes",
      "maintainers_logins",
      "maintainers",
      "issue_commentors",
      "github_repository",
      "discussions_last_month_commentors",
      "pr_edges",
      "url",
      "repository",
      "contributors",
      "comment",
      "issue",
      "commentor",
      "pr",
      "edge",
      "name",
      "avatarUrl",
      "extra_experts",
      "reviewers",
      "variables",
      "request_timeout",
      "discussion_edge",
      "skip_users",
      "discussion_nodes",
      "reviewer",
      "now",
      "discussion_author_name",
      "discussion",
      "review",
      "expert_logins",
      "pullRequests",
      "labels",
      "number",
      "result",
      "graphql_response",
      "branch_name",
      "people_path",
      "people",
      "author",
      "experts",
      "createdAt",
      "author_name",
      "message",
      "comments",
      "edges",
      "node",
      "commentors",
      "min_count_expert",
      "nodes",
      "issue_edges",
      "user",
      "min_count_contributor",
      "discussions_commentors",
      "settings",
      "top_contributors",
      "data",
      "discussions_query",
      "cursor",
      "input_token",
      "question_authors",
      "expert",
      "pr_commentors",
      "g",
      "state",
      "e",
      "authors",
      "discussions",
      "new_people_content",
      "users",
      "discussions_authors",
      "people_old_content",
      "issues_query",
      "reviews",
      "last_month_commentors",
      "response",
      "prs_query",
      "reply",
      "discussion_edges",
      "one_month_ago",
      "issue_author_name",
      "pr_authors",
      "pr_nodes",
      "repo",
      "last_edge"
    ],
    "function_params": [
      "settings"
    ],
    "function_names": [
      "get_graphql_question_discussion_edges",
      "get_discussions_experts",
      "get_graphql_response",
      "get_graphql_pr_edges",
      "get_graphql_issue_edges",
      "get_issues_experts",
      "get_experts",
      "get_top_users",
      "get_contributors"
    ],
    "class_names": [
      "IssuesResponse",
      "Labels",
      "DiscussionsEdge",
      "CommentsNode",
      "Discussions",
      "PRsResponse",
      "PullRequestNode",
      "LabelNode",
      "Replies",
      "DiscussionsResponseData",
      "IssuesNode",
      "PRsRepository",
      "IssuesResponseData",
      "DiscussionsComments",
      "Settings",
      "DiscussionsNode",
      "IssuesRepository",
      "Issues",
      "DiscussionsRepository",
      "IssuesEdge",
      "Comments",
      "PRsResponseData",
      "PullRequests",
      "PullRequestEdge",
      "Author",
      "ReviewNode",
      "DiscussionsCommentsNode",
      "Reviews",
      "DiscussionsResponse"
    ],
    "imports": [
      "Github",
      "pathlib",
      "Counter",
      "pydantic_settings",
      "Container",
      "collections",
      "Any",
      "logging",
      "datetime",
      "timedelta",
      "requests",
      "timezone",
      "sys",
      "collections.abc",
      "github",
      "pydantic",
      "BaseModel",
      "SecretStr",
      "Path",
      "typing",
      "yaml",
      "BaseSettings",
      "subprocess"
    ]
  },
  "github_extracted/pydantic_pydantic/_generics.py": {
    "variables": [
      "pydantic_generic_metadata",
      "GenericTypesCacheKey",
      "origin_type",
      "expected_len",
      "token",
      "parameter",
      "argument",
      "k",
      "t",
      "_missing",
      "KT",
      "annotated_type",
      "_LIMITED_DICT_SIZE",
      "arg",
      "model_module",
      "bases",
      "called_globally",
      "resolved_list",
      "typevars_map",
      "cached",
      "p",
      "annotations",
      "_generic_recursion_cache",
      "generic_types_cache",
      "excess",
      "args",
      "reference_module_globals",
      "self_type",
      "hit",
      "namespace",
      "ns",
      "visited",
      "parameters",
      "kwds",
      "var",
      "mapping",
      "frame_globals",
      "VT",
      "GenericTypesCache",
      "resolved_type_args",
      "type_args",
      "element",
      "to_remove",
      "meta",
      "origin",
      "param",
      "type_ref",
      "value",
      "object_by_reference",
      "reference_name",
      "previous_caller_frame",
      "args_data",
      "created_model",
      "_GENERIC_TYPES_CACHE",
      "generic_metadata",
      "previously_seen_type_refs",
      "DictValues",
      "has_default"
    ],
    "function_params": [
      "parent",
      "params",
      "v",
      "model_name",
      "origin",
      "type_map",
      "size_limit",
      "value",
      "type_",
      "depth",
      "cls",
      "self",
      "key",
      "args",
      "typevar_values"
    ],
    "function_names": [
      "recursively_defined_type_refs",
      "set_cached_generic_type",
      "get_cached_generic_type_late",
      "_late_cache_key",
      "get_model_typevars_map",
      "clear",
      "get_standard_typevars_map",
      "__init__",
      "get_args",
      "replace_types",
      "get_cached_generic_type_early",
      "generic_recursion_self_type",
      "_early_cache_key",
      "_get_caller_frame_info",
      "get_origin",
      "__setitem__",
      "create_generic_submodel",
      "_union_orderings_key",
      "map_generic_model_arguments",
      "__delitem__",
      "iter_contained_typevars"
    ],
    "class_names": [
      "DeepChainMap",
      "PydanticGenericMetadata",
      "LimitedDict"
    ],
    "imports": [
      "ChainMap",
      "prepare_class",
      "itertools",
      "Annotated",
      "PydanticRecursiveRef",
      "typing_objects",
      "get_type_ref",
      "collections",
      "_typing_extra",
      "Any",
      "contextmanager",
      "contextvars",
      "annotations",
      "sys",
      "collections.abc",
      "TYPE_CHECKING",
      "TypeVar",
      "is_union_origin",
      "_core_utils",
      "_forward_ref",
      "zip_longest",
      "typing_extensions",
      "_utils",
      "ContextVar",
      "BaseModel",
      "Mapping",
      "_UnionGenericAlias",
      "is_model_class",
      "contextlib",
      "typing_inspection",
      "typing",
      "types",
      "all_identical",
      "main",
      "weakref",
      "typing_inspection.introspection",
      "__future__",
      "Iterator",
      "WeakValueDictionary"
    ]
  },
  "github_extracted/pydantic_pydantic/main.py": {
    "variables": [
      "table",
      "version_py",
      "name",
      "col_names",
      "pydantic_core_version",
      "code",
      "md",
      "history",
      "additional",
      "start",
      "t",
      "most_active_users_template",
      "using",
      "min_minor_version",
      "predicate",
      "py_type",
      "default_description",
      "table_markdown",
      "full_html",
      "last_code",
      "mkdocs_run_deps",
      "new_file",
      "docs_content",
      "table_id",
      "top_reviewers_template",
      "rendered",
      "tile_template",
      "html",
      "THIS_DIR",
      "libraries",
      "prefix",
      "cols",
      "sha",
      "numbers",
      "top_contributors_template",
      "pydantic_extra_types_version",
      "output",
      "req",
      "m",
      "maintainers_template",
      "PROJECT_ROOT",
      "minor_version",
      "version_str",
      "filtered_table_predicates",
      "markdown",
      "people",
      "version",
      "org",
      "experts_template",
      "url",
      "defined_in",
      "ind",
      "orgs_grid",
      "upgraded",
      "json_text",
      "table_text",
      "json_type",
      "lib",
      "attrs",
      "py_code",
      "version_ref",
      "notes",
      "path",
      "MIN_MINOR_VERSION",
      "elements",
      "pyproject_toml",
      "pydantic_version",
      "uv_lock",
      "f",
      "template",
      "logger",
      "content",
      "MAX_MINOR_VERSION",
      "DOCS_DIR",
      "tab_code",
      "orgs_data"
    ],
    "function_params": [
      "col_values",
      "min_version",
      "col_names",
      "code",
      "m",
      "config",
      "m2",
      "files",
      "markdown",
      "match",
      "page"
    ],
    "function_names": [
      "build_schema_mappings",
      "_generate_table_heading",
      "add_mkdocs_run_deps",
      "render_pydantic_settings",
      "on_pre_build",
      "get_orgs_data",
      "on_files",
      "render_index",
      "replace_last_print",
      "build_conversion_table",
      "insert_json_output",
      "add_tabs",
      "render_why",
      "populate_pydantic_people",
      "devtools_example",
      "replace_json",
      "_upgrade_code",
      "add_changelog",
      "on_page_markdown",
      "upgrade_python",
      "_generate_table_row"
    ],
    "class_names": [],
    "imports": [
      "pathlib",
      "Config",
      "autoflake",
      "re",
      "json",
      "Template",
      "logging",
      "requests",
      "annotations",
      "textwrap",
      "conversion_table",
      "pyupgrade._main",
      "mkdocs.structure.files",
      "jinja2",
      "indent",
      "Files",
      "os",
      "mkdocs.structure.pages",
      "Path",
      "Page",
      "tomli",
      "mkdocs.config",
      "yaml",
      "__future__"
    ]
  },
  "github_extracted/pydantic_pydantic/conversion_table.py": {
    "variables": [
      "c",
      "core_schemas",
      "col_names",
      "python_input",
      "invalid_examples",
      "condition",
      "row",
      "table_rows",
      "input_type",
      "conversion_table",
      "o",
      "valid_examples",
      "open_nowrap_span",
      "strict",
      "input_source",
      "field_type",
      "rows",
      "lines",
      "json_input",
      "close_nowrap_span"
    ],
    "function_params": [
      "predicate",
      "row",
      "self",
      "cols"
    ],
    "function_names": [
      "col_values",
      "row_sort_key",
      "sorted",
      "filtered",
      "as_markdown",
      "input_source_str",
      "field_type_str",
      "input_type_str",
      "row_as_markdown"
    ],
    "class_names": [
      "Row",
      "ConversionTable"
    ],
    "imports": [
      "pathlib",
      "IntEnum",
      "UUID",
      "dataclass",
      "dataclasses",
      "uuid",
      "re",
      "Sequence",
      "Pattern",
      "Enum",
      "collections",
      "Any",
      "date",
      "datetime",
      "timedelta",
      "annotations",
      "ByteSize",
      "collections.abc",
      "Iterable",
      "ipaddress",
      "TypedDict",
      "typing_extensions",
      "IPv4Address",
      "deque",
      "pydantic",
      "enum",
      "time",
      "IPv6Interface",
      "IPv6Address",
      "IPv6Network",
      "Mapping",
      "Path",
      "decimal",
      "InstanceOf",
      "core_schema",
      "CoreSchema",
      "IPv4Interface",
      "typing",
      "IPv4Network",
      "pydantic_core",
      "Decimal",
      "__future__"
    ]
  },
  "github_extracted/pydantic_pydantic/_fields.py": {
    "variables": [
      "field",
      "title",
      "type_hints",
      "rebuilt_fields",
      "__slots__",
      "anno_arg",
      "ns_resolver",
      "dataclass_field",
      "pn",
      "globalns",
      "alias",
      "anno_type_arg",
      "parent_fields_lookup",
      "serialization_alias",
      "bases",
      "valid_namespaces_str",
      "FieldInfo",
      "decorators",
      "valid_namespaces",
      "class_vars",
      "generic_origin",
      "dataclass_fields",
      "annotations",
      "_",
      "args",
      "new_field",
      "evaluated",
      "ann_type",
      "assigned_value",
      "FieldInfo_",
      "parameters",
      "model_fields",
      "ann",
      "field_title_generator",
      "BaseModel",
      "fields",
      "base",
      "validation_alias",
      "ann_name",
      "protected_namespace",
      "fields_docs",
      "field_info",
      "ns_violation",
      "b",
      "f_name",
      "assign",
      "sig",
      "original_assignment",
      "localns",
      "existing_desc"
    ],
    "function_params": [
      "bases",
      "field_info",
      "ann_type",
      "alias_generator",
      "name",
      "metadata",
      "default_factory",
      "field_name",
      "cls_name",
      "cls",
      "ns_resolver",
      "self",
      "use_inspect",
      "config_wrapper",
      "fields",
      "title_generator",
      "protected_namespaces",
      "ann_name"
    ],
    "function_names": [
      "_general_metadata_cls",
      "collect_dataclass_fields",
      "__init__",
      "rebuild_model_fields",
      "_update_fields_from_docstrings",
      "is_valid_privateattr_name",
      "_warn_on_nested_alias_in_annotation",
      "collect_model_fields",
      "_check_protected_namespaces",
      "takes_validated_data_argument",
      "update_field_from_config",
      "_apply_alias_generator_to_field_info",
      "pydantic_general_metadata",
      "_apply_field_title_generator_to_field_info",
      "is_valid_field_name"
    ],
    "class_names": [
      "PydanticMetadata",
      "_PydanticGeneralMetadata"
    ],
    "imports": [
      "signature",
      "_namespace_utils",
      "TypeIs",
      "extract_docstrings_from_cls",
      "_dataclasses",
      "functools",
      "dataclasses",
      "aliases",
      "_repr",
      "_docs_extraction",
      "Callable",
      "re",
      "PydanticDeprecatedSince211",
      "Pattern",
      "typing_objects",
      "_config",
      "inspect",
      "FieldInfo",
      "_typing_extra",
      "Any",
      "Representation",
      "PydanticUserError",
      "annotations",
      "ConfigWrapper",
      "collections.abc",
      "TYPE_CHECKING",
      "AliasGenerator",
      "TypeVar",
      "PydanticUndefined",
      "_import_utils",
      "can_be_positional",
      "Parameter",
      "cache",
      "typing_extensions",
      "get_origin",
      "AnnotationSource",
      "ismethoddescriptor",
      "pydantic",
      "_utils",
      "import_cached_field_info",
      "import_cached_base_model",
      "BaseModel",
      "NsResolver",
      "fields",
      "Mapping",
      "_generics",
      "pydantic.errors",
      "copy",
      "annotated_types",
      "DecoratorInfos",
      "get_first_not_none",
      "typing_inspection",
      "typing",
      "pydantic_core",
      "main",
      "warnings",
      "BaseMetadata",
      "_decorators",
      "typing_inspection.introspection",
      "__future__",
      "StandardDataclass"
    ]
  },
  "github_extracted/pydantic_pydantic/_discriminated_union.py": {
    "variables": [
      "field",
      "choice_schema",
      "discriminator",
      "subchoices",
      "schema_ref",
      "choice",
      "definitions_wrapper",
      "choice_values",
      "alias",
      "inferred_discriminator_values",
      "schema",
      "v",
      "metadata",
      "source",
      "wrapped",
      "subchoice",
      "validator_type",
      "x",
      "discriminator_value",
      "values",
      "err_str",
      "inner_discriminator",
      "nullable_wrapper",
      "choices_schemas",
      "subchoice_values",
      "subchoice_schema",
      "existing_choice"
    ],
    "function_params": [
      "field",
      "schema",
      "source_name",
      "source",
      "values",
      "discriminator",
      "ref",
      "self",
      "choice",
      "definitions"
    ],
    "function_names": [
      "apply",
      "apply_discriminator",
      "__init__",
      "_handle_choice",
      "_is_discriminator_shared",
      "_infer_discriminator_values_for_field",
      "_infer_discriminator_values_for_inner_schema",
      "_set_unique_choice_for_values",
      "_infer_discriminator_values_for_typed_dict_choice",
      "_apply_to_root",
      "set_discriminator_in_metadata",
      "_infer_discriminator_values_for_choice",
      "_infer_discriminator_values_for_dataclass_choice",
      "_infer_discriminator_values_for_model_choice"
    ],
    "class_names": [
      "MissingDefinitionForUnionRef",
      "_ApplyInferredDiscriminator"
    ],
    "imports": [
      "Discriminator",
      "Sequence",
      "_core_metadata",
      "Any",
      "cast",
      "PydanticUserError",
      "annotations",
      "CoreSchemaField",
      "collections.abc",
      "TYPE_CHECKING",
      "_core_utils",
      "core_schema",
      "CoreSchema",
      "typing",
      "pydantic_core",
      "Hashable",
      "errors",
      "types",
      "CoreMetadata",
      "__future__"
    ]
  },
  "github_extracted/pydantic_pydantic/_core_metadata.py": {
    "variables": [
      "pydantic_js_annotation_functions",
      "pydantic_js_extra",
      "pydantic_js_prefer_positional_arguments",
      "pydantic_internal_union_tag_key",
      "core_metadata",
      "pydantic_js_functions",
      "pydantic_js_updates",
      "pydantic_internal_union_discriminator",
      "existing_updates",
      "existing_pydantic_js_extra"
    ],
    "function_params": [],
    "function_names": [
      "update_core_metadata"
    ],
    "class_names": [
      "CoreMetadata"
    ],
    "imports": [
      "TypedDict",
      "_schema_generation_shared",
      "json_schema",
      "GetJsonSchemaFunction",
      "JsonSchemaExtraCallable",
      "Any",
      "config",
      "cast",
      "warnings",
      "annotations",
      "typing",
      "PydanticJsonSchemaWarning",
      "TYPE_CHECKING",
      "warn",
      "__future__",
      "JsonDict"
    ]
  },
  "github_extracted/pydantic_pydantic/__init__.py": {
    "variables": [],
    "function_params": [],
    "function_names": [],
    "class_names": [],
    "imports": []
  },
  "github_extracted/pydantic_pydantic/using_update.py": {
    "variables": [
      "table",
      "stars",
      "f",
      "repo",
      "data",
      "url",
      "resp",
      "session",
      "THIS_DIR",
      "libs",
      "lib"
    ],
    "function_params": [
      "lib"
    ],
    "function_names": [
      "update_lib"
    ],
    "class_names": [],
    "imports": [
      "pathlib",
      "tomli",
      "requests",
      "time",
      "sleep",
      "Path"
    ]
  },
  "github_extracted/pydantic_pydantic/_generate_schema.py": {
    "variables": [
      "field",
      "python_schema",
      "__slots__",
      "BaseModel_",
      "has_post_init",
      "instance_schema",
      "coerce_instance_wrap",
      "is_field_serializer",
      "serializer",
      "inlinable_def_ref",
      "tag",
      "serialization_alias",
      "js_modify_function",
      "s",
      "extra_items_type",
      "p",
      "metadata_schema",
      "annotations",
      "item_type_schema",
      "var_args_schema",
      "values_schema",
      "args",
      "MAPPING_TYPES",
      "DICT_TYPES",
      "metadata_js_function",
      "params",
      "validators_from_decorators",
      "SEQUENCE_TYPES",
      "field_name",
      "core_metadata",
      "keys_schema",
      "typed_dict_cls",
      "required",
      "BaseModel",
      "parameters_list",
      "base",
      "lax_schema",
      "namedtuple_ref",
      "get_inner_schema",
      "meta",
      "return_schema",
      "return_type_schema",
      "pydantic_js_functions",
      "enum_schema",
      "model_validators",
      "f",
      "cls_name",
      "a",
      "tp",
      "sig",
      "cases",
      "choices_with_tags",
      "source_type",
      "readonly_fields",
      "td_schema",
      "pydantic_js_annotation_functions",
      "name",
      "ip_type_json_schema_format",
      "var_kwargs_schema",
      "remaining_defs",
      "AnyFieldDecorator",
      "enum_ref",
      "dataclass",
      "bound",
      "extras_annotation",
      "maybe_updated_schema",
      "annotation_get_schema",
      "discriminator",
      "definitions",
      "info_arg",
      "ParametersCallback",
      "ref_mode",
      "obj",
      "ser",
      "_mode_to_validator",
      "original_schema",
      "is_base_model_get_schema",
      "extras_schema",
      "variadic_item_index",
      "unpack_type",
      "list_schema",
      "generic_origin",
      "i",
      "ITERABLE_TYPES",
      "computed_fields",
      "extra_keys_type",
      "encoder",
      "typed_dict_ref",
      "args_schema",
      "type_param",
      "result",
      "field_docstrings",
      "each_item_validators",
      "COUNTER_TYPES",
      "inner_schema",
      "DEQUE_TYPES",
      "d",
      "value_ser_type",
      "decorator",
      "dec",
      "default_missing",
      "return_hint",
      "description",
      "serialization_exclude",
      "validators",
      "js_updates",
      "ValidateCallSupportedTypes",
      "param",
      "dataclass_ref",
      "mapped_origin",
      "strict_schema",
      "get_schema",
      "inner",
      "item_type",
      "model_schema",
      "new_ref",
      "serialization",
      "extras_keys_schema",
      "candidate_cls",
      "c",
      "has_slots",
      "_VALIDATOR_F_MATCH",
      "inlining_behavior",
      "var_kwargs_mode",
      "def_schema",
      "cs",
      "choice",
      "globalns",
      "json_schema_updates",
      "lax_inner_schema",
      "schema",
      "v",
      "JsonEncoders",
      "pydantic_js_extra",
      "metadata",
      "decorators",
      "fields_schema",
      "typevars_map",
      "GetCoreSchemaFunction",
      "FieldInfo",
      "arguments_list",
      "arg_schema",
      "parameter_schema",
      "_definitions",
      "_recursively_seen",
      "arguments_schema",
      "non_pos_only_param_names",
      "PATTERN_TYPES",
      "plural",
      "model_ref",
      "parameter_mode",
      "IP_TYPES",
      "path_constructor",
      "nullable",
      "expected",
      "config",
      "visited",
      "val_type",
      "TYPE_TYPES",
      "fields_repr",
      "ModifyCoreSchemaWrapHandler",
      "check_instance",
      "mode_lookup",
      "validation_alias",
      "field_metadata",
      "maybe_schema",
      "field_info",
      "ser_schema",
      "LIST_TYPES",
      "origin",
      "dc_schema",
      "definition",
      "f_name",
      "VALIDATE_CALL_SUPPORTED_TYPES",
      "FieldDecoratorInfoType",
      "localns",
      "constraints",
      "type_hints",
      "_SUPPORTS_TYPEDDICT",
      "FieldDecoratorInfo",
      "k",
      "strict_inner_schema",
      "common_field",
      "gather_result",
      "schema_ref",
      "arg",
      "sub_type",
      "root_field",
      "choices",
      "default_default_factory",
      "_",
      "FROZEN_SET_TYPES",
      "namedtuple_cls",
      "config_wrapper",
      "input_value",
      "TUPLE_TYPES",
      "applied",
      "frozen",
      "json_schema",
      "referenced_schema",
      "dict_schema",
      "ref",
      "return_type",
      "this_field_validators",
      "PATH_TYPES",
      "overlapping_params",
      "fields",
      "validator",
      "has_custom_v2_modify_js_func",
      "required_keys",
      "pydantic_js_updates",
      "SET_TYPES",
      "existing",
      "has_default",
      "core_config",
      "annotation"
    ],
    "function_params": [
      "field",
      "pydantic_js_annotation_functions",
      "ip",
      "name",
      "mode",
      "discriminator",
      "ns_resolver",
      "dataclass",
      "annotated_type",
      "def_ref",
      "function",
      "definitions",
      "schema",
      "handler",
      "typevars_map",
      "obj",
      "source",
      "decorators",
      "metadata",
      "items_type",
      "pattern_type",
      "keys_type",
      "_",
      "metadata_schema",
      "annotations",
      "namedtuple_cls",
      "config_wrapper",
      "input_value",
      "each_item_validators",
      "union_type",
      "js_function",
      "serializers",
      "enum_type",
      "info",
      "required",
      "parameters_callback",
      "json_encoders",
      "field_name",
      "cls",
      "typed_dict_cls",
      "d",
      "ref",
      "self",
      "values_type",
      "tuple_type",
      "type_obj",
      "fields",
      "validators",
      "literal_type",
      "get_inner_schema",
      "field_info",
      "path",
      "origin",
      "default",
      "typevar",
      "field_serializers",
      "type_",
      "path_type",
      "transform_inner_schema",
      "tp",
      "validator_functions",
      "source_type",
      "annotation"
    ],
    "function_names": [
      "_inlining_behavior",
      "_generate_schema_from_get_schema_method",
      "get_schema_or_ref",
      "_apply_discriminator_to_union",
      "unpack_definitions",
      "_subclass_schema",
      "inner_handler",
      "_unknown_type_schema",
      "_types_namespace",
      "ser_path",
      "_add_js_function",
      "_union_is_subclass_schema",
      "_union_schema",
      "_model_schema",
      "_generate_parameter_v3_schema",
      "_extract_json_schema_info_from_field_info",
      "_apply_single_annotation",
      "check_validator_fields_against_field_name",
      "_unsubstituted_typevar_schema",
      "_dict_schema",
      "wrap_default",
      "_ip_schema",
      "_get_args_resolving_forward_refs",
      "_annotated_schema",
      "set_discriminator",
      "finalize_schema",
      "push",
      "__init_subclass__",
      "_type_alias_type_schema",
      "apply_validators",
      "_tuple_schema",
      "_generate_md_field_schema",
      "_resolve_forward_ref",
      "_validators_require_validate_default",
      "_apply_single_annotation_json_schema",
      "filter_field_decorator_info_by_field",
      "_literal_schema",
      "_zoneinfo_schema",
      "create_definition_reference_schema",
      "_apply_annotations",
      "_deque_schema",
      "_set_schema",
      "path_validator",
      "ser_ip",
      "_add_custom_serialization_from_json_encoders",
      "apply_model_validators",
      "_common_field_schema",
      "_type_schema",
      "_arguments_schema",
      "_iterable_schema",
      "_apply_field_serializers",
      "_config_wrapper",
      "_pattern_schema",
      "_generate_schema_inner",
      "_arguments_v3_schema",
      "_get_first_two_args_or_any",
      "_arbitrary_types",
      "_get_wrapped_inner_schema",
      "generate_schema",
      "new_handler",
      "_extract_get_pydantic_json_schema",
      "_mapping_schema",
      "_generate_td_field_schema",
      "_common_field",
      "clean_schema",
      "resolve_original_schema",
      "_apply_model_serializers",
      "_namedtuple_schema",
      "_computed_field_schema",
      "_path_schema",
      "_dataclass_schema",
      "__init__",
      "_get_first_arg_or_any",
      "_resolve_definition",
      "apply_each_item_validators",
      "_list_schema",
      "_hashable_schema",
      "_typed_dict_schema",
      "_sequence_schema",
      "_generate_parameter_schema",
      "get",
      "_frozenset_schema",
      "_match_generic_type",
      "get_json_schema_no_cases",
      "get_schema_from_ref",
      "_generate_dc_field_schema",
      "_fraction_schema",
      "get_json_schema",
      "check_decorator_fields_exist",
      "_call_schema",
      "match_type",
      "_resolve_self_type",
      "_enum_schema",
      "_arbitrary_type_schema"
    ],
    "class_names": [
      "InvalidSchemaError",
      "_FieldNameStack",
      "_ModelTypeStack",
      "_Definitions",
      "_CommonField",
      "GenerateSchema"
    ],
    "imports": [
      "_dataclasses",
      "dataclasses",
      "to_jsonable_python",
      "_repr",
      "uuid",
      "PydanticRecursiveRef",
      "_schema_generation_shared",
      "_config",
      "collect_dataclass_fields",
      "_mock_val_ser",
      "gather_schemas_for_cleaning",
      "defaultdict_validator",
      "_known_annotated_metadata",
      "_ParameterKind",
      "annotated_handlers",
      "JsonSchemaExtraCallable",
      "_typing_extra",
      "FieldSerializerDecoratorInfo",
      "datetime",
      "PydanticUserError",
      "annotations",
      "ConfigWrapper",
      "update_core_metadata",
      "CallbackGetCoreSchemaHandler",
      "update_field_from_config",
      "get_literal_values",
      "JsonSchemaValue",
      "_discriminated_union",
      "_forward_ref",
      "_import_utils",
      "PydanticSerializationUnexpectedValue",
      "Iterable",
      "MethodType",
      "overload",
      "typing_extensions",
      "TypedDict",
      "ForwardRef",
      "_utils",
      "import_cached_field_info",
      "version",
      "validate_core_schema",
      "IPv6Interface",
      "ModelSerializerDecoratorInfo",
      "takes_validated_data_argument",
      "BaseModel",
      "os",
      "ConfigDict",
      "ConfigWrapperStack",
      "smart_deepcopy",
      "GetJsonSchemaFunction",
      "partial",
      "core_schema",
      "DecoratorInfos",
      "typing_inspection",
      "inspect_field_serializer",
      "ZoneInfo",
      "pydantic_core",
      "types",
      "MAPPING_ORIGIN_MAP",
      "_decorators",
      "typing_inspection.introspection",
      "StandardDataclass",
      "MultiHostUrl",
      "_namespace_utils",
      "functools",
      "aliases",
      "version_short",
      "IP_VALIDATOR_LOOKUP",
      "Union",
      "PydanticUndefinedAnnotation",
      "IpType",
      "Discriminator",
      "GetJsonSchemaHandler",
      "BeforeValidator",
      "is_typeddict",
      "PydanticCustomError",
      "TypeAlias",
      "Literal",
      "contextmanager",
      "JsonEncoder",
      "sys",
      "FieldValidatorDecoratorInfo",
      "collections.abc",
      "PydanticUndefined",
      "FunctionType",
      "PlainValidator",
      "_schema_gather",
      "ipaddress",
      "inspect_validator",
      "zoneinfo",
      "AliasChoices",
      "import_cached_base_model",
      "NsResolver",
      "Mapping",
      "_generics",
      "pydantic.v1",
      "Final",
      "TypeAliasType",
      "validate_str_is_valid_iana_tz",
      "typing",
      "errors",
      "is_union_origin",
      "lenient_issubclass",
      "get_defaultdict_default_default_factory",
      "pathlib",
      "rebuild_model_fields",
      "ValidatorDecoratorInfo",
      "UUID",
      "signature",
      "is_list_like_schema_with_items_schema",
      "ComputedFieldInfo",
      "NamespacesTuple",
      "_docs_extraction",
      "Callable",
      "get_attribute_from_bases",
      "functional_validators",
      "FieldInfo",
      "Url",
      "Any",
      "replace_types",
      "cast",
      "Decorator",
      "serialize_sequence_via_list",
      "fraction_validator",
      "TYPE_CHECKING",
      "MissingDefinitionError",
      "_core_utils",
      "ModelValidatorDecoratorInfo",
      "_validators",
      "get_ref",
      "get_origin",
      "IPv4Address",
      "config",
      "inspect_model_serializer",
      "RootValidatorDecoratorInfo",
      "IPv6Network",
      "deque_validator",
      "decimal",
      "GenericAlias",
      "IPv4Interface",
      "IPv4Network",
      "attrgetter",
      "warnings",
      "main",
      "warn",
      "__future__",
      "operator",
      "_fields",
      "_serializers",
      "PydanticDeprecatedSince20",
      "itertools",
      "chain",
      "PydanticSchemaGenerationError",
      "extract_docstrings_from_cls",
      "re",
      "get_standard_typevars_map",
      "typing_objects",
      "_core_metadata",
      "Enum",
      "FieldValidatorModes",
      "inspect",
      "LambdaType",
      "get_type_ref",
      "WrapValidator",
      "get_args",
      "AliasPath",
      "AfterValidator",
      "TypeVar",
      "JsonDict",
      "Parameter",
      "json_schema",
      "sequence_validator",
      "AnnotationSource",
      "Fraction",
      "Generator",
      "enum",
      "IPv6Address",
      "fields",
      "MockCoreSchema",
      "copy",
      "contextlib",
      "CoreSchema",
      "is_pydantic_dataclass",
      "fractions",
      "CoreMetadata",
      "Decimal",
      "Iterator",
      "GetCoreSchemaHandler"
    ]
  },
  "github_extracted/pydantic_pydantic/algolia.py": {
    "variables": [
      "title",
      "all_records",
      "section_html",
      "previous_heading",
      "soup",
      "records_ta",
      "sibling",
      "ALGOLIA_RECORDS_FILE",
      "extra",
      "rank",
      "section_title",
      "objectID",
      "headings",
      "client",
      "ALGOLIA_INDEX_NAME",
      "records",
      "ALGOLIA_APP_ID",
      "record_title",
      "algolia_records_path",
      "abs_url",
      "anchor_url",
      "MAX_CONTENT_LENGTH",
      "algolia_write_api_key",
      "current_heading",
      "element",
      "first_element",
      "record",
      "heading_id",
      "f",
      "filtered_records",
      "content",
      "pageID",
      "section_plain_text",
      "section_soup"
    ],
    "function_params": [
      "config",
      "files",
      "heading",
      "html",
      "page"
    ],
    "function_names": [
      "get_heading_text",
      "on_post_build",
      "on_page_content",
      "algolia_upload"
    ],
    "class_names": [
      "AlgoliaRecord"
    ],
    "imports": [
      "pathlib",
      "Config",
      "Tag",
      "BeautifulSoup",
      "cast",
      "annotations",
      "sys",
      "TYPE_CHECKING",
      "TypeAdapter",
      "TypedDict",
      "typing_extensions",
      "mkdocs.structure.files",
      "pydantic",
      "Files",
      "os",
      "mkdocs.structure.pages",
      "Path",
      "Page",
      "bs4",
      "algoliasearch.search.client",
      "typing",
      "mkdocs.config",
      "__future__",
      "SearchClientSync"
    ]
  },
  "github_extracted/langflow-ai_langflow/pypi_nightly_tag.py": {
    "variables": [
      "new_nightly_version",
      "latest_base_version",
      "build_type",
      "PYPI_LANGFLOW_BASE_URL",
      "current_version",
      "res",
      "msg",
      "version_str",
      "build_number",
      "current_nightly_version",
      "PYPI_LANGFLOW_NIGHTLY_URL",
      "nightly_base_version",
      "url",
      "ARGUMENT_NUMBER",
      "PYPI_LANGFLOW_URL",
      "PYPI_LANGFLOW_BASE_NIGHTLY_URL",
      "tag"
    ],
    "function_params": [
      "build_type"
    ],
    "function_names": [
      "get_latest_published_version",
      "create_tag"
    ],
    "class_names": [],
    "imports": [
      "sys",
      "Version",
      "packaging.version",
      "requests"
    ]
  },
  "github_extracted/langflow-ai_langflow/factory_restart_space.py": {
    "variables": [
      "space",
      "models",
      "parsed_args",
      "hf_api",
      "space_runtime",
      "args"
    ],
    "function_params": [],
    "function_names": [],
    "class_names": [],
    "imports": [
      "list_models",
      "rich",
      "print",
      "HfApi",
      "sys",
      "huggingface_hub",
      "argparse"
    ]
  },
  "github_extracted/langflow-ai_langflow/update_lf_base_dependency.py": {
    "variables": [
      "pattern",
      "BASE_DIR",
      "filepath",
      "msg",
      "replacement",
      "content",
      "ARGUMENT_NUMBER",
      "base_version"
    ],
    "function_params": [
      "new_version",
      "pyproject_path",
      "version"
    ],
    "function_names": [
      "update_base_dep",
      "verify_pep440",
      "main"
    ],
    "class_names": [],
    "imports": [
      "pathlib",
      "packaging.version",
      "sys",
      "re",
      "Path"
    ]
  },
  "github_extracted/langflow-ai_langflow/012fb73ac359_add_folder_table.py": {
    "variables": [
      "batch_op",
      "column",
      "index",
      "branch_labels",
      "down_revision",
      "inspector",
      "indexes",
      "depends_on",
      "column_names",
      "revision",
      "conn",
      "table_names"
    ],
    "function_params": [],
    "function_names": [
      "downgrade",
      "upgrade"
    ],
    "class_names": [],
    "imports": [
      "alembic",
      "sqlalchemy",
      "op",
      "typing",
      "sqlmodel",
      "Union",
      "Inspector",
      "sqlalchemy.engine.reflection",
      "Sequence"
    ]
  },
  "github_extracted/langflow-ai_langflow/0ae3a2674f32_update_the_columns_that_need_to_change_.py": {
    "variables": [
      "batch_op",
      "column",
      "text_column",
      "branch_labels",
      "down_revision",
      "inspector",
      "depends_on",
      "columns",
      "revision",
      "conn",
      "params_column"
    ],
    "function_params": [],
    "function_names": [
      "downgrade",
      "upgrade"
    ],
    "class_names": [],
    "imports": [
      "alembic",
      "sqlalchemy",
      "sqlalchemy.dialects",
      "op",
      "sqlite",
      "migration",
      "typing",
      "sqlmodel",
      "Union",
      "Inspector",
      "sqlalchemy.engine.reflection",
      "Sequence",
      "langflow.utils"
    ]
  },
  "github_extracted/langflow-ai_langflow/update_uv_dependency.py": {
    "variables": [
      "ARGUMENT_NUMBER",
      "BASE_DIR",
      "pyproject_path",
      "msg",
      "replacement",
      "content",
      "pattern",
      "base_version"
    ],
    "function_params": [
      "base_version"
    ],
    "function_names": [
      "update_uv_dep",
      "main"
    ],
    "class_names": [],
    "imports": [
      "re",
      "sys",
      "pathlib",
      "Path"
    ]
  },
  "github_extracted/langflow-ai_langflow/1b8b740a6fa3_remove_fk_constraint_in_message_.py": {
    "variables": [
      "table",
      "branch_labels",
      "c",
      "NAMING_CONVENTION",
      "down_revision",
      "inspector",
      "temp_table_name",
      "depends_on",
      "revision",
      "conn",
      "constraint",
      "pk_name",
      "tables",
      "fk_name"
    ],
    "function_params": [
      "constraint_name",
      "conn"
    ],
    "function_names": [
      "constraint_exists",
      "downgrade",
      "upgrade"
    ],
    "class_names": [],
    "imports": [
      "alembic",
      "sqlalchemy",
      "op",
      "migration",
      "typing",
      "sqlmodel",
      "Union",
      "Inspector",
      "sqlalchemy.engine.reflection",
      "Sequence",
      "langflow.utils"
    ]
  },
  "github_extracted/langflow-ai_langflow/__main__.py": {
    "variables": [
      "table",
      "status_code",
      "title",
      "ssl_key_file_path",
      "api_key",
      "notices",
      "version_info",
      "package_name",
      "cache_dir",
      "db_service",
      "styled_package_name",
      "arg",
      "is_pre_release",
      "info_text",
      "port",
      "package_names",
      "status",
      "frame",
      "table_results",
      "frontend_path",
      "console",
      "results",
      "auth_settings",
      "options",
      "s",
      "new_key",
      "telemetry_text",
      "raw_info",
      "_",
      "static_files_dir",
      "styled_text",
      "valid_args",
      "latest_version",
      "settings_service",
      "result",
      "backend_only",
      "base_command",
      "user",
      "panel",
      "unmasked_api_key",
      "notice",
      "api_key_create",
      "values",
      "stmt",
      "host",
      "log_level",
      "msg",
      "version",
      "access_link",
      "access_host",
      "pip_command",
      "session",
      "webapp_process",
      "db_path",
      "server",
      "protocol",
      "release_type",
      "color",
      "superuser",
      "pre_db_path",
      "process",
      "default",
      "workers",
      "arguments",
      "worker_timeout",
      "value",
      "is_mac",
      "destination_folder",
      "langflow_version",
      "ssl_cert_file_path",
      "app",
      "key",
      "message"
    ],
    "function_params": [
      "current_version",
      "package_name",
      "is_pre_release",
      "password",
      "package_names",
      "username",
      "port",
      "frame",
      "results",
      "options",
      "signum",
      "fix",
      "unmasked_api_key",
      "host",
      "log_level",
      "version",
      "to_style",
      "test",
      "protocol",
      "workers",
      "app",
      "text"
    ],
    "function_names": [
      "wait_for_server_ready",
      "api_key",
      "run_langflow",
      "print_banner",
      "handle_sigterm",
      "is_port_in_use",
      "graceful_shutdown",
      "generate_pip_command",
      "run_on_windows",
      "get_free_port",
      "set_var_for_macos_issue",
      "stylize_text",
      "build_version_notice",
      "show_version",
      "copy_db",
      "run",
      "get_number_of_workers",
      "superuser",
      "display_results",
      "migration",
      "get_letter_from_version",
      "main",
      "version_option",
      "run_on_mac_or_linux",
      "api_key_banner"
    ],
    "class_names": [],
    "imports": [
      "asyncio",
      "langflow.utils.version",
      "pathlib",
      "langflow.services.database.models.api_key.crud",
      "get_or_create_default_folder",
      "langflow.services.database.models.user.model",
      "Panel",
      "dotenv",
      "ApiKey",
      "multiprocess.context",
      "create_api_key",
      "pyperclip",
      "langflow.logging.logger",
      "configure",
      "get_settings_service",
      "Process",
      "Table",
      "is_pre_release",
      "LangflowApplication",
      "ApiKeyCreate",
      "langflow.services.settings.constants",
      "inspect",
      "select",
      "langflow.initial_setup.setup",
      "langflow.services.deps",
      "langflow.services.auth.utils",
      "langflow.services.database.models.api_key",
      "langflow.server",
      "signal",
      "sys",
      "rich.table",
      "HTTPError",
      "sqlmodel",
      "multiprocess",
      "get_db_service",
      "socket",
      "load_dotenv",
      "rich.console",
      "session_scope",
      "create_super_user",
      "User",
      "rich",
      "platformdirs",
      "langflow.main",
      "httpx",
      "rich.panel",
      "setup_app",
      "Console",
      "langflow.services.utils",
      "version",
      "time",
      "suppress",
      "langflow.services.database.utils",
      "initialize_services",
      "uvicorn",
      "os",
      "fetch_latest_version",
      "Path",
      "box",
      "cpu_count",
      "contextlib",
      "shutil",
      "delete_api_key",
      "user_cache_dir",
      "click",
      "typer",
      "packaging",
      "logger",
      "warnings",
      "get_version_info",
      "platform",
      "DEFAULT_SUPERUSER",
      "session_getter"
    ]
  },
  "github_extracted/langflow-ai_langflow/update_starter_projects.py": {
    "variables": [
      "project_data",
      "do_update_starter_projects",
      "project_path",
      "_",
      "starter_projects",
      "all_types_dict",
      "updated_project_data",
      "project"
    ],
    "function_params": [],
    "function_names": [],
    "class_names": [],
    "imports": [
      "asyncio",
      "update_project_file",
      "langflow.interface.components",
      "get_and_cache_all_types_dict",
      "langflow.main",
      "langflow.initial_setup.setup",
      "langflow.services.deps",
      "update_projects_components_with_latest_component_versions",
      "update_edges_with_latest_component_versions",
      "get_settings_service",
      "langflow.services.utils",
      "initialize_services",
      "get_project_data",
      "os",
      "load_starter_projects"
    ]
  },
  "github_extracted/langflow-ai_langflow/update_pyproject_name.py": {
    "variables": [
      "ARGUMENT_NUMBER",
      "BASE_DIR",
      "filepath",
      "build_type",
      "new_project_name",
      "msg",
      "replacement",
      "content",
      "pattern"
    ],
    "function_params": [
      "new_project_name",
      "pyproject_path"
    ],
    "function_names": [
      "update_uv_dep",
      "update_pyproject_name",
      "main"
    ],
    "class_names": [],
    "imports": [
      "re",
      "sys",
      "pathlib",
      "Path"
    ]
  },
  "github_extracted/langflow-ai_langflow/update_pyproject_version.py": {
    "variables": [
      "ARGUMENT_NUMBER",
      "new_version",
      "BASE_DIR",
      "filepath",
      "build_type",
      "msg",
      "content",
      "pattern"
    ],
    "function_params": [
      "new_version",
      "pyproject_path",
      "version"
    ],
    "function_names": [
      "update_pyproject_version",
      "verify_pep440",
      "main"
    ],
    "class_names": [],
    "imports": [
      "pathlib",
      "packaging.version",
      "sys",
      "re",
      "Path"
    ]
  },
  "github_extracted/langflow-ai_langflow/0b8757876a7c_.py": {
    "variables": [
      "depends_on",
      "revision",
      "down_revision",
      "branch_labels"
    ],
    "function_params": [],
    "function_names": [
      "downgrade",
      "upgrade"
    ],
    "class_names": [],
    "imports": [
      "alembic",
      "sqlalchemy",
      "op",
      "typing",
      "Union",
      "Sequence"
    ]
  },
  "github_extracted/langflow-ai_langflow/__init__.py": {
    "variables": [],
    "function_params": [],
    "function_names": [],
    "class_names": [],
    "imports": []
  },
  "github_extracted/langflow-ai_langflow/env.py": {
    "variables": [
      "connectable",
      "NAMING_CONVENTION",
      "connection",
      "config",
      "target_metadata",
      "url"
    ],
    "function_params": [
      "dbapi_connection",
      "conn",
      "connection",
      "connection_record"
    ],
    "function_names": [
      "run_migrations_offline",
      "_do_run_migrations",
      "_sqlite_do_connect",
      "run_migrations_online",
      "_sqlite_do_begin"
    ],
    "class_names": [],
    "imports": [
      "asyncio",
      "alembic",
      "sqlalchemy",
      "pool",
      "sqlalchemy.event",
      "langflow.services.database.service",
      "fileConfig",
      "sqlalchemy.ext.asyncio",
      "context",
      "listen",
      "SQLModel",
      "logging.config",
      "text",
      "async_engine_from_config"
    ]
  },
  "github_extracted/langflow-ai_langflow/0d60fcbd4e8e_create_vertex_builds_table.py": {
    "variables": [
      "branch_labels",
      "down_revision",
      "depends_on",
      "revision",
      "conn"
    ],
    "function_params": [],
    "function_names": [
      "downgrade",
      "upgrade"
    ],
    "class_names": [],
    "imports": [
      "alembic",
      "sqlalchemy",
      "op",
      "migration",
      "typing",
      "sqlmodel",
      "Union",
      "Sequence",
      "langflow.utils"
    ]
  },
  "github_extracted/langflow-ai_langflow/006b3990db50_add_unique_constraints.py": {
    "variables": [
      "batch_op",
      "branch_labels",
      "down_revision",
      "inspector",
      "user_constraints",
      "depends_on",
      "api_key_constraints",
      "revision",
      "conn",
      "flow_constraints",
      "constraint"
    ],
    "function_params": [],
    "function_names": [
      "downgrade",
      "upgrade"
    ],
    "class_names": [],
    "imports": [
      "alembic",
      "sqlalchemy",
      "op",
      "typing",
      "Union",
      "Inspector",
      "sqlalchemy.engine.reflection",
      "Sequence"
    ]
  },
  "github_extracted/langflow-ai_langflow/1a110b568907_replace_credential_table_with_variable.py": {
    "variables": [
      "branch_labels",
      "down_revision",
      "inspector",
      "depends_on",
      "revision",
      "conn",
      "table_names"
    ],
    "function_params": [],
    "function_names": [
      "downgrade",
      "upgrade"
    ],
    "class_names": [],
    "imports": [
      "alembic",
      "sqlalchemy",
      "op",
      "typing",
      "sqlmodel",
      "Union",
      "Inspector",
      "sqlalchemy.engine.reflection",
      "Sequence"
    ]
  },
  "github_extracted/langflow-ai_langflow/update_pyproject_combined.py": {
    "variables": [
      "current_dir",
      "mode",
      "base_version",
      "arg_count",
      "main_tag",
      "base_tag"
    ],
    "function_params": [],
    "function_names": [
      "main"
    ],
    "class_names": [],
    "imports": [
      "update_pyproject_version",
      "pathlib",
      "update_uv_dep",
      "sys",
      "update_pyproject_name",
      "update_uv_dependency",
      "Path"
    ]
  },
  "github_extracted/pandas-dev_pandas/frame_methods.py": {
    "variables": [
      "K",
      "c",
      "name",
      "param_names",
      "sample",
      "df",
      "mi",
      "k",
      "t",
      "M",
      "row",
      "i",
      "nrows",
      "from_dtype",
      "arr",
      "params",
      "rng",
      "values",
      "idx",
      "cols",
      "data",
      "n",
      "N",
      "timeout",
      "arrays",
      "col",
      "xs"
    ],
    "function_params": [
      "inplace",
      "copy",
      "ascending",
      "axis",
      "from_to_dtypes",
      "dtype",
      "how",
      "self",
      "keep",
      "orient",
      "monotonic"
    ],
    "function_names": [
      "time_reindex_axis1",
      "time_itertuples_to_list",
      "time_memory_usage_object_dtype",
      "time_dropna",
      "peakmem_itertuples",
      "time_to_records",
      "setup",
      "time_isnull_floats_no_null",
      "time_apply_axis_1",
      "time_series_describe",
      "peakmem_itertuples_raw_start",
      "time_frame_duplicated",
      "time_frame_sort_values",
      "time_dropna_axis_mixed_dtypes",
      "time_where",
      "time_to_dict_ints",
      "time_apply_lambda_mean",
      "time_frame_float_equal",
      "time_frame_float_unequal",
      "peakmem_itertuples_raw_to_list",
      "time_fillna",
      "time_frame_repr_wide",
      "mem_itertuples_start",
      "time_values_mixed_wide",
      "peakmem_round_transposed",
      "time_round_transposed",
      "time_frame_nunique",
      "time_values_wide",
      "time_itertuples_raw_start",
      "time_html_repr_trunc_si",
      "time_sort_values",
      "time_round",
      "time_nsmallest_one_column",
      "time_astype",
      "mem_itertuples_raw_to_list",
      "peakmem_itertuples_raw",
      "mem_itertuples_to_list",
      "time_reindex_upcast",
      "time_reindex_axis0",
      "time_count",
      "time_rename_axis1",
      "time_nlargest_one_column",
      "time_isnull_obj",
      "time_to_numpy_wide",
      "peakmem_itertuples_to_list",
      "time_interpolate",
      "time_isnull",
      "time_to_numpy_mixed_tall",
      "time_to_string_floats",
      "time_frame_duplicated_wide",
      "time_items",
      "time_repr_tall",
      "time_series_nunique_nan",
      "time_itertuples_read_first",
      "time_rank",
      "time_ffill",
      "time_frame_object_unequal",
      "time_itertuples",
      "time_apply_user_func",
      "time_frame_dtypes",
      "time_memory_usage",
      "time_rename_single",
      "peakmem_round",
      "time_count_mixed_dtypes",
      "time_iteritems_indexing",
      "time_nsmallest_two_columns",
      "time_itertuples_start",
      "time_rename_both_axes",
      "time_iterrows",
      "time_bfill",
      "time_frame_xs",
      "time_frame_nonunique_unequal",
      "time_rename_axis0",
      "time_shift",
      "time_frame_get_numeric_data",
      "peakmem_itertuples_start",
      "time_html_repr_trunc_mi",
      "time_itertuples_raw_tuples_to_list",
      "mem_itertuples_read_first",
      "time_info",
      "time_apply_ref_by_name",
      "time_apply_pass_thru",
      "time_clip",
      "time_itertuples_raw_read_first",
      "time_frame_mask_floats",
      "time_to_numpy_mixed_wide",
      "time_sort_index",
      "time_frame_duplicated_subset",
      "time_frame_nonunique_equal",
      "time_frame_quantile",
      "time_isna",
      "time_frame_get_dtype_counts",
      "time_to_update_random_indices",
      "peakmem_itertuples_raw_read_first",
      "time_dataframe_describe",
      "time_reindex_axis1_missing",
      "time_last_valid_index",
      "time_apply_str_mean",
      "time_to_dict_datetimelike",
      "time_itertuples_raw_tuples",
      "time_first_valid_index",
      "time_isnull_strngs",
      "time_dict_rename_both_axes",
      "time_to_records_multiindex",
      "time_values_tall",
      "time_to_html_mixed",
      "time_interpolate_some_good",
      "time_to_update_small_frame_big_arg",
      "time_values_mixed_tall",
      "time_frame_object_equal",
      "time_to_update_big_frame_small_arg",
      "time_frame_mask_bools",
      "time_reindex_both_axes",
      "time_to_numpy_tall",
      "time_nlargest_two_columns",
      "mem_itertuples_raw_start"
    ],
    "class_names": [
      "Fillna",
      "Shift",
      "MaskBool",
      "Update",
      "SortValues",
      "Repr",
      "Isnull",
      "Count",
      "Iteration",
      "GetNumericData",
      "Rank",
      "MemoryUsage",
      "Isna",
      "SortMultiKey",
      "Clip",
      "Interpolate",
      "Reindex",
      "FindValidIndex",
      "Equals",
      "ToRecords",
      "SeriesNuniqueWithNan",
      "Describe",
      "Apply",
      "Duplicated",
      "NSort",
      "ToNumpy",
      "Rename",
      "Nunique",
      "Where",
      "Dropna",
      "AsType",
      "Quantile",
      "GetDtypeCounts",
      "ToString",
      "ToHTML",
      "Round",
      "XS",
      "Dtypes",
      "ToDict"
    ],
    "imports": [
      "numpy",
      "isnull",
      "NaT",
      "period_range",
      "DataFrame",
      "timedelta_range",
      "string",
      "Index",
      "pandas",
      "setup",
      "date_range",
      "pandas_vb_common",
      "warnings",
      "Series",
      "MultiIndex"
    ]
  },
  "github_extracted/pandas-dev_pandas/attrs_caching.py": {
    "variables": [
      "extract_array",
      "params",
      "param_names"
    ],
    "function_params": [
      "dtype",
      "self"
    ],
    "function_names": [
      "time_extract_array_numpy",
      "time_array",
      "setup",
      "time_extract_array",
      "time_get_index",
      "time_set_index"
    ],
    "class_names": [
      "SeriesArrayAttribute",
      "DataFrameAttributes"
    ],
    "imports": [
      "numpy",
      "extract_array",
      "pandas.core.construction",
      "DataFrame",
      "pandas",
      "setup",
      "pandas_vb_common"
    ]
  },
  "github_extracted/pandas-dev_pandas/boolean.py": {
    "variables": [
      "N",
      "right",
      "lmask",
      "rmask",
      "left"
    ],
    "function_params": [
      "self"
    ],
    "function_names": [
      "time_and_scalar",
      "time_or_scalar",
      "time_xor_array",
      "time_or_array",
      "setup",
      "time_and_array",
      "time_xor_scalar"
    ],
    "class_names": [
      "TimeLogicalOps"
    ],
    "imports": [
      "numpy",
      "pandas"
    ]
  },
  "github_extracted/pandas-dev_pandas/dtypes.py": {
    "variables": [
      "dt",
      "N",
      "params",
      "K",
      "_numpy_dtypes",
      "param_names",
      "data_dict",
      "dtype",
      "_dtypes",
      "i"
    ],
    "function_params": [
      "data",
      "dtype",
      "self"
    ],
    "function_names": [
      "time_is_extension_array_dtype_false",
      "time_pandas_dtype_invalid",
      "time_select_dtype_int_exclude",
      "time_select_dtype_float_exclude",
      "time_select_dtype_float_include",
      "time_select_dtype_bool_exclude",
      "time_select_dtype_string_exclude",
      "setup",
      "time_select_dtype_bool_include",
      "create_df",
      "time_pandas_dtype",
      "time_select_dtype_string_include",
      "time_is_extension_array_dtype_true",
      "time_select_dtype_int_include"
    ],
    "class_names": [
      "DtypesInvalid",
      "Dtypes",
      "CheckDtypes",
      "SelectDtypes"
    ],
    "imports": [
      "numpy",
      "is_extension_array_dtype",
      "datetime_dtypes",
      "pandas._testing",
      "string_dtypes",
      "extension_dtypes",
      "numeric_dtypes",
      "DataFrame",
      "string",
      "Index",
      "pandas",
      "setup",
      "pandas_vb_common",
      "pandas.api.types",
      "pandas_dtype"
    ]
  },
  "github_extracted/pandas-dev_pandas/algorithms.py": {
    "variables": [
      "N",
      "params",
      "param_names",
      "i",
      "df",
      "imp",
      "data",
      "hashing"
    ],
    "function_params": [
      "unique",
      "N",
      "dtype",
      "df",
      "interpolation",
      "self",
      "quantile",
      "keep",
      "sort"
    ],
    "function_names": [
      "setup_cache",
      "time_duplicated",
      "time_quantile",
      "time_argsort",
      "time_series_int",
      "setup",
      "time_series_categorical",
      "time_series_timedeltas",
      "peakmem_factorize",
      "time_series_float",
      "time_series_dates",
      "time_series_string",
      "time_factorize",
      "time_frame"
    ],
    "class_names": [
      "Quantile",
      "DuplicatedMaskedArray",
      "SortIntegerArray",
      "Duplicated",
      "Hashing",
      "Factorize"
    ],
    "imports": [
      "numpy",
      "import_module",
      "importlib",
      "pandas",
      "setup",
      "pandas_vb_common"
    ]
  },
  "github_extracted/pandas-dev_pandas/ctors.py": {
    "variables": [
      "N",
      "params",
      "param_names",
      "dti",
      "i",
      "repeat",
      "number",
      "arr",
      "x"
    ],
    "function_params": [
      "data_fmt",
      "dtype",
      "with_index",
      "self",
      "arr"
    ],
    "function_names": [
      "list_of_tuples",
      "list_of_lists",
      "gen_of_tuples",
      "time_index_from_array_floats",
      "setup",
      "time_from_list_of_str",
      "time_multiindex_from_iterables",
      "time_index_from_array_string",
      "list_of_lists_with_none",
      "time_series_constructor",
      "time_from_list_of_timestamps",
      "arr_dict",
      "time_dtindex_from_series",
      "time_dtindex_from_index_with_series",
      "time_from_list_of_dates",
      "time_from_list_of_datetimes",
      "gen_of_str",
      "list_of_tuples_with_none",
      "list_of_str",
      "no_change"
    ],
    "class_names": [
      "SeriesDtypesConstructors",
      "MultiIndexConstructor",
      "SeriesConstructors",
      "DatetimeIndexConstructor"
    ],
    "imports": [
      "numpy",
      "Index",
      "pandas",
      "setup",
      "date_range",
      "Timestamp",
      "pandas_vb_common",
      "Series",
      "MultiIndex",
      "DatetimeIndex"
    ]
  },
  "github_extracted/pandas-dev_pandas/eval.py": {
    "variables": [
      "N",
      "params",
      "index",
      "halfway",
      "param_names",
      "s",
      "data"
    ],
    "function_params": [
      "engine",
      "self",
      "threads"
    ],
    "function_names": [
      "time_mult",
      "time_query_datetime_index",
      "time_add",
      "time_query_with_boolean_selection",
      "time_chained_cmp",
      "time_and",
      "setup",
      "teardown",
      "time_query_datetime_column"
    ],
    "class_names": [
      "Eval",
      "Query"
    ],
    "imports": [
      "numpy",
      "pandas.computation.expressions",
      "pandas",
      "setup",
      "pandas_vb_common",
      "pandas.core.computation.expressions"
    ]
  },
  "github_extracted/pandas-dev_pandas/gil.py": {
    "variables": [
      "size",
      "param_names",
      "df",
      "k",
      "update_kwargs",
      "indexer",
      "ngroups",
      "i",
      "_",
      "number",
      "arr",
      "kwargs_list",
      "params",
      "has_kwargs_list",
      "repeat",
      "cols",
      "data",
      "thread",
      "N",
      "rows",
      "win",
      "threads",
      "have_rolling_methods",
      "updated_kwargs",
      "strings",
      "rolling"
    ],
    "function_params": [
      "kwargs_list",
      "num_threads",
      "func",
      "threads",
      "dti",
      "dtype",
      "self",
      "method",
      "period",
      "arr"
    ],
    "function_names": [
      "time_get_groups",
      "parallel_take1d",
      "time_datetime_field_day",
      "time_period_to_datetime",
      "setup",
      "time_loop",
      "time_datetime_to_period",
      "time_parallel",
      "get_groups",
      "wrapper",
      "time_rolling",
      "loop",
      "test_parallel",
      "parallel_read_csv",
      "time_take1d",
      "run",
      "parallel_kth_smallest",
      "time_read_csv",
      "time_kth_smallest",
      "inner",
      "time_datetime_field_year",
      "parallel_rolling",
      "time_datetime_field_normalize",
      "time_datetime_field_daysinmonth",
      "parallel"
    ],
    "class_names": [
      "ParallelGroupbyMethods",
      "ParallelDatetimeFields",
      "ParallelTake1D",
      "ParallelReadCSV",
      "ParallelKth",
      "ParallelFactorize",
      "ParallelGroups",
      "ParallelRolling"
    ],
    "imports": [
      "algos",
      "functools",
      "setup",
      "date_range",
      "read_csv",
      "pandas._libs",
      "numpy",
      "rolling_skew",
      "threading",
      "wraps",
      "pandas",
      "pandas_vb_common",
      "pandas.core.algorithms",
      "take_nd",
      "Index",
      "rolling_std",
      "factorize",
      "Series",
      "BaseIO",
      "rolling_min",
      "rolling_var",
      "DataFrame",
      "rolling_max",
      "rolling_mean",
      "rolling_median",
      "rolling_kurt"
    ]
  },
  "github_extracted/pandas-dev_pandas/arithmetic.py": {
    "variables": [
      "param_names",
      "df",
      "n_cols",
      "ser",
      "s",
      "i",
      "column_names",
      "arr",
      "params",
      "rng",
      "arr1",
      "arr3",
      "idx",
      "other_offsets",
      "arr2",
      "N",
      "halfway",
      "offsets",
      "index",
      "level_0_names",
      "df2",
      "array",
      "hcal",
      "non_apply",
      "n_rows"
    ],
    "function_params": [
      "func",
      "opname",
      "shape",
      "threads",
      "op",
      "dtype",
      "tz",
      "df",
      "scalar",
      "self",
      "offset",
      "use_numexpr"
    ],
    "function_names": [
      "time_frame_float_div_by_zero",
      "time_frame_float_div",
      "time_frame_float_floor_by_zero",
      "time_subtract",
      "time_divide",
      "time_frame_int_mod",
      "time_series_timestamp_compare",
      "time_frame_int_div_by_zero",
      "time_add_timedeltas",
      "setup",
      "time_frame_op_with_series_axis1",
      "time_series_dot",
      "time_add_td_ts",
      "time_timedelta_plus_datetime",
      "time_frame_float_mod",
      "time_multiply",
      "time_timestamp_ops_diff_with_shift",
      "time_frame_add",
      "time_binary_op_multiindex",
      "time_modulo",
      "time_add_dti_offset",
      "time_timestamp_series_compare",
      "time_frame_series_dot",
      "time_frame_op_with_fill_value_no_nas",
      "time_categorical_op",
      "time_apply_index",
      "time_frame_op_with_series_axis0",
      "time_frame_multi_and",
      "setup_cache",
      "time_add",
      "time_op_different_blocks",
      "time_timestamp_ops_diff",
      "time_frame_dot",
      "time_series_timestamp_different_reso_compare",
      "time_add_series_offset",
      "time_frame_mult",
      "time_frame_op_with_scalar",
      "time_op_same_blocks",
      "teardown",
      "time_subtract_datetimes",
      "time_frame_comparison",
      "time_series_op_with_fill_value_no_nas"
    ],
    "class_names": [
      "OffsetArrayArithmetic",
      "FrameWithFrameWide",
      "OpWithFillValue",
      "IndexArithmetic",
      "BinaryOpsMultiIndex",
      "Timeseries",
      "IntFrameWithScalar",
      "DateInferOps",
      "MixedFrameWithSeriesAxis",
      "ApplyIndex",
      "CategoricalComparisons",
      "IrregularOps",
      "Ops",
      "NumericInferOps",
      "TimedeltaOps",
      "Ops2"
    ],
    "imports": [
      "numpy",
      "to_timedelta",
      "pandas.computation.expressions",
      "numeric_dtypes",
      "DataFrame",
      "Index",
      "pandas",
      "pandas.tseries.holiday",
      "date_range",
      "Timestamp",
      "warnings",
      "pandas_vb_common",
      "setup",
      "Series",
      "pandas.core.computation.expressions",
      "operator"
    ]
  },
  "github_extracted/pandas-dev_pandas/index_object.py": {
    "variables": [
      "param_names",
      "mi",
      "k",
      "o_idx",
      "left",
      "B",
      "idx_small_slow",
      "right",
      "i",
      "_",
      "idx_large_fast",
      "half",
      "i_idx",
      "fmt",
      "params",
      "ea_int_left",
      "dates_left",
      "idx",
      "data",
      "r_idx",
      "N",
      "int_left",
      "date_str_left",
      "a",
      "str_left"
    ],
    "function_params": [
      "N",
      "index_structure",
      "dtype",
      "self",
      "method"
    ],
    "function_names": [
      "time_union_with_duplicates",
      "time_monotonic_inc",
      "time_max_trivial",
      "time_append_range_list_same",
      "setup",
      "time_intersection_both_duplicate",
      "time_iter_inc",
      "time_get_loc",
      "peakmem_gc_instances",
      "time_append_obj_list",
      "create_use_drop",
      "time_min_trivial",
      "time_get_loc_inc",
      "time_non_object_equals_multiindex",
      "time_intersection_one_duplicate",
      "time_intersection",
      "time_iter_dec",
      "time_datetime_difference_disjoint",
      "time_append_int_list",
      "time_sort_values_asc",
      "time_sort_values_des",
      "time_operation",
      "time_boolean_series",
      "time_get_loc_non_unique_sorted",
      "time_max",
      "time_append_range_list",
      "time_slice_step",
      "time_is_unique",
      "time_get",
      "time_min",
      "time_boolean_array",
      "time_get_loc_sorted",
      "time_get_loc_dec",
      "time_slice",
      "time_get_loc_non_unique"
    ],
    "class_names": [
      "UnionWithDuplicates",
      "SetDisjoint",
      "Indexing",
      "IndexEquals",
      "IndexAppend",
      "GC",
      "IntervalIndexMethod",
      "Range",
      "SetOperations",
      "Float64IndexMethod"
    ],
    "imports": [
      "numpy",
      "RangeIndex",
      "Index",
      "pandas",
      "setup",
      "IntervalIndex",
      "date_range",
      "pandas_vb_common",
      "Series",
      "MultiIndex",
      "DatetimeIndex",
      "gc"
    ]
  },
  "github_extracted/pandas-dev_pandas/finalize.py": {
    "variables": [
      "N",
      "obj",
      "params",
      "param_names",
      "i"
    ],
    "function_params": [
      "self",
      "param"
    ],
    "function_names": [
      "setup",
      "time_finalize_micro"
    ],
    "class_names": [
      "Finalize"
    ],
    "imports": [
      "pandas"
    ]
  },
  "github_extracted/pandas-dev_pandas/groupby.py": {
    "variables": [
      "fac2",
      "size",
      "alpha",
      "param_names",
      "key2",
      "labels2",
      "value2",
      "method_blocklist",
      "df",
      "rng_map",
      "num_groups",
      "taker",
      "dates",
      "transition_points",
      "obj",
      "tmp1",
      "fac1",
      "ngroups",
      "total",
      "i",
      "key1",
      "vals",
      "labels",
      "arr",
      "n2",
      "keys",
      "params",
      "rng",
      "tmp",
      "null_vals",
      "num_timedeltas",
      "_numba_unsupported_methods",
      "values",
      "tmp2",
      "idx",
      "n1",
      "cols",
      "transitions",
      "data",
      "n",
      "N",
      "offsets",
      "index",
      "timeout",
      "value",
      "key",
      "kwargs"
    ],
    "function_params": [
      "index",
      "g",
      "dtype",
      "df",
      "values",
      "self",
      "method",
      "engine",
      "with_nans",
      "key",
      "data",
      "application",
      "observed",
      "ncols",
      "grouper",
      "parallel",
      "factor",
      "tie_method"
    ],
    "function_names": [
      "time_sample",
      "time_groupby_apply_dict_return",
      "time_transform_mean",
      "time_cython_sum",
      "time_groupby_sum_timedelta",
      "time_different_str_functions",
      "time_series_numba",
      "time_transform_multi_key1",
      "time_frame_transform",
      "time_dataframe_cython",
      "time_frame_nth_any",
      "setup",
      "time_different_str_functions_singlecol",
      "time_defaults",
      "time_transform_multi_key4",
      "time_lambda_sum",
      "function",
      "time_series_nth",
      "time_groupby_sum_int",
      "time_series_cython",
      "time_multi_int_nunique",
      "time_groupby_nth_all",
      "time_srs_bfill",
      "time_groupby_sort",
      "time_sample_weights",
      "time_multi_size",
      "time_srs_ffill",
      "time_str_func",
      "time_first",
      "time_fill_value",
      "time_multi_int_count",
      "time_rank_ties",
      "time_multi_count",
      "time_series_indices",
      "time_dtype_as_field",
      "time_groupby_nosort",
      "time_col_select_lambda_sum",
      "time_groupby_extra_cat_nosort",
      "time_transform_str_max",
      "time_groupby_ordered_sort",
      "time_col_select_str_sum",
      "time_len_groupby_object",
      "time_series_groups",
      "time_dataframe_numba",
      "time_resample",
      "time_resample_multiindex",
      "time_groupby_sum_multiindex",
      "time_groupby_extra_cat_sort",
      "time_overflow",
      "time_category_size",
      "df_copy_function",
      "time_df_ffill",
      "time_series_nth_all",
      "time_series_nth_any",
      "time_groupby_transform",
      "time_transform_multi_key2",
      "time_copy_overhead_single_col",
      "time_transform_lambda_max",
      "setup_cache",
      "time_groupby_ordered_nosort",
      "time_scalar_function_multi_col",
      "time_copy_function_multi_col",
      "time_df_bfill",
      "time_frame_agg",
      "time_scalar_function_single_col",
      "time_transform_lambda_max_tall",
      "time_different_str_functions_multicol",
      "time_dtype_as_group",
      "time_frame_nth",
      "time_transform_multi_key3",
      "time_sum",
      "time_groupby_sum_booleans",
      "time_multi_columns",
      "time_groupby_apply_non_unique_unsorted_index",
      "time_transform_lambda_max_wide"
    ],
    "class_names": [
      "MultiColumn",
      "Fillna",
      "Shift",
      "GroupByCythonAgg",
      "Size",
      "AggFunctions",
      "GroupByMethods",
      "GroupManyLabels",
      "GroupByCythonAggEaDtypes",
      "TransformBools",
      "ApplyDictReturn",
      "Int64",
      "Transform",
      "Sample",
      "MultipleCategories",
      "CountMultiInt",
      "String",
      "Groups",
      "SumTimeDelta",
      "Nth",
      "GroupByNumbaAgg",
      "Resample",
      "Cumulative",
      "TransformEngine",
      "CountMultiDtype",
      "TransformNaN",
      "Apply",
      "Categories",
      "ApplyNonUniqueUnsortedIndex",
      "SumMultiLevel",
      "Float32",
      "SumBools",
      "GroupStrings",
      "AggEngine",
      "RankWithTies",
      "DateAttributes",
      "Datelike"
    ],
    "imports": [
      "ascii_letters",
      "itertools",
      "functools",
      "product",
      "setup",
      "date_range",
      "numpy",
      "string",
      "pandas",
      "Timestamp",
      "pandas_vb_common",
      "to_timedelta",
      "Categorical",
      "Index",
      "Series",
      "period_range",
      "MultiIndex",
      "partial",
      "NA",
      "DataFrame"
    ]
  },
  "github_extracted/pandas-dev_pandas/hash_functions.py": {
    "variables": [
      "params",
      "param_names",
      "indices",
      "a",
      "vals",
      "lst",
      "x"
    ],
    "function_params": [
      "N",
      "index",
      "dtype",
      "self",
      "exponent"
    ],
    "function_names": [
      "time_loc_slice",
      "time_unique",
      "setup",
      "time_groupby",
      "time_unique_with_duplicates",
      "time_factorize"
    ],
    "class_names": [
      "UniqueForLargePyObjectInts",
      "Float64GroupIndex",
      "Unique",
      "NumericSeriesIndexingShuffled",
      "UniqueAndFactorizeArange",
      "NumericSeriesIndexing"
    ],
    "imports": [
      "numpy",
      "pandas"
    ]
  },
  "github_extracted/pandas-dev_pandas/categoricals.py": {
    "variables": [
      "N",
      "params",
      "param_names",
      "categories",
      "dtype",
      "col",
      "arr",
      "i",
      "ncats",
      "str_cat_type",
      "codes",
      "random_pick",
      "int_cat_type",
      "n",
      "cats",
      "x"
    ],
    "function_params": [
      "index",
      "self",
      "dropna"
    ],
    "function_names": [
      "time_shallow_copy",
      "time_append_non_overlapping_index",
      "astype_str",
      "time_getitem_list_like",
      "time_reindex",
      "time_interval",
      "time_rank_string_cat",
      "time_datetimes",
      "setup",
      "time_value_counts",
      "time_rank_string",
      "time_getitem_list",
      "time_getitem_slice",
      "time_get_loc",
      "time_reindex_missing",
      "time_categorical_series_is_monotonic_decreasing",
      "time_existing_categorical",
      "time_categorical_series_is_monotonic_increasing",
      "time_fastpath",
      "time_categorical_index_contains",
      "astype_float",
      "time_concat_non_overlapping_index",
      "time_categorical_index_is_monotonic_decreasing",
      "time_rank_int_cat_ordered",
      "time_getitem_scalar",
      "time_rank_string_cat_ordered",
      "time_rank_int_cat",
      "time_getitem_bool_array",
      "time_union",
      "time_regular",
      "time_from_codes_all_int8",
      "time_concat",
      "time_existing_series",
      "time_append_overlapping_index",
      "time_intersection",
      "time_remove_categories",
      "time_rendering",
      "time_rank_int",
      "time_align",
      "time_datetimes_with_nat",
      "astype_int",
      "time_categorical_index_is_monotonic_increasing",
      "time_all_nan",
      "astype_datetime",
      "time_set_categories",
      "time_concat_overlapping_index",
      "time_sort_values",
      "time_categorical_contains",
      "time_unique",
      "time_with_nan"
    ],
    "class_names": [
      "Contains",
      "ValueCounts",
      "Indexing",
      "Rank",
      "SearchSorted",
      "Repr",
      "RemoveCategories",
      "IsMonotonic",
      "Concat",
      "CategoricalSlicing",
      "SetCategories",
      "Constructor",
      "AsType"
    ],
    "imports": [
      "numpy",
      "union_categoricals",
      "pandas.api.types",
      "string",
      "sys",
      "pandas",
      "setup",
      "pandas_vb_common",
      "warnings",
      "pandas.types.concat"
    ]
  },
  "github_extracted/pandas-dev_pandas/array.py": {
    "variables": [
      "N",
      "params",
      "param_names",
      "values",
      "i",
      "strings",
      "chunks",
      "data",
      "arr",
      "indexer"
    ],
    "function_params": [
      "multiple_chunks",
      "dtype",
      "self",
      "hasna"
    ],
    "function_names": [
      "time_from_list",
      "time_to_numpy",
      "time_constructor",
      "time_setitem",
      "time_from_np_object_array",
      "time_from_float_array",
      "time_tolist",
      "time_from_tuples",
      "time_setitem_null_slice",
      "time_setitem_slice",
      "setup",
      "time_from_np_str_array",
      "time_from_integer_array",
      "time_from_bool_array",
      "time_setitem_list",
      "time_from_integer_like"
    ],
    "class_names": [
      "IntervalArray",
      "ArrowStringArray",
      "StringArray",
      "IntegerArray",
      "BooleanArray",
      "ArrowExtensionArray"
    ],
    "imports": [
      "numpy",
      "pyarrow",
      "pandas"
    ]
  },
  "github_extracted/pandas-dev_pandas/__init__.py": {
    "variables": [],
    "function_params": [],
    "function_names": [],
    "class_names": [],
    "imports": []
  },
  "github_extracted/pandas-dev_pandas/isin.py": {
    "variables": [
      "param_names",
      "dti",
      "t",
      "M",
      "N_few",
      "i",
      "sample_size",
      "offset",
      "vals",
      "N_many",
      "arr",
      "params",
      "tmp",
      "values",
      "ser_vals",
      "n",
      "N",
      "variants",
      "array"
    ],
    "function_params": [
      "dtypes",
      "vals_type",
      "size",
      "title",
      "dtype",
      "series_type",
      "self",
      "MaxNumber",
      "exponent",
      "M",
      "offset_factor"
    ],
    "function_names": [
      "time_isin_empty",
      "time_isin_categorical",
      "time_isin_mismatched_dtype",
      "time_isin_index",
      "setup",
      "time_isin_range_index",
      "time_isin"
    ],
    "class_names": [
      "IsInWithLongTupples",
      "IsinWithArangeSorted",
      "IsInForObjects",
      "IsInIndexes",
      "IsinAlmostFullWithRandomInt",
      "IsInFloat64",
      "IsInLongSeriesLookUpDominates",
      "IsinWithArange",
      "IsIn",
      "IsinWithRandomFloat",
      "IsInLongSeriesValuesDominate"
    ],
    "imports": [
      "numpy",
      "NaT",
      "Categorical",
      "Index",
      "pandas",
      "date_range",
      "Series"
    ]
  },
  "github_extracted/pandas-dev_pandas/index_cached_properties.py": {
    "variables": [
      "N",
      "params",
      "param_names",
      "repeat",
      "number"
    ],
    "function_params": [
      "self",
      "index_type"
    ],
    "function_names": [
      "time_values",
      "time_is_unique",
      "time_engine",
      "setup",
      "time_shape",
      "time_is_monotonic_increasing",
      "time_inferred_type",
      "time_is_monotonic_decreasing"
    ],
    "class_names": [
      "IndexCache"
    ],
    "imports": [
      "pandas"
    ]
  },
  "github_extracted/pandas-dev_pandas/frame_ctor.py": {
    "variables": [
      "N",
      "K",
      "frame",
      "params",
      "param_names",
      "goal_time",
      "j",
      "i",
      "mi",
      "df",
      "N_rows",
      "_",
      "N_cols",
      "idx",
      "repeat",
      "number",
      "M",
      "x"
    ],
    "function_params": [
      "nrows",
      "self",
      "offset"
    ],
    "function_names": [
      "time_frame_from_ndarray",
      "time_frame_from_range",
      "time_dict_of_categoricals",
      "time_frame_from_scalar_ea_float64_na",
      "setup",
      "time_frame_from_arrays_float",
      "time_nested_dict_columns",
      "time_nested_dict_index_columns",
      "time_frame_from_arrays_sparse",
      "time_frame_from_scalar_ea_float64",
      "time_frame_from_arrays_int",
      "time_frame_from_records_generator",
      "time_nested_dict_index",
      "time_mi_series",
      "time_dict_with_timestamp_offsets",
      "time_list_of_dict",
      "time_nested_dict_int64",
      "time_nested_dict",
      "time_frame_from_lists"
    ],
    "class_names": [
      "FromDictwithTimestamp",
      "FromScalar",
      "FromLists",
      "FromDicts",
      "FromRecords",
      "FromRange",
      "FromArrays",
      "FromSeries",
      "FromNDArray"
    ],
    "imports": [
      "numpy",
      "Float64Dtype",
      "pandas.tseries.offsets",
      "NA",
      "Categorical",
      "DataFrame",
      "Nano",
      "pandas",
      "setup",
      "date_range",
      "Timestamp",
      "Hour",
      "pandas_vb_common",
      "Series",
      "MultiIndex",
      "pandas.core.datetools"
    ]
  },
  "github_extracted/apache_airflow/__main__.py": {
    "variables": [
      "args",
      "conf",
      "parser"
    ],
    "function_params": [],
    "function_names": [
      "main"
    ],
    "class_names": [],
    "imports": [
      "cli_parser",
      "argcomplete",
      "annotations",
      "write_default_airflow_configuration_if_needed",
      "airflow",
      "airflow.configuration",
      "airflow.cli",
      "os",
      "__future__",
      "configuration"
    ]
  },
  "github_extracted/apache_airflow/hatch_build.py": {
    "variables": [
      "log",
      "cmd",
      "work_dir",
      "PLUGIN_NAME",
      "airflow_ui_path",
      "log_level",
      "repo",
      "version",
      "git_path",
      "dist_path",
      "airflow_package_src",
      "git_version_file",
      "sha",
      "fastapi_ui_path"
    ],
    "function_params": [
      "versions",
      "path",
      "directory",
      "artifacts",
      "self"
    ],
    "function_names": [
      "build_standard",
      "clean_dir",
      "get_version_api",
      "write_git_version",
      "get_git_version",
      "clean"
    ],
    "class_names": [
      "CustomBuild"
    ],
    "imports": [
      "PluginManager",
      "pathlib",
      "Callable",
      "Any",
      "hatchling.plugin.manager",
      "logging",
      "annotations",
      "hatchling.builders.plugin.interface",
      "collections.abc",
      "BuilderConfig",
      "Iterable",
      "BuilderInterface",
      "os",
      "Path",
      "run",
      "shutil",
      "hatchling.builders.config",
      "typing",
      "git",
      "subprocess",
      "__future__"
    ]
  },
  "github_extracted/apache_airflow/diagram_dag_processor_airflow_architecture.py": {
    "variables": [
      "plugins_and_packages",
      "MULTIPLE_FILES_IMAGE",
      "edge_attr",
      "deployment_manager",
      "MY_DIR",
      "console",
      "dag_files",
      "dag_processors",
      "DATABASE_IMAGE",
      "operations_user",
      "metadata_db",
      "PYTHON_MULTIPROCESS_LOGO",
      "MY_FILENAME",
      "PACKAGES_IMAGE",
      "dag_processor_architecture_image_file",
      "schedulers",
      "dag_author",
      "triggerer",
      "webservers",
      "graph_attr",
      "workers"
    ],
    "function_params": [],
    "function_names": [
      "generate_dag_processor_airflow_diagram"
    ],
    "class_names": [],
    "imports": [
      "diagrams.onprem.client",
      "pathlib",
      "Diagram",
      "diagrams.custom",
      "Console",
      "Custom",
      "Path",
      "annotations",
      "Cluster",
      "rich.console",
      "Edge",
      "__future__",
      "User",
      "diagrams"
    ]
  },
  "github_extracted/apache_airflow/mark_tasks.py": {
    "variables": [
      "task_id_map_index_list",
      "dag_run_ids",
      "tasks_to_mark_success",
      "tis_altered",
      "ti",
      "dag",
      "normal_tasks",
      "end_date",
      "pending_tis",
      "dates",
      "res",
      "relative",
      "unfinished_teardown_task_ids",
      "task_dags",
      "pending_normal_tis",
      "running_states",
      "task_ids",
      "task_ids_of_running_tis",
      "run_ids",
      "qry_dag",
      "task",
      "running_tasks",
      "start_date",
      "info",
      "map_index",
      "d",
      "dr",
      "current_dagrun",
      "dag_run",
      "last_dagrun",
      "dag_runs",
      "item",
      "task_instance",
      "first_dagrun",
      "teardown_tasks",
      "running_tis"
    ],
    "function_params": [
      "run_id",
      "tasks",
      "future",
      "upstream",
      "dag",
      "state",
      "downstream",
      "session",
      "task_ids",
      "dag_id",
      "past",
      "run_ids"
    ],
    "function_names": [
      "get_run_ids",
      "set_dag_run_state_to_success",
      "set_dag_run_state_to_queued",
      "find_task_relatives",
      "__set_dag_run_state_to_running_or_queued",
      "set_state",
      "get_all_dag_task_query",
      "set_dag_run_state_to_failed",
      "_set_dag_run_state"
    ],
    "class_names": [],
    "imports": [
      "airflow.utils.state",
      "airflow.models.dagrun",
      "DAG",
      "and_",
      "sqlalchemy.orm",
      "provide_session",
      "select",
      "lazyload",
      "annotations",
      "Session",
      "TaskInstance",
      "collections.abc",
      "TYPE_CHECKING",
      "TaskInstanceState",
      "Iterable",
      "sqlalchemy",
      "or_",
      "airflow.utils.session",
      "airflow.models.dag",
      "airflow.models.operator",
      "Operator",
      "DagRunState",
      "typing",
      "Collection",
      "DagRun",
      "airflow.models.taskinstance",
      "State",
      "NEW_SESSION",
      "__future__"
    ]
  },
  "github_extracted/apache_airflow/empty_plugin.py": {
    "variables": [
      "default_view",
      "appbuilder_views",
      "name",
      "bp",
      "flask_blueprints"
    ],
    "function_params": [
      "self"
    ],
    "function_names": [
      "index"
    ],
    "class_names": [
      "EmptyPluginView",
      "EmptyPlugin"
    ],
    "imports": [
      "has_access_view",
      "AirflowPlugin",
      "flask_appbuilder",
      "Blueprint",
      "flask",
      "AccessView",
      "annotations",
      "BaseView",
      "airflow.providers.fab.www.auth",
      "expose",
      "airflow.api_fastapi.auth.managers.models.resource_details",
      "airflow.plugins_manager",
      "__future__"
    ]
  },
  "github_extracted/apache_airflow/diagram_basic_airflow_architecture.py": {
    "variables": [
      "user",
      "plugins_and_packages",
      "MULTIPLE_FILES_IMAGE",
      "MY_DIR",
      "console",
      "graph_attr",
      "edge_attr",
      "image_file",
      "dag_files",
      "webserver",
      "DATABASE_IMAGE",
      "metadata_db",
      "MY_FILENAME",
      "PACKAGES_IMAGE",
      "scheduler"
    ],
    "function_params": [],
    "function_names": [
      "generate_basic_airflow_diagram"
    ],
    "class_names": [],
    "imports": [
      "diagrams.onprem.client",
      "pathlib",
      "Python",
      "Diagram",
      "diagrams.custom",
      "Console",
      "Custom",
      "Path",
      "annotations",
      "Cluster",
      "diagrams.programming.language",
      "rich.console",
      "Edge",
      "__future__",
      "User",
      "diagrams"
    ]
  },
  "github_extracted/apache_airflow/diagram_auth_manager_airflow_architecture.py": {
    "variables": [
      "user",
      "image_file",
      "console",
      "MY_DIR",
      "auth_manager",
      "webserver",
      "PYTHON_MULTIPROCESS_LOGO",
      "MY_FILENAME",
      "auth_manager_interface"
    ],
    "function_params": [],
    "function_names": [
      "generate_auth_manager_airflow_diagram"
    ],
    "class_names": [],
    "imports": [
      "diagrams.onprem.client",
      "pathlib",
      "Diagram",
      "diagrams.custom",
      "Console",
      "Custom",
      "Path",
      "annotations",
      "Cluster",
      "rich.console",
      "Edge",
      "__future__",
      "User",
      "diagrams"
    ]
  },
  "github_extracted/apache_airflow/diagram_task_lifecycle.py": {
    "variables": [
      "cond_task_error",
      "state_restarting",
      "edge_attr",
      "state_up_for_retry",
      "state_failed",
      "cond_defer_signal_raised",
      "component_executor",
      "cond_fail_mark",
      "state_removed",
      "LEGEND_NODE_ATTRS",
      "state_up_for_reschedule",
      "cond_retriable",
      "state_deferred",
      "MY_DIR",
      "console",
      "cond_trigger_task_1",
      "SHARED_STATE_IMG",
      "DEFERRABLE_STATE_IMG",
      "MY_FILENAME",
      "state_success",
      "component_scheduler",
      "cond_upstream_task_failure",
      "SENSOR_STATE_IMG",
      "state_queued",
      "cond_trigger_task_2",
      "state_skipped",
      "cond_sensor_reschedule",
      "cond_clear_mark",
      "image_file",
      "TERMINAL_STATE_IMG",
      "CONDITION_NODE_ATTRS",
      "START_NODE_ATTRS",
      "COMPONENT_NODE_ATTRS",
      "cond_task_complete_2",
      "cond_task_restore",
      "cond_task_complete_1",
      "cond_skip_signal",
      "cond_task_def_existence",
      "node_attr",
      "CONDITION_IMG",
      "state_none",
      "component_triggerer",
      "COMPONENT_IMG",
      "graph_attr",
      "state_upstream_failed",
      "state_scheduled",
      "state_running",
      "STATE_NODE_ATTRS",
      "cond_scheduled_skip",
      "start_node",
      "component_worker"
    ],
    "function_params": [],
    "function_names": [
      "generate_task_lifecycle_diagram"
    ],
    "class_names": [],
    "imports": [
      "pathlib",
      "Diagram",
      "diagrams.custom",
      "diagrams.programming.flowchart",
      "Custom",
      "Path",
      "Console",
      "annotations",
      "Cluster",
      "StartEnd",
      "rich.console",
      "Edge",
      "__future__",
      "diagrams"
    ]
  },
  "github_extracted/apache_airflow/delete_dag.py": {
    "variables": [
      "log",
      "model",
      "count",
      "dag",
      "running_tis"
    ],
    "function_params": [
      "session",
      "dag_id",
      "keep_records_in_log"
    ],
    "function_names": [
      "delete_dag"
    ],
    "class_names": [],
    "imports": [
      "airflow.utils.db",
      "airflow.utils.state",
      "models",
      "airflow.models.errors",
      "ParseImportError",
      "sqlalchemy.orm",
      "provide_session",
      "select",
      "logging",
      "DagModel",
      "DagNotFound",
      "annotations",
      "Session",
      "get_sqla_model_classes",
      "TYPE_CHECKING",
      "TaskInstanceState",
      "airflow.exceptions",
      "sqlalchemy",
      "delete",
      "airflow.utils.session",
      "airflow",
      "__future__",
      "airflow.models",
      "typing",
      "NEW_SESSION",
      "AirflowException"
    ]
  },
  "github_extracted/apache_airflow/__init__.py": {
    "variables": [],
    "function_params": [],
    "function_names": [],
    "class_names": [],
    "imports": []
  },
  "github_extracted/apache_airflow/trigger_dag.py": {
    "variables": [
      "dag_model",
      "dagbag",
      "run_id",
      "logical_date",
      "dr",
      "run_after",
      "dag",
      "min_dag_start_date",
      "dag_run",
      "run_conf",
      "coerced_logical_date",
      "data_interval"
    ],
    "function_params": [
      "dag_bag",
      "dag_id"
    ],
    "function_names": [
      "_trigger_dag",
      "trigger_dag"
    ],
    "class_names": [],
    "imports": [
      "airflow.utils.types",
      "airflow.utils.state",
      "json",
      "provide_session",
      "DagModel",
      "DagNotFound",
      "datetime",
      "annotations",
      "timezone",
      "sqlalchemy.orm.session",
      "Session",
      "TYPE_CHECKING",
      "airflow.exceptions",
      "airflow.utils",
      "DagRunAlreadyExists",
      "DagRunType",
      "airflow.utils.session",
      "DagBag",
      "airflow.models",
      "DagRunState",
      "typing",
      "DagRunTriggeredByType",
      "DagRun",
      "NEW_SESSION",
      "__future__"
    ]
  },
  "github_extracted/apache_airflow/diagram_distributed_airflow_architecture.py": {
    "variables": [
      "plugins_and_packages",
      "MULTIPLE_FILES_IMAGE",
      "edge_attr",
      "deployment_manager",
      "MY_DIR",
      "console",
      "dag_files",
      "DATABASE_IMAGE",
      "operations_user",
      "metadata_db",
      "PYTHON_MULTIPROCESS_LOGO",
      "MY_FILENAME",
      "PACKAGES_IMAGE",
      "schedulers",
      "image_file",
      "dag_author",
      "triggerer",
      "webservers",
      "graph_attr",
      "workers"
    ],
    "function_params": [],
    "function_names": [
      "generate_distributed_airflow_diagram"
    ],
    "class_names": [],
    "imports": [
      "diagrams.onprem.client",
      "pathlib",
      "Diagram",
      "diagrams.custom",
      "Console",
      "Custom",
      "Path",
      "annotations",
      "Cluster",
      "rich.console",
      "Edge",
      "__future__",
      "User",
      "diagrams"
    ]
  },
  "github_extracted/apache_airflow/diagram_multi_team_airflow_architecture.py": {
    "variables": [
      "dag_author_1",
      "plugins_and_packages_2",
      "MULTIPLE_FILES_IMAGE",
      "dag_processors_1",
      "edge_attr",
      "organization_deployment_manager",
      "MY_DIR",
      "console",
      "dag_files_1",
      "executor_2",
      "CONFIG_FILE",
      "DATABASE_IMAGE",
      "metadata_db",
      "PYTHON_MULTIPROCESS_LOGO",
      "MY_FILENAME",
      "config_file_1",
      "PACKAGES_IMAGE",
      "dag_processor_architecture_image_file",
      "schedulers",
      "organization_config_file",
      "triggerer_1",
      "operations_user_1",
      "dag_processors_2",
      "config_file_2",
      "internal_api",
      "deployment_manager_2",
      "executor_1",
      "deployment_manager_1",
      "external_organization_identity_system",
      "organization_plugins_and_packages",
      "workers_1",
      "plugins_and_packages_1",
      "workers_2",
      "webservers",
      "triggerer_2",
      "graph_attr",
      "dag_files_2",
      "auth_manager",
      "operations_user_2",
      "organization_admin",
      "dag_author_2"
    ],
    "function_params": [],
    "function_names": [
      "generate_dag_processor_airflow_diagram"
    ],
    "class_names": [],
    "imports": [
      "diagrams.onprem.client",
      "pathlib",
      "Diagram",
      "diagrams.custom",
      "Console",
      "Custom",
      "Path",
      "annotations",
      "Cluster",
      "Dex",
      "diagrams.onprem.identity",
      "rich.console",
      "Edge",
      "__future__",
      "User",
      "diagrams"
    ]
  },
  "github_extracted/apache_airflow/conf.py": {
    "variables": [
      "html_theme",
      "autoapi_dirs",
      "autoapi_keep_files",
      "extensions",
      "autoapi_options",
      "html_use_index",
      "configs",
      "exclude_patterns",
      "config_descriptions",
      "html_show_copyright",
      "html_extra_path",
      "PACKAGES_THAT_WE_SHOULD_ADD_TO_API_DOCS",
      "html_sidebars",
      "autodoc_typehints_format",
      "templates_path",
      "autodoc_mock_imports",
      "spelling_exclude_patterns",
      "html_extra_with_substitutions",
      "intersphinx_mapping",
      "global_substitutions",
      "viewcode_follow_imported_members",
      "autoapi_template_dir",
      "html_css_files",
      "PACKAGE_NAME",
      "autoapi_log",
      "html_context",
      "autodoc_default_options",
      "project",
      "suppress_warnings",
      "spelling_ignore_importable_modules",
      "spelling_word_list_filename",
      "conf_py_path",
      "PACKAGE_VERSION",
      "deprecated_options",
      "redirects_file",
      "graphviz_output_format",
      "smartquotes_excludes",
      "html_js_files",
      "html_title",
      "autoapi_root",
      "jinja_contexts",
      "version",
      "html_short_title",
      "autoapi_ignore",
      "UTIL_MODULES_THAT_SHOULD_BE_INCLUDED_IN_API_DOCS",
      "redoc",
      "rst_epilog",
      "MODELS_THAT_SHOULD_BE_INCLUDED_IN_API_DOCS",
      "redoc_script_url",
      "path",
      "release",
      "html_favicon",
      "airflow_version",
      "autodoc_typehints",
      "f",
      "manual_substitutions_in_generated_html",
      "autoapi_add_toctree_entry",
      "ALLOWED_TOP_LEVEL_FILES",
      "autodoc_typehints_description_target",
      "main_openapi_path",
      "SYSTEM_TESTS_DIR",
      "keep_warnings",
      "root",
      "spelling_ignore_contributor_names",
      "exampleinclude_sourceroot",
      "html_theme_options",
      "sam_openapi_path",
      "html_static_path"
    ],
    "function_params": [
      "sphinx",
      "exclude_patterns"
    ],
    "function_names": [
      "setup",
      "add_airflow_core_exclude_patterns_to_sphinx"
    ],
    "class_names": [],
    "imports": [
      "get_html_context",
      "pathlib",
      "retrieve_configuration_description",
      "packaging.version",
      "re",
      "get_html_sidebars",
      "get_rst_filepath_from_path",
      "AIRFLOW_CORE_ROOT_PATH",
      "BASIC_SPHINX_EXTENSIONS",
      "AUTOAPI_OPTIONS",
      "get_rst_epilogue",
      "SPHINX_DESIGN_STATIC_PATH",
      "docs.utils.conf_constants",
      "Any",
      "logging",
      "__file__",
      "AIRFLOW_CORE_DOCKER_COMPOSE_PATH",
      "REDOC_SCRIPT_URL",
      "annotations",
      "SPELLING_WORDLIST_PATH",
      "filter_autoapi_ignore_entries",
      "parse",
      "AIRFLOW_REPO_ROOT_PATH",
      "airflow.api_fastapi.auth.managers.simple.openapi",
      "get_autodoc_mock_imports",
      "Version",
      "get_google_intersphinx_mapping",
      "AIRFLOW_FAVICON_PATH",
      "airflow.api_fastapi.core_api.openapi",
      "SUPPRESS_WARNINGS",
      "get_html_theme_options",
      "SMARTQUOTES_EXCLUDES",
      "airflow",
      "airflow.configuration",
      "skip_util_classes_extension",
      "AIRFLOW_CORE_SRC_PATH",
      "os",
      "SPHINX_REDOC_EXTENSIONS",
      "get_intersphinx_mapping",
      "Path",
      "BASIC_AUTOAPI_IGNORE_PATTERNS",
      "typing",
      "get_configs_and_deprecations",
      "AIRFLOW_CORE_DOC_STATIC_PATH",
      "__future__"
    ]
  },
  "github_extracted/apache_airflow/local_client.py": {
    "variables": [
      "pool",
      "count",
      "p",
      "pool_name_length",
      "dag_run",
      "slots"
    ],
    "function_params": [
      "replace_microseconds",
      "name",
      "run_id",
      "auth",
      "logical_date",
      "self",
      "dag_id",
      "session",
      "description",
      "include_deferred",
      "conf",
      "slots"
    ],
    "function_names": [
      "__init__",
      "get_pool",
      "delete_pool",
      "create_pool",
      "trigger_dag",
      "get_pools",
      "delete_dag"
    ],
    "class_names": [
      "Client"
    ],
    "imports": [
      "airflow.utils.types",
      "airflow.models.pool",
      "httpx",
      "AirflowBadRequest",
      "annotations",
      "PoolNotFound",
      "DagRunTriggeredByType",
      "airflow.api.common",
      "trigger_dag",
      "Pool",
      "__future__",
      "delete_dag",
      "airflow.exceptions"
    ]
  },
  "github_extracted/apache_airflow/airflow_health.py": {
    "variables": [
      "latest_dag_processor_job",
      "metadatabase_status",
      "scheduler_status",
      "latest_scheduler_heartbeat",
      "UNHEALTHY",
      "airflow_health_status",
      "HEALTHY",
      "latest_scheduler_job",
      "latest_triggerer_heartbeat",
      "dag_processor_status",
      "latest_triggerer_job",
      "latest_dag_processor_heartbeat",
      "triggerer_status"
    ],
    "function_params": [],
    "function_names": [
      "get_airflow_health"
    ],
    "class_names": [],
    "imports": [
      "SchedulerJobRunner",
      "Any",
      "airflow.jobs.dag_processor_job_runner",
      "airflow.jobs.triggerer_job_runner",
      "annotations",
      "typing",
      "DagProcessorJobRunner",
      "airflow.jobs.scheduler_job_runner",
      "__future__",
      "TriggererJobRunner"
    ]
  },
  "github_extracted/numpy_numpy/bench_clip.py": {
    "variables": [
      "params",
      "param_names",
      "rnd"
    ],
    "function_params": [
      "dtype",
      "self",
      "size"
    ],
    "function_names": [
      "time_clip",
      "setup"
    ],
    "class_names": [
      "ClipFloat",
      "ClipInteger"
    ],
    "imports": [
      "numpy",
      "common",
      "Benchmark"
    ]
  },
  "github_extracted/numpy_numpy/asv_pip_nopep517.py": {
    "variables": [
      "cmd",
      "output"
    ],
    "function_params": [],
    "function_names": [],
    "class_names": [],
    "imports": [
      "sys",
      "subprocess"
    ]
  },
  "github_extracted/numpy_numpy/bench_creation.py": {
    "variables": [
      "params",
      "timeout",
      "param_names",
      "rnd",
      "values",
      "x"
    ],
    "function_params": [
      "shape",
      "size",
      "ndtype",
      "self",
      "npdtypes",
      "ind",
      "ndims"
    ],
    "function_names": [
      "time_ones",
      "time_meshgrid",
      "time_empty",
      "time_full",
      "time_from_dlpack",
      "time_empty_like",
      "time_zeros_like",
      "setup",
      "time_zeros",
      "time_ones_like",
      "time_full_like"
    ],
    "class_names": [
      "Create",
      "MeshGrid",
      "UfuncsFromDLP"
    ],
    "imports": [
      "numpy",
      "Benchmark",
      "get_squares_",
      "common",
      "TYPES1"
    ]
  },
  "github_extracted/numpy_numpy/bench_itemselection.py": {
    "variables": [
      "params",
      "param_names"
    ],
    "function_params": [
      "shape",
      "mode",
      "dtype",
      "self",
      "values_is_scalar"
    ],
    "function_names": [
      "time_sparse",
      "time_dense",
      "time_contiguous",
      "setup",
      "time_ordered"
    ],
    "class_names": [
      "Put",
      "Take",
      "PutMask"
    ],
    "imports": [
      "numpy",
      "common",
      "Benchmark",
      "TYPES1"
    ]
  },
  "github_extracted/numpy_numpy/bench_io.py": {
    "variables": [
      "params",
      "l",
      "param_names",
      "date_line",
      "value",
      "dtype",
      "values",
      "date",
      "X",
      "test_array",
      "data",
      "dates",
      "num_lines",
      "arr"
    ],
    "function_params": [
      "size",
      "usecols",
      "dtype",
      "skiprows",
      "self",
      "typename",
      "num_lines"
    ],
    "function_names": [
      "time_copyto_dense",
      "time_loadtxt_usecols_csv",
      "setup",
      "time_copyto_8_dense",
      "time_loadtxt_csv_datetime",
      "time_copyto_8_sparse",
      "time_skiprows_csv",
      "time_vb_savez_squares",
      "time_loadtxt_csv_struct_dtype",
      "time_memcpy_large_out_of_place",
      "time_memcpy",
      "time_copyto_sparse",
      "time_copyto",
      "time_comment_loadtxt_csv",
      "time_loadtxt_dtypes_csv",
      "time_cont_assign",
      "time_strided_copy",
      "time_read_uint64",
      "time_strided_assign",
      "time_read_uint64_neg_values",
      "time_loadnpy_overhead"
    ],
    "class_names": [
      "LoadtxtReadUint64Integers",
      "LoadtxtCSVStructured",
      "LoadNpyOverhead",
      "LoadtxtCSVSkipRows",
      "LoadtxtCSVDateTime",
      "LoadtxtUseColsCSV",
      "LoadtxtCSVdtypes",
      "CopyTo",
      "LoadtxtCSVComments",
      "Copy",
      "Savez"
    ],
    "imports": [
      "numpy",
      "StringIO",
      "Benchmark",
      "get_squares_",
      "BytesIO",
      "io",
      "get_squares",
      "common",
      "SEEK_SET"
    ]
  },
  "github_extracted/numpy_numpy/bench_manipulate.py": {
    "variables": [
      "timeout",
      "params",
      "param_names",
      "x"
    ],
    "function_params": [
      "shape",
      "size",
      "ndtype",
      "self",
      "narrays"
    ],
    "function_names": [
      "time_concatenate_ax1",
      "time_broadcast_to",
      "time_expand_dims_neg",
      "time_broadcast_arrays",
      "time_squeeze_dims",
      "time_flip_one",
      "time_flip_neg",
      "time_concatenate_ax0",
      "time_stack_ax0",
      "time_stack_ax1",
      "time_expand_dims",
      "setup",
      "time_roll",
      "time_moveaxis",
      "time_flip_all",
      "time_reshape"
    ],
    "class_names": [
      "ConcatenateStackArrays",
      "ConcatenateNestedArrays",
      "BroadcastArraysTo",
      "BroadcastArrays",
      "DimsManipulations"
    ],
    "imports": [
      "numpy",
      "Benchmark",
      "collections",
      "deque",
      "common",
      "TYPES1"
    ]
  },
  "github_extracted/numpy_numpy/bench_polynomial.py": {
    "variables": [
      "_"
    ],
    "function_params": [
      "self"
    ],
    "function_names": [
      "time_polynomial_evaluation_python_float",
      "time_polynomial_addition",
      "time_polynomial_evaluation_array_1000",
      "setup",
      "time_polynomial_evaluation_scalar",
      "time_polynomial_evaluation_array_3"
    ],
    "class_names": [
      "Polynomial"
    ],
    "imports": [
      "numpy",
      "common",
      "Benchmark"
    ]
  },
  "github_extracted/numpy_numpy/bench_indexing.py": {
    "variables": [
      "params",
      "param_names",
      "code",
      "val",
      "ns",
      "indx",
      "i",
      "sel",
      "arr"
    ],
    "function_params": [
      "shape",
      "ndim",
      "indexes",
      "op",
      "dtype",
      "self",
      "sel"
    ],
    "function_names": [
      "time_flat_bool_index_none",
      "time_array_all",
      "time_scalar_all",
      "time_scalar_slice",
      "time_assign_cast",
      "time_mmap_slicing",
      "time_array_slice",
      "time_flat_bool_index_half",
      "time_index",
      "time_getitem_ordered",
      "time_flat_bool_index_all",
      "time_setitem_ordered",
      "setup",
      "teardown",
      "time_mmap_fancy_indexing",
      "time_op",
      "time_assign"
    ],
    "class_names": [
      "IndexingSeparate",
      "Indexing",
      "FlatIterIndexing",
      "IndexingWith1DArr",
      "IndexingStructured0D",
      "ScalarIndexing"
    ],
    "imports": [
      "numpy",
      "mkdtemp",
      "tempfile",
      "Benchmark",
      "shutil",
      "float32",
      "join",
      "get_indexes_rand_",
      "get_square_",
      "os.path",
      "array",
      "get_indexes_",
      "common",
      "memmap",
      "TYPES1"
    ]
  },
  "github_extracted/numpy_numpy/bench_function_base.py": {
    "variables": [
      "array_class",
      "size",
      "param_names",
      "rnd_array",
      "generate_array_method",
      "temp",
      "res",
      "rnd",
      "block_num",
      "i",
      "_memoized",
      "arr",
      "x",
      "AREA_SIZE",
      "BUBBLE_SIZE",
      "params",
      "dtype",
      "SkipNotImplemented",
      "ARRAY_SIZE",
      "mid",
      "b",
      "a"
    ],
    "function_params": [
      "size",
      "rnd",
      "kind",
      "dtype",
      "array_type",
      "f",
      "k",
      "self",
      "block_size"
    ],
    "function_names": [
      "sorted_block",
      "time_random_40_percent",
      "time_mean",
      "memoize",
      "time_1",
      "time_argsort",
      "time_interleaved_zeros_x2",
      "setup",
      "time_sort_worst",
      "time_odd_small",
      "time_linspace_array",
      "time_interleaved_ones_x8",
      "time_all_zeros",
      "time_even_inplace",
      "time_all_ones",
      "time_even_small",
      "time_small_coverage",
      "time_percentile",
      "wrapped",
      "time_tall",
      "time_fine_binning",
      "random",
      "time_mean_axis",
      "time_argpartition",
      "time_interleaved_ones_x2",
      "time_select",
      "time_sort",
      "time_random_30_percent",
      "time_random_50_percent",
      "time_interleaved_zeros_x4",
      "time_interleaved_ones_x4",
      "time_wide",
      "time_2",
      "time_random_20_percent",
      "time_percentile_small",
      "ordered",
      "uniform",
      "time_2_broadcast",
      "time_random_01_percent",
      "time_interleaved_zeros_x8",
      "time_select_larger",
      "time_2_object",
      "time_bincount",
      "time_weights",
      "time_linspace_scalar",
      "time_odd_inplace",
      "time_odd",
      "time_quartile",
      "time_even",
      "time_full_coverage",
      "time_partition",
      "reversed"
    ],
    "class_names": [
      "SortGenerator",
      "Bincount",
      "Histogram1D",
      "Sort",
      "Select",
      "SortWorst",
      "Where",
      "Histogram2D",
      "Mean",
      "Partition",
      "Median",
      "Linspace",
      "Percentile"
    ],
    "imports": [
      "numpy",
      "Benchmark",
      "SkipNotImplemented",
      "asv_runner.benchmarks.mark",
      "common"
    ]
  },
  "github_extracted/numpy_numpy/bench_app.py": {
    "variables": [
      "dy2",
      "param_names",
      "dy",
      "dx",
      "sd",
      "ntime",
      "i",
      "Niter",
      "corr_temp",
      "nsubj",
      "params",
      "tmp",
      "j",
      "u",
      "tmp2",
      "sd2",
      "nfeat",
      "func",
      "N",
      "feature_scores",
      "dx2"
    ],
    "function_params": [
      "func",
      "dy2",
      "N",
      "arrays",
      "update",
      "u",
      "Niter",
      "self",
      "args",
      "dx2"
    ],
    "function_names": [
      "run",
      "maxes_of_dots",
      "time_it",
      "setup",
      "laplace",
      "num_update",
      "num_inplace"
    ],
    "class_names": [
      "MaxesOfDots",
      "LaplaceInplace"
    ],
    "imports": [
      "numpy",
      "common",
      "Benchmark"
    ]
  },
  "github_extracted/numpy_numpy/bench_linalg.py": {
    "variables": [
      "params",
      "param_names",
      "m",
      "p",
      "batch_size",
      "arg",
      "args",
      "n"
    ],
    "function_params": [
      "shape",
      "dtype",
      "self",
      "npdtypes",
      "typename",
      "configuration"
    ],
    "function_names": [
      "time_einsum_contig_outstride0",
      "time_einsum_i_ij_j",
      "time_matmul_a_b",
      "time_matmul_trans_a_atc",
      "time_det_3x3",
      "time_dot_trans_a_at",
      "time_inner_trans_a_ac",
      "setup",
      "time_einsum_ijk_jil_kl",
      "time_matmul_trans_a_at",
      "time_einsum_noncon_sum_mul",
      "time_dot_trans_atc_a",
      "time_einsum_noncon_multiply",
      "__init__",
      "time_einsum_noncon_outer",
      "time_einsum_mul",
      "time_dot_d_dot_b_c",
      "time_einsum_sum_mul",
      "time_dot_trans_a_atc",
      "time_eig_3x3",
      "time_matmul_trans_atc_a",
      "time_einsum_outer",
      "time_einsum_contig_contig",
      "time_transpose",
      "time_vdot",
      "time_numpy_linalg_lstsq_a__b_float64",
      "time_svd",
      "time_einsum_multiply",
      "time_matmul_trans_at_a",
      "time_norm_small_array",
      "time_einsum_sum_mul2",
      "time_matmul_d_matmul_b_c",
      "time_einsum_noncon_contig_contig",
      "time_einsum_noncon_contig_outstride0",
      "time_det_small_array",
      "time_dot_a_b",
      "time_norm",
      "time_solve_3x3",
      "time_matmul",
      "time_einsum_ij_jk_a_b",
      "time_einsum_noncon_sum_mul2",
      "time_einsum_noncon_mul",
      "time_inner_trans_a_a",
      "time_pinv",
      "time_dot_trans_at_a",
      "time_det",
      "time_tensordot_a_b_axes_1_0_0_1"
    ],
    "class_names": [
      "Eindot",
      "Lstsq",
      "MatmulStrided",
      "Einsum",
      "LinalgSmallArrays",
      "Linalg",
      "LinalgNorm",
      "LinAlgTransposeVdot"
    ],
    "imports": [
      "numpy",
      "get_indexes_rand",
      "Benchmark",
      "get_squares_",
      "common",
      "TYPES1"
    ]
  },
  "github_extracted/numpy_numpy/bench_random.py": {
    "variables": [
      "high",
      "nom_size",
      "params",
      "u16",
      "name",
      "param_names",
      "u64",
      "dt",
      "max",
      "min",
      "u8",
      "u32",
      "seed",
      "items",
      "x"
    ],
    "function_params": [
      "v",
      "name",
      "bitgen",
      "self",
      "args"
    ],
    "function_names": [
      "time_permutation_int",
      "time_permutation_2d",
      "time_bounded",
      "time_rng",
      "time_randint_slow",
      "time_choice",
      "time_randint_fast",
      "time_100000",
      "time_32bit",
      "time_normal_zig",
      "time_legacy_choice",
      "setup",
      "time_permutation_1d",
      "time_raw",
      "time_64bit"
    ],
    "class_names": [
      "Choice",
      "Randint",
      "Randint_dtype",
      "Permutation",
      "RNG",
      "Bounded",
      "Shuffle",
      "Random"
    ],
    "imports": [
      "numpy",
      "numpy.random",
      "Benchmark",
      "numpy.lib",
      "Generator",
      "common",
      "NumpyVersion"
    ]
  },
  "github_extracted/numpy_numpy/bench_import.py": {
    "variables": [
      "timer"
    ],
    "function_params": [
      "command",
      "self"
    ],
    "function_names": [
      "time_random",
      "time_ma",
      "time_numpy_inspect",
      "time_numpy",
      "time_linalg",
      "time_matlib",
      "execute",
      "time_fft"
    ],
    "class_names": [
      "Import"
    ],
    "imports": [
      "executable",
      "Benchmark",
      "default_timer",
      "sys",
      "call",
      "subprocess",
      "common",
      "timeit"
    ]
  },
  "github_extracted/numpy_numpy/cmds.py": {
    "variables": [
      "doctest_args",
      "c",
      "filepath",
      "openblas_dir",
      "project_config",
      "t",
      "preimport",
      "arg",
      "jobs_param",
      "PATH",
      "pytest_args",
      "commit_a",
      "openblas",
      "linter",
      "meson_import_dir",
      "ctx",
      "output_path",
      "p",
      "pkg_config_fname",
      "fid",
      "curdir",
      "EXTRA_PATH",
      "commits",
      "changelog",
      "test_notes",
      "basedir",
      "p0",
      "p1",
      "commit_b",
      "bench_args",
      "env",
      "module",
      "local",
      "cur_limit",
      "version",
      "module_name",
      "IS_PYPY",
      "spec",
      "max_mem",
      "np_ver",
      "mem",
      "default",
      "cmd",
      "ppath",
      "outfile",
      "f",
      "cmd_compare"
    ],
    "function_params": [
      "max_mem",
      "quick",
      "fix",
      "ctx",
      "token",
      "commit",
      "cmd",
      "build_dir",
      "with_scipy_openblas",
      "blas_variant",
      "filename",
      "version_override",
      "compare",
      "revision_range",
      "verbose",
      "tests",
      "commits"
    ],
    "function_names": [
      "_set_mem_rlimit",
      "_config_openblas",
      "ipython",
      "lint",
      "python",
      "_get_numpy_tools",
      "changelog",
      "_dirty_git_working_dir",
      "config_openblas",
      "bench",
      "_run_asv",
      "docs",
      "test",
      "check_docs",
      "build",
      "notes",
      "_commit_to_sha",
      "mypy",
      "check_tutorials"
    ],
    "class_names": [],
    "imports": [
      "psutil",
      "git.exc",
      "pathlib",
      "resource",
      "GithubException",
      "importlib",
      "shutil",
      "spin.cmds",
      "github.GithubException",
      "scipy_doctest",
      "click",
      "sys",
      "meson",
      "spin",
      "subprocess",
      "os",
      "GitError"
    ]
  },
  "github_extracted/numpy_numpy/bench_array_coercion.py": {
    "variables": [
      "params",
      "int64",
      "param_names"
    ],
    "function_params": [
      "array_like",
      "self"
    ],
    "function_names": [
      "time_array_dtype_not_kwargs",
      "time_array_no_copy",
      "time_array_invalid_kwarg",
      "time_asarray_dtype_order",
      "time_array",
      "time_asarray_dtype",
      "time_asanyarray_dtype_order",
      "time_ascontiguousarray",
      "time_array_subok",
      "time_asanyarray",
      "time_asanyarray_dtype",
      "time_asarray",
      "time_array_all_kwargs"
    ],
    "class_names": [
      "ArrayCoercionSmall"
    ],
    "imports": [
      "numpy",
      "common",
      "Benchmark"
    ]
  },
  "github_extracted/numpy_numpy/bench_overrides.py": {
    "variables": [
      "arrays"
    ],
    "function_params": [
      "func",
      "shape",
      "axis",
      "arrays",
      "out",
      "self",
      "array",
      "subok",
      "types",
      "kwargs",
      "args"
    ],
    "function_names": [
      "time_mock_concatenate_many",
      "__array_function__",
      "time_mock_concatenate_numpy",
      "array_function_dispatch",
      "mock_broadcast_to",
      "wrap",
      "time_mock_broadcast_to_numpy",
      "time_mock_concatenate_mixed",
      "_broadcast_to_dispatcher",
      "setup",
      "time_mock_broadcast_to_duck",
      "mock_concatenate",
      "time_mock_concatenate_duck",
      "_concatenate_dispatcher"
    ],
    "class_names": [
      "DuckArray",
      "ArrayFunction"
    ],
    "imports": [
      "numpy",
      "Benchmark",
      "array_function_dispatch",
      "common",
      "numpy._core.overrides"
    ]
  },
  "github_extracted/numpy_numpy/bench_core.py": {
    "variables": [
      "a",
      "params",
      "i",
      "param_names"
    ],
    "function_params": [
      "size",
      "numaxes",
      "mode",
      "size1",
      "dtype",
      "self",
      "size2"
    ],
    "function_names": [
      "time_count_nonzero_multi_axis",
      "time_packbits_little",
      "time_triu_indices_500",
      "time_count_nonzero_axis",
      "time_packbits_axis0",
      "time_mid",
      "time_diagflat_l100",
      "time_mean",
      "time_indices",
      "time_can_cast",
      "time_count_nonzero",
      "time_array_float64_l1000",
      "time_arange_100",
      "time_add_small_list_big_string",
      "setup",
      "time_large",
      "time_packbits",
      "time_array_1",
      "time_correlate",
      "time_identity_3000",
      "time_triu_l10x10",
      "time_unpackbits_little",
      "time_unpackbits_axis1_little",
      "time_find_small_list_big_string",
      "time_startswith_big_list_small_string",
      "time_std",
      "time_array_l_view",
      "time_diag_l100",
      "time_empty_like",
      "time_array_l1",
      "time_packbits_axis1",
      "time_find_big_list_small_string",
      "time_nonzero",
      "time_array_empty",
      "time_zeros_100",
      "time_hstack_l",
      "time_eye_3000",
      "time_identity_100",
      "time_array_float_l1000_dtype",
      "time_array_int_l1000",
      "time_isalpha_small_list_big_string",
      "time_empty_100",
      "time_unpackbits_axis0",
      "time_dstack_l",
      "time_nonzero_dense",
      "time_tril_indices_500",
      "time_unpackbits_axis1",
      "time_add_big_list_small_string",
      "time_unpackbits",
      "time_can_cast_same_kind",
      "time_var",
      "time_tril_l10x10",
      "time_diagflat_l50_l50",
      "time_nonzero_sparse",
      "time_max",
      "time_ones_100",
      "time_startswith_small_list_big_string",
      "time_array_l100",
      "time_eye_100",
      "time_convolve",
      "time_mid2",
      "time_min",
      "time_array_float_l1000",
      "time_large2",
      "time_array_l",
      "time_vstack_l",
      "time_sum",
      "time_prod",
      "time_isalpha_big_list_small_string"
    ],
    "class_names": [
      "Nonzero",
      "CorrConv",
      "UnpackBits",
      "Temporaries",
      "Indices",
      "PackBits",
      "NumPyChar",
      "Core",
      "StatsMethods",
      "CountNonzero"
    ],
    "imports": [
      "numpy",
      "common",
      "Benchmark"
    ]
  },
  "github_extracted/numpy_numpy/__init__.py": {
    "variables": [
      "count",
      "info",
      "lock_path",
      "f",
      "_ppid",
      "ppid"
    ],
    "function_params": [
      "lock_on_count",
      "lock_name"
    ],
    "function_names": [
      "dirty_lock",
      "show_cpu_features"
    ],
    "class_names": [],
    "imports": [
      "numpy.lib._utils_impl",
      "sys",
      "common",
      "os",
      "_opt_info"
    ]
  },
  "github_extracted/numpy_numpy/bench_lib.py": {
    "variables": [
      "params",
      "n_nan",
      "param_names",
      "base_array",
      "rnd",
      "nan_indices"
    ],
    "function_params": [
      "shape",
      "size",
      "mode",
      "pad_width",
      "highest_element",
      "self",
      "array_size",
      "percent_nans"
    ],
    "function_names": [
      "time_pad",
      "time_nancumsum",
      "setup",
      "time_nanpercentile",
      "time_nanquantile",
      "time_nanmax",
      "time_unique_counts",
      "time_nanmean",
      "time_nansum",
      "time_nanstd",
      "time_unique_inverse",
      "time_unique_all",
      "time_isin",
      "time_nanvar",
      "time_nanmin",
      "time_nancumprod",
      "time_nanmedian",
      "time_unique_values",
      "time_nanargmin",
      "time_nanargmax",
      "time_nanprod"
    ],
    "class_names": [
      "Unique",
      "Nan",
      "Isin",
      "Pad"
    ],
    "imports": [
      "numpy",
      "common",
      "Benchmark"
    ]
  },
  "github_extracted/numpy_numpy/bench_ma.py": {
    "variables": [
      "param_names",
      "unmasked",
      "mode_parts",
      "yl",
      "fun",
      "m1",
      "masked",
      "mdat",
      "masky",
      "normal",
      "ys",
      "args",
      "x",
      "params",
      "rng",
      "prop_mask",
      "xl",
      "promote",
      "data",
      "base",
      "m2",
      "xs",
      "maskx"
    ],
    "function_params": [
      "func",
      "size",
      "b_masked",
      "ndim",
      "a_masked",
      "msize",
      "mode",
      "margs",
      "self",
      "method",
      "mtype",
      "mask",
      "data",
      "mset",
      "n",
      "masked"
    ],
    "function_names": [
      "time_methods_setitem",
      "time_methods_getitem",
      "time_2d",
      "setup",
      "time_functions_1v",
      "time_where",
      "time_cov",
      "time_scalar_1d",
      "time_0d",
      "time_functions_2v",
      "time_scalar",
      "time_ma_creations",
      "time_1d",
      "time_masked_array",
      "time_corrcoef",
      "time_masked_array_l100_t100",
      "time_masked_array_l100",
      "time_methods_0v",
      "time_it"
    ],
    "class_names": [
      "MA",
      "MAFunctions2v",
      "MAFunctions1v",
      "Indexing",
      "MAMethodSetItem",
      "Concatenate",
      "MAMethod0v",
      "Cov",
      "MAMethodGetItem",
      "UFunc",
      "MACreation",
      "Corrcoef",
      "Where"
    ],
    "imports": [
      "numpy",
      "common",
      "Benchmark"
    ]
  },
  "github_extracted/PaddlePaddle_PaddleOCR/base_dataset.py": {
    "variables": [
      "aug",
      "v",
      "item_keys",
      "item",
      "im",
      "data_dict",
      "cls",
      "k",
      "data",
      "args"
    ],
    "function_params": [
      "transform",
      "index",
      "img_mode",
      "ignore_tags",
      "filter_keys",
      "pre_processes",
      "self",
      "data",
      "data_path",
      "target_transform"
    ],
    "function_names": [
      "apply_pre_processes",
      "__init__",
      "load_data",
      "__len__",
      "__getitem__",
      "_init_pre_processes"
    ],
    "class_names": [
      "BaseDataSet"
    ],
    "imports": [
      "Dataset",
      "copy",
      "paddle.io",
      "*",
      "data_loader.modules"
    ]
  },
  "github_extracted/PaddlePaddle_PaddleOCR/DBHead.py": {
    "variables": [
      "binary_maps",
      "y",
      "shrink_maps",
      "in_channels",
      "module_list",
      "threshold_maps",
      "inter_out_channels"
    ],
    "function_params": [
      "y",
      "in_channels",
      "bias",
      "serial",
      "smooth",
      "out_channels",
      "k",
      "inner_channels",
      "self",
      "x"
    ],
    "function_names": [
      "__init__",
      "_init_upsample",
      "forward",
      "step_function",
      "_init_thresh"
    ],
    "class_names": [
      "DBHead"
    ],
    "imports": [
      "paddle",
      "nn",
      "ParamAttr"
    ]
  },
  "github_extracted/PaddlePaddle_PaddleOCR/basic.py": {
    "variables": [
      "x"
    ],
    "function_params": [
      "inplace",
      "in_channels",
      "bias",
      "padding",
      "padding_mode",
      "x",
      "out_channels",
      "self",
      "groups",
      "dilation",
      "stride",
      "kernel_size"
    ],
    "function_names": [
      "forward",
      "__init__"
    ],
    "class_names": [
      "ConvBnRelu"
    ],
    "imports": [
      "paddle",
      "nn"
    ]
  },
  "github_extracted/PaddlePaddle_PaddleOCR/make_shrink_map.py": {
    "variables": [
      "image",
      "cx",
      "polygon_shape",
      "w",
      "distance",
      "gt",
      "width",
      "i",
      "points",
      "offset",
      "shrunk",
      "height",
      "subject",
      "cy",
      "ignore_tags",
      "bounding_box",
      "poly",
      "shrink_func_dict",
      "text_polys",
      "polygon",
      "h",
      "area",
      "expanded",
      "l",
      "b",
      "a",
      "mask",
      "padding"
    ],
    "function_params": [
      "w",
      "shrink_ratio",
      "ignore_tags",
      "min_text_size",
      "polygons",
      "self",
      "data",
      "polygon",
      "shrink_type",
      "h"
    ],
    "function_names": [
      "__init__",
      "shrink_polygon_pyclipper",
      "shrink_polygon_py",
      "polygon_area",
      "__call__",
      "validate_polygons"
    ],
    "class_names": [
      "MakeShrinkMap"
    ],
    "imports": [
      "numpy",
      "Polygon",
      "pyclipper",
      "shapely.geometry",
      "cv2"
    ]
  },
  "github_extracted/PaddlePaddle_PaddleOCR/dataset.py": {
    "variables": [
      "language_list",
      "t_data_list",
      "gt",
      "label_path",
      "targets",
      "transcripts",
      "_",
      "boxes",
      "line",
      "numOfWords",
      "illegibility_list",
      "char_annotation",
      "x",
      "params",
      "wordBBoxes",
      "label",
      "imageName",
      "text_polys",
      "polygons",
      "img_path",
      "ignores",
      "data",
      "data_list",
      "box",
      "path",
      "item",
      "word",
      "f",
      "content",
      "texts",
      "annotation"
    ],
    "function_params": [
      "transform",
      "img_mode",
      "ignore_tags",
      "filter_keys",
      "label_path",
      "pre_processes",
      "self",
      "data_path"
    ],
    "function_names": [
      "__init__",
      "load_data",
      "_get_annotation"
    ],
    "class_names": [
      "DetDataset",
      "ICDAR2015Dataset",
      "SynthTextDataset"
    ],
    "imports": [
      "numpy",
      "pathlib",
      "load",
      "order_points_clockwise",
      "expand_polygon",
      "tqdm.auto",
      "BaseDataSet",
      "get_datalist",
      "base",
      "scipy.io",
      "tqdm",
      "os",
      "utils",
      "cv2"
    ]
  },
  "github_extracted/PaddlePaddle_PaddleOCR/iaa_augment.py": {
    "variables": [
      "image",
      "v",
      "shape",
      "aug",
      "line_polys",
      "keypoints",
      "value",
      "poly",
      "cls",
      "p",
      "k",
      "a",
      "new_poly",
      "data",
      "sequence"
    ],
    "function_params": [
      "augmenter_args",
      "obj",
      "aug",
      "shape",
      "poly",
      "self",
      "img_shape",
      "data",
      "root",
      "args"
    ],
    "function_names": [
      "build",
      "__init__",
      "may_augment_annotation",
      "to_tuple_if_list",
      "may_augment_poly",
      "__call__"
    ],
    "class_names": [
      "AugmenterBuilder",
      "IaaAugment"
    ],
    "imports": [
      "numpy",
      "imgaug",
      "imgaug.augmenters"
    ]
  },
  "github_extracted/PaddlePaddle_PaddleOCR/DB_loss.py": {
    "variables": [
      "binary_maps",
      "loss_threshold_maps",
      "metrics",
      "shrink_maps",
      "loss_shrink_maps",
      "loss_all",
      "threshold_maps",
      "loss_binary_maps"
    ],
    "function_params": [
      "beta",
      "alpha",
      "pred",
      "eps",
      "self",
      "ohem_ratio",
      "batch",
      "reduction"
    ],
    "function_names": [
      "forward",
      "__init__"
    ],
    "class_names": [
      "DBLoss"
    ],
    "imports": [
      "DiceLoss",
      "BalanceCrossEntropyLoss",
      "paddle",
      "models.losses.basic_loss",
      "MaskL1Loss"
    ]
  },
  "github_extracted/PaddlePaddle_PaddleOCR/augment.py": {
    "variables": [
      "scale",
      "new_height",
      "size",
      "c",
      "flip_text_polys",
      "w",
      "max_h",
      "point2",
      "rd_scale",
      "new_width",
      "rot_text_polys",
      "angle",
      "width",
      "point4",
      "_",
      "nh",
      "rot_mat",
      "height",
      "max_w",
      "w_scale",
      "point1",
      "text_polys",
      "rot_img",
      "bbox",
      "im_padded",
      "h",
      "h_scale",
      "short_edge",
      "flip_im",
      "degrees",
      "im",
      "nw",
      "resized_img",
      "point3",
      "rot_move",
      "tmp_text_polys",
      "rangle"
    ],
    "function_params": [
      "same_size",
      "size",
      "degrees",
      "scales",
      "self",
      "keep_ratio",
      "short_size",
      "data",
      "img",
      "resize_text_polys",
      "random_rate"
    ],
    "function_names": [
      "__call__",
      "resize_image",
      "__init__"
    ],
    "class_names": [
      "RandomResize",
      "ResizeShortSize",
      "VerticalFlip",
      "RandomScale",
      "HorizontalFlip",
      "RandomRotateImgBox",
      "RandomNoise"
    ],
    "imports": [
      "numpy",
      "math",
      "random",
      "skimage.util",
      "random_noise",
      "cv2",
      "numbers"
    ]
  },
  "github_extracted/PaddlePaddle_PaddleOCR/resnet.py": {
    "variables": [
      "torch_patams",
      "y",
      "__all__",
      "out",
      "BatchNorm2d",
      "residual",
      "new_shape",
      "x3",
      "i",
      "offset",
      "x5",
      "deformable_groups",
      "x4",
      "x",
      "x2",
      "m",
      "layers",
      "fc_names",
      "flag",
      "u",
      "paddle_params",
      "offset_channels",
      "downsample",
      "net",
      "model",
      "model_urls",
      "key",
      "expansion",
      "torch_value"
    ],
    "function_params": [
      "torch_patams",
      "blocks",
      "planes",
      "out_planes",
      "dcn",
      "bias",
      "stride",
      "x",
      "model_name",
      "constant",
      "inplanes",
      "module",
      "layers",
      "pretrained",
      "paddle_model",
      "self",
      "downsample",
      "model",
      "in_channels",
      "block",
      "in_planes"
    ],
    "function_names": [
      "resnet101",
      "__init__",
      "constant_init",
      "resnet34",
      "load_torch_params",
      "_make_layer",
      "resnet152",
      "forward",
      "resnet50",
      "load_models",
      "conv3x3",
      "deformable_resnet50",
      "resnet18",
      "deformable_resnet18"
    ],
    "class_names": [
      "ResNet",
      "Bottleneck",
      "BasicBlock"
    ],
    "imports": [
      "math",
      "DeformConv2D",
      "paddle",
      "nn",
      "torch.utils.model_zoo",
      "paddle.vision.ops"
    ]
  },
  "github_extracted/PaddlePaddle_PaddleOCR/random_crop_data.py": {
    "variables": [
      "scale",
      "crop_w",
      "selected_values",
      "maxx",
      "tw",
      "w_regions",
      "br",
      "scale_h",
      "ignore_tags_crop",
      "padimg",
      "w",
      "h_regions",
      "xmax",
      "tag",
      "w_array",
      "ymin",
      "axis",
      "crop_x",
      "i",
      "points",
      "_",
      "num_poly_in_rect",
      "th",
      "ymax",
      "tl",
      "region",
      "min_axis",
      "xx",
      "w_axis",
      "regions",
      "xmin",
      "selected_index",
      "h_array",
      "ignore_tags",
      "j",
      "poly",
      "text_polys",
      "miny",
      "idx",
      "crop_y",
      "text_polys_crop",
      "maxy",
      "h",
      "index",
      "all_care_polys",
      "im",
      "scale_w",
      "texts_crop",
      "h_axis",
      "imgs",
      "crop_h",
      "texts",
      "text",
      "img",
      "minx"
    ],
    "function_params": [
      "regions",
      "size",
      "require_original_image",
      "y",
      "axis",
      "im",
      "poly",
      "text_polys",
      "min_crop_side_ratio",
      "self",
      "max_size",
      "keep_ratio",
      "max_tries",
      "data",
      "w",
      "h",
      "x"
    ],
    "function_names": [
      "region_wise_random_select",
      "__init__",
      "crop_area",
      "is_poly_outside_rect",
      "split_regions",
      "is_poly_in_rect",
      "__call__",
      "random_select"
    ],
    "class_names": [
      "EastRandomCropData",
      "PSERandomCrop"
    ],
    "imports": [
      "numpy",
      "cv2",
      "random"
    ]
  },
  "github_extracted/PaddlePaddle_PaddleOCR/__init__.py": {
    "variables": [
      "__all__",
      "loss_type",
      "criterion",
      "support_loss",
      "copy_config"
    ],
    "function_params": [
      "config"
    ],
    "function_names": [
      "build_loss"
    ],
    "class_names": [],
    "imports": [
      "DB_loss",
      "copy",
      "DBLoss"
    ]
  },
  "github_extracted/PaddlePaddle_PaddleOCR/base_trainer.py": {
    "variables": [
      "epoch",
      "model",
      "support_to_static",
      "filename",
      "checkpoint",
      "t",
      "state_dict",
      "k",
      "state",
      "specs",
      "module_name",
      "module_args"
    ],
    "function_params": [
      "checkpoint_path",
      "epoch",
      "name",
      "model",
      "metric_cls",
      "config",
      "file_name",
      "module",
      "s",
      "criterion",
      "post_process",
      "self",
      "batch_img",
      "resume",
      "validate_loader",
      "train_loader"
    ],
    "function_names": [
      "__init__",
      "_initialize",
      "_initialize_scheduler",
      "_on_train_finish",
      "inverse_normalize",
      "train",
      "_train_epoch",
      "_load_checkpoint",
      "_on_epoch_finish",
      "_eval",
      "_initialize_optimizer",
      "apply_to_static",
      "logger_info",
      "_save_checkpoint"
    ],
    "class_names": [
      "BaseTrainer"
    ],
    "imports": [
      "numpy",
      "paddle.static",
      "pathlib",
      "LogWriter",
      "InputSpec",
      "setup_logger",
      "shutil",
      "paddle",
      "visualdl",
      "anyconfig",
      "random",
      "to_static",
      "paddle.jit",
      "pformat",
      "pprint",
      "os",
      "utils"
    ]
  },
  "github_extracted/PaddlePaddle_PaddleOCR/basic_loss.py": {
    "variables": [
      "pred",
      "negative_loss",
      "gt",
      "balance_loss",
      "negative_count",
      "loss",
      "positive",
      "positive_count",
      "positive_loss",
      "negative",
      "_",
      "intersection",
      "union",
      "mask"
    ],
    "function_params": [
      "pred",
      "eps",
      "gt",
      "return_origin",
      "negative_ratio",
      "weights",
      "self",
      "mask"
    ],
    "function_names": [
      "forward",
      "__init__",
      "_compute"
    ],
    "class_names": [
      "DiceLoss",
      "BalanceCrossEntropyLoss",
      "MaskL1Loss"
    ],
    "imports": [
      "paddle",
      "paddle.nn"
    ]
  },
  "github_extracted/PaddlePaddle_PaddleOCR/make_border_map.py": {
    "variables": [
      "square_distance",
      "polygon_shape",
      "xmax",
      "ymax_valid",
      "distance",
      "ymin",
      "absolute_distance",
      "width",
      "ex_point_2",
      "i",
      "distance_map",
      "ymin_valid",
      "ys",
      "ymax",
      "subject",
      "height",
      "result",
      "square_distance_2",
      "padded_polygon",
      "xmin",
      "ignore_tags",
      "xmin_valid",
      "square_sin",
      "j",
      "text_polys",
      "ex_point_1",
      "polygon",
      "square_distance_1",
      "cosin",
      "canvas",
      "l",
      "im",
      "xmax_valid",
      "mask",
      "xs",
      "padding"
    ],
    "function_params": [
      "point_2",
      "canvas",
      "shrink_ratio",
      "ys",
      "result",
      "self",
      "point_1",
      "mask",
      "xs",
      "data",
      "polygon",
      "thresh_max",
      "thresh_min"
    ],
    "function_names": [
      "distance",
      "draw_border_map",
      "__init__",
      "extend_line",
      "__call__"
    ],
    "class_names": [
      "MakeBorderMap"
    ],
    "imports": [
      "numpy",
      "Polygon",
      "pyclipper",
      "shapely.geometry",
      "cv2"
    ]
  },
  "github_extracted/psf_requests/cookies.py": {
    "variables": [
      "c",
      "name",
      "domains",
      "cookie",
      "paths",
      "res",
      "clearables",
      "parsed",
      "toReturn",
      "names_from_jar",
      "new_cj",
      "expires",
      "result",
      "domain",
      "dictionary",
      "req",
      "new_jar",
      "time_template",
      "host",
      "cookiejar",
      "path",
      "r",
      "cookie_in_jar",
      "state",
      "badargs"
    ],
    "function_params": [
      "name",
      "cookie",
      "response",
      "other",
      "headers",
      "cookies",
      "jar",
      "domain",
      "val",
      "cookiejar",
      "self",
      "overwrite",
      "request",
      "path",
      "default",
      "cookie_dict",
      "value",
      "morsel",
      "state",
      "key"
    ],
    "function_names": [
      "morsel_to_cookie",
      "update",
      "get_host",
      "extract_cookies_to_jar",
      "_find",
      "merge_cookies",
      "list_domains",
      "get_cookie_header",
      "add_header",
      "__getitem__",
      "cookiejar_from_dict",
      "get_new_headers",
      "has_header",
      "itervalues",
      "iteritems",
      "items",
      "list_paths",
      "__init__",
      "__contains__",
      "add_unredirected_header",
      "__setstate__",
      "get_header",
      "multiple_domains",
      "get",
      "is_unverifiable",
      "get_policy",
      "keys",
      "get_dict",
      "__getstate__",
      "info",
      "get_full_url",
      "__setitem__",
      "values",
      "host",
      "origin_req_host",
      "set",
      "get_origin_req_host",
      "create_cookie",
      "getheaders",
      "get_type",
      "copy",
      "__delitem__",
      "set_cookie",
      "_copy_cookie_jar",
      "remove_cookie_by_name",
      "unverifiable",
      "_find_no_duplicates",
      "iterkeys"
    ],
    "class_names": [
      "MockResponse",
      "CookieConflictError",
      "RequestsCookieJar",
      "MockRequest"
    ],
    "imports": [
      "Morsel",
      "copy",
      "cookielib",
      "to_native_string",
      "calendar",
      "compat",
      "threading",
      "dummy_threading",
      "time",
      "urlparse",
      "MutableMapping",
      "urlunparse",
      "_internal_utils"
    ]
  },
  "github_extracted/psf_requests/certs.py": {
    "variables": [],
    "function_params": [],
    "function_names": [],
    "class_names": [],
    "imports": [
      "certifi",
      "where"
    ]
  },
  "github_extracted/psf_requests/help.py": {
    "variables": [
      "implementation",
      "chardet",
      "cryptography_info",
      "implementation_version",
      "system_ssl",
      "system_ssl_info",
      "pyopenssl",
      "implementation_info",
      "OpenSSL",
      "cryptography",
      "urllib3_info",
      "chardet_info",
      "platform_info",
      "pyopenssl_info",
      "charset_normalizer",
      "charset_normalizer_info",
      "idna_info"
    ],
    "function_params": [],
    "function_names": [
      "_implementation",
      "main",
      "info"
    ],
    "class_names": [],
    "imports": [
      "__version__",
      "idna",
      "chardet",
      "urllib3.contrib",
      "pyopenssl",
      "cryptography",
      "OpenSSL",
      "sys",
      "ssl",
      "urllib3",
      "charset_normalizer",
      "platform",
      "json"
    ]
  },
  "github_extracted/psf_requests/packages.py": {
    "variables": [
      "mod",
      "target",
      "package",
      "imported_mod"
    ],
    "function_params": [],
    "function_names": [],
    "class_names": [],
    "imports": [
      "compat",
      "sys",
      "chardet"
    ]
  },
  "github_extracted/psf_requests/api.py": {
    "variables": [
      "session"
    ],
    "function_params": [
      "params",
      "method",
      "url",
      "data",
      "json"
    ],
    "function_names": [
      "patch",
      "delete",
      "put",
      "options",
      "post",
      "get",
      "request",
      "head"
    ],
    "class_names": [],
    "imports": [
      "sessions"
    ]
  },
  "github_extracted/psf_requests/auth.py": {
    "variables": [
      "s_auth",
      "_algorithm",
      "realm",
      "authstr",
      "qop",
      "password",
      "username",
      "A1",
      "algorithm",
      "hash_utf8",
      "s",
      "ncvalue",
      "_r",
      "pat",
      "x",
      "HA2",
      "opaque",
      "A2",
      "noncebit",
      "respdig",
      "base",
      "CONTENT_TYPE_MULTI_PART",
      "nonce",
      "cnonce",
      "path",
      "KD",
      "prep",
      "p_parsed",
      "HA1",
      "entdig",
      "CONTENT_TYPE_FORM_URLENCODED"
    ],
    "function_params": [
      "username",
      "other",
      "r",
      "self",
      "method",
      "url",
      "password",
      "x"
    ],
    "function_names": [
      "md5_utf8",
      "__init__",
      "sha_utf8",
      "_basic_auth_str",
      "__ne__",
      "sha256_utf8",
      "handle_redirect",
      "sha512_utf8",
      "build_digest_header",
      "handle_401",
      "__call__",
      "__eq__",
      "init_per_thread_state"
    ],
    "class_names": [
      "AuthBase",
      "HTTPProxyAuth",
      "HTTPBasicAuth",
      "HTTPDigestAuth"
    ],
    "imports": [
      "cookies",
      "to_native_string",
      "parse_dict_header",
      "extract_cookies_to_jar",
      "compat",
      "threading",
      "base64",
      "time",
      "b64encode",
      "basestring",
      "warnings",
      "re",
      "hashlib",
      "urlparse",
      "os",
      "str",
      "utils",
      "_internal_utils"
    ]
  },
  "github_extracted/psf_requests/compat.py": {
    "variables": [
      "_ver",
      "chardet",
      "has_simplejson",
      "is_urllib3_1",
      "builtin_str",
      "is_py3",
      "numeric_types",
      "is_py2",
      "basestring",
      "integer_types",
      "str",
      "lib",
      "bytes"
    ],
    "function_params": [],
    "function_names": [
      "_resolve_char_detection"
    ],
    "class_names": [],
    "imports": [
      "JSONDecodeError",
      "StringIO",
      "urllib.parse",
      "getproxies",
      "Callable",
      "quote",
      "urlparse",
      "json",
      "proxy_bypass",
      "collections",
      "http",
      "urldefrag",
      "importlib",
      "urljoin",
      "simplejson",
      "urllib.request",
      "sys",
      "quote_plus",
      "proxy_bypass_environment",
      "collections.abc",
      "MutableMapping",
      "OrderedDict",
      "Morsel",
      "__version__",
      "http.cookies",
      "parse_http_list",
      "urlsplit",
      "unquote_plus",
      "getproxies_environment",
      "io",
      "cookiejar",
      "Mapping",
      "urlunparse",
      "unquote",
      "urllib3",
      "urlencode"
    ]
  },
  "github_extracted/psf_requests/_internal_utils.py": {
    "variables": [
      "HEADER_VALIDATORS",
      "_HEADER_VALIDATORS_STR",
      "out",
      "_HEADER_VALIDATORS_BYTE",
      "_VALID_HEADER_NAME_RE_BYTE",
      "_VALID_HEADER_VALUE_RE_STR",
      "_VALID_HEADER_NAME_RE_STR",
      "_VALID_HEADER_VALUE_RE_BYTE"
    ],
    "function_params": [
      "string",
      "encoding",
      "u_string"
    ],
    "function_names": [
      "unicode_is_ascii",
      "to_native_string"
    ],
    "class_names": [],
    "imports": [
      "re",
      "compat",
      "builtin_str"
    ]
  },
  "github_extracted/psf_requests/adapters.py": {
    "variables": [
      "DEFAULT_RETRIES",
      "proxy_headers",
      "using_socks_proxy",
      "password",
      "response",
      "chunked",
      "cert_reqs",
      "username",
      "should_use_default_ssl_context",
      "port",
      "_preloaded_ssl_context",
      "headers",
      "DEFAULT_POOL_TIMEOUT",
      "has_poolmanager_ssl_context",
      "proxy_url",
      "parsed",
      "proxy_scheme",
      "DEFAULT_POOLSIZE",
      "conn",
      "scheme",
      "resp",
      "__attrs__",
      "pool_kwargs",
      "is_proxied_http_request",
      "proxy",
      "poolmanager_kwargs",
      "url",
      "connect",
      "cert_loc",
      "parsed_request_url",
      "DEFAULT_POOLBLOCK",
      "timeout",
      "host_params",
      "value",
      "proxy_manager",
      "manager",
      "attr",
      "read"
    ],
    "function_params": [
      "pool_connections",
      "client_cert",
      "max_retries",
      "stream",
      "poolmanager",
      "conn",
      "resp",
      "pool_maxsize",
      "req",
      "maxsize",
      "pool_block",
      "proxy",
      "proxies",
      "self",
      "url",
      "request",
      "timeout",
      "cert",
      "verify",
      "block",
      "state",
      "connections"
    ],
    "function_names": [
      "send",
      "__getstate__",
      "add_headers",
      "__init__",
      "SOCKSProxyManager",
      "__setstate__",
      "build_response",
      "get_connection_with_tls_context",
      "request_url",
      "close",
      "get_connection",
      "proxy_headers",
      "build_connection_pool_key_attributes",
      "init_poolmanager",
      "cert_verify",
      "proxy_manager_for",
      "_urllib3_request_context"
    ],
    "class_names": [
      "HTTPAdapter",
      "BaseAdapter"
    ],
    "imports": [
      "urllib3.poolmanager",
      "urldefragauth",
      "models",
      "extract_cookies_to_jar",
      "InvalidProxyURL",
      "urlparse",
      "InvalidHeader",
      "InvalidURL",
      "ClosedPoolError",
      "Retry",
      "cookies",
      "auth",
      "MaxRetryError",
      "SSLError",
      "urllib3.util.retry",
      "NewConnectionError",
      "ResponseError",
      "os.path",
      "HTTPError",
      "proxy_from_url",
      "create_urllib3_context",
      "RetryError",
      "socket",
      "structures",
      "extract_zipped_paths",
      "LocationValueError",
      "exceptions",
      "ConnectionError",
      "select_proxy",
      "parse_url",
      "get_auth_from_url",
      "ProtocolError",
      "ReadTimeout",
      "prepend_scheme_if_needed",
      "SOCKSProxyManager",
      "Response",
      "urllib3.contrib.socks",
      "compat",
      "DEFAULT_CA_BUNDLE_PATH",
      "get_encoding_from_headers",
      "basestring",
      "ConnectTimeout",
      "CaseInsensitiveDict",
      "ConnectTimeoutError",
      "InvalidSchema",
      "utils",
      "PoolManager",
      "ProxyError",
      "Timeout",
      "ReadTimeoutError",
      "urllib3.exceptions",
      "urllib3.util",
      "_basic_auth_str",
      "PreparedRequest",
      "typing",
      "urllib3.util.ssl_",
      "ssl",
      "warnings"
    ]
  },
  "github_extracted/psf_requests/hooks.py": {
    "variables": [
      "HOOKS",
      "event",
      "hook_data",
      "hooks",
      "hook",
      "_hook_data"
    ],
    "function_params": [
      "hook_data",
      "hooks",
      "key"
    ],
    "function_names": [
      "default_hooks",
      "dispatch_hook"
    ],
    "class_names": [],
    "imports": []
  },
  "github_extracted/psf_requests/__init__.py": {
    "variables": [
      "charset_normalizer_version",
      "patch",
      "cryptography_version",
      "warning",
      "urllib3_version",
      "major",
      "chardet_version",
      "minor",
      "ssl"
    ],
    "function_params": [
      "charset_normalizer_version",
      "chardet_version",
      "urllib3_version",
      "cryptography_version"
    ],
    "function_names": [
      "_check_cryptography",
      "check_compatibility"
    ],
    "class_names": [],
    "imports": [
      "RequestsDependencyWarning",
      "patch",
      "JSONDecodeError",
      "cryptography",
      "__url__",
      "models",
      "NullHandler",
      "api",
      "urllib3.contrib",
      "sessions",
      "__author_email__",
      "logging",
      "options",
      "codes",
      "status_codes",
      "Session",
      "FileModeWarning",
      "HTTPError",
      "get",
      "charset_normalizer",
      "exceptions",
      "ConnectionError",
      "__version__",
      "ReadTimeout",
      "chardet",
      "delete",
      "__cake__",
      "TooManyRedirects",
      "pyopenssl",
      "Response",
      "__title__",
      "__copyright__",
      "packages",
      "ConnectTimeout",
      "__description__",
      "session",
      "__author__",
      "__license__",
      "utils",
      "head",
      "request",
      "URLRequired",
      "Timeout",
      "urllib3.exceptions",
      "put",
      "Request",
      "post",
      "PreparedRequest",
      "urllib3",
      "ssl",
      "warnings",
      "RequestException",
      "DependencyWarning",
      "__build__"
    ]
  },
  "github_extracted/psf_requests/models.py": {
    "variables": [
      "field",
      "encoding",
      "header",
      "name",
      "length",
      "key",
      "chunk",
      "link",
      "fdata",
      "ITER_CHUNK_SIZE",
      "k",
      "fp",
      "rf",
      "fh",
      "port",
      "vs",
      "v",
      "new_fields",
      "is_stream",
      "headers",
      "reused_chunks",
      "cookie_header",
      "event",
      "ft",
      "files",
      "auth",
      "url_auth",
      "p",
      "http_error_msg",
      "reason",
      "scheme",
      "enc_params",
      "result",
      "__attrs__",
      "params",
      "resolved_links",
      "val",
      "fragment",
      "query",
      "content_type",
      "CONTENT_CHUNK_SIZE",
      "stream_chunks",
      "host",
      "chunks",
      "release_conn",
      "DEFAULT_REDIRECT_LIMIT",
      "links",
      "url",
      "fields",
      "data",
      "fn",
      "h",
      "REDIRECT_STATI",
      "path",
      "r",
      "value",
      "hooks",
      "body",
      "netloc",
      "content",
      "attr",
      "lines",
      "pending"
    ],
    "function_params": [
      "hook",
      "json",
      "headers",
      "event",
      "cookies",
      "files",
      "auth",
      "decode_unicode",
      "params",
      "host",
      "self",
      "delimiter",
      "url",
      "data",
      "chunk_size",
      "hooks",
      "body",
      "method",
      "state"
    ],
    "function_names": [
      "__nonzero__",
      "prepare_body",
      "prepare_content_length",
      "__iter__",
      "apparent_encoding",
      "next",
      "prepare_hooks",
      "__exit__",
      "close",
      "ok",
      "prepare",
      "json",
      "prepare_url",
      "__init__",
      "iter_content",
      "is_permanent_redirect",
      "__setstate__",
      "deregister_hook",
      "generate",
      "__getstate__",
      "prepare_method",
      "register_hook",
      "_get_idna_encoded_host",
      "is_redirect",
      "links",
      "__repr__",
      "iter_lines",
      "path_url",
      "copy",
      "prepare_headers",
      "__bool__",
      "prepare_cookies",
      "_encode_params",
      "prepare_auth",
      "__enter__",
      "content",
      "text",
      "raise_for_status",
      "_encode_files"
    ],
    "class_names": [
      "Response",
      "Request",
      "RequestHooksMixin",
      "PreparedRequest",
      "RequestEncodingMixin"
    ],
    "imports": [
      "JSONDecodeError",
      "default_hooks",
      "idna",
      "builtin_str",
      "StreamConsumedError",
      "LocationParseError",
      "guess_json_utf",
      "RequestField",
      "MissingSchema",
      "Callable",
      "unicode_is_ascii",
      "cookiejar_from_dict",
      "get_cookie_header",
      "guess_filename",
      "json",
      "InvalidURL",
      "cookies",
      "auth",
      "iter_slices",
      "datetime",
      "SSLError",
      "urllib3.fields",
      "ContentDecodingError",
      "status_codes",
      "HTTPError",
      "encode_multipart_formdata",
      "structures",
      "requote_uri",
      "exceptions",
      "ConnectionError",
      "parse_url",
      "get_auth_from_url",
      "ProtocolError",
      "chardet",
      "parse_header_links",
      "check_header_validity",
      "cookielib",
      "urlsplit",
      "to_native_string",
      "io",
      "compat",
      "basestring",
      "encodings.idna",
      "super_len",
      "urllib3.filepost",
      "CaseInsensitiveDict",
      "Mapping",
      "utils",
      "urlunparse",
      "UnsupportedOperation",
      "ReadTimeoutError",
      "urllib3.exceptions",
      "urllib3.util",
      "hooks",
      "_copy_cookie_jar",
      "to_key_val_list",
      "InvalidJSONError",
      "codes",
      "HTTPBasicAuth",
      "urlencode",
      "ChunkedEncodingError",
      "stream_decode_response_unicode",
      "DecodeError",
      "_internal_utils"
    ]
  },
  "github_extracted/psf_requests/sessions.py": {
    "variables": [
      "header",
      "preferred_clock",
      "history",
      "default_port",
      "start",
      "k",
      "changed_port",
      "changed_scheme",
      "location",
      "password",
      "hist",
      "username",
      "v",
      "previous_fragment",
      "merged_setting",
      "none_keys",
      "headers",
      "merged_cookies",
      "cookies",
      "stream",
      "auth",
      "parsed",
      "p",
      "rewindable",
      "scheme",
      "resp",
      "new_proxies",
      "__attrs__",
      "gen",
      "prefix",
      "elapsed",
      "prepared_request",
      "req",
      "new_auth",
      "allow_redirects",
      "proxies",
      "settings",
      "url",
      "new_parsed",
      "send_kwargs",
      "adapter",
      "cert",
      "prep",
      "r",
      "no_proxy",
      "env_proxies",
      "keys_to_move",
      "hooks",
      "value",
      "parsed_rurl",
      "old_parsed",
      "verify",
      "method",
      "state",
      "attr",
      "key",
      "purged_headers"
    ],
    "function_params": [
      "session_setting",
      "response",
      "json",
      "headers",
      "stream",
      "cookies",
      "files",
      "auth",
      "request_setting",
      "resp",
      "old_url",
      "prefix",
      "req",
      "prepared_request",
      "params",
      "session_hooks",
      "allow_redirects",
      "request_hooks",
      "proxies",
      "self",
      "url",
      "data",
      "request",
      "yield_requests",
      "new_url",
      "adapter",
      "dict_class",
      "timeout",
      "cert",
      "hooks",
      "verify",
      "method",
      "state"
    ],
    "function_names": [
      "patch",
      "get_adapter",
      "resolve_redirects",
      "__exit__",
      "close",
      "rebuild_auth",
      "send",
      "__init__",
      "merge_setting",
      "options",
      "__setstate__",
      "merge_environment_settings",
      "rebuild_proxies",
      "mount",
      "get",
      "__getstate__",
      "delete",
      "session",
      "request",
      "should_strip_auth",
      "head",
      "prepare_request",
      "get_redirect_target",
      "merge_hooks",
      "put",
      "post",
      "__enter__",
      "rebuild_method"
    ],
    "class_names": [
      "Session",
      "SessionRedirectMixin"
    ],
    "imports": [
      "default_hooks",
      "DEFAULT_PORTS",
      "models",
      "extract_cookies_to_jar",
      "merge_cookies",
      "cookiejar_from_dict",
      "urlparse",
      "HTTPAdapter",
      "rewind_body",
      "collections",
      "get_netrc_auth",
      "cookies",
      "auth",
      "urljoin",
      "datetime",
      "timedelta",
      "ContentDecodingError",
      "status_codes",
      "sys",
      "structures",
      "default_headers",
      "exceptions",
      "OrderedDict",
      "requote_uri",
      "get_auth_from_url",
      "cookielib",
      "TooManyRedirects",
      "to_native_string",
      "RequestsCookieJar",
      "dispatch_hook",
      "resolve_proxies",
      "should_bypass_proxies",
      "compat",
      "DEFAULT_REDIRECT_LIMIT",
      "time",
      "CaseInsensitiveDict",
      "Mapping",
      "os",
      "InvalidSchema",
      "utils",
      "get_environ_proxies",
      "REDIRECT_STATI",
      "_basic_auth_str",
      "hooks",
      "Request",
      "adapters",
      "PreparedRequest",
      "to_key_val_list",
      "codes",
      "ChunkedEncodingError",
      "_internal_utils"
    ]
  },
  "github_extracted/psf_requests/conf.py": {
    "variables": [
      "html_theme",
      "add_function_parentheses",
      "extensions",
      "exclude_patterns",
      "htmlhelp_basename",
      "epub_author",
      "html_show_sphinx",
      "todo_include_todos",
      "language",
      "html_sidebars",
      "html_show_copyright",
      "copyright",
      "templates_path",
      "epub_publisher",
      "intersphinx_mapping",
      "epub_title",
      "html_show_sourcelink",
      "epub_copyright",
      "texinfo_documents",
      "project",
      "man_pages",
      "version",
      "author",
      "master_doc",
      "latex_documents",
      "latex_elements",
      "pygments_style",
      "release",
      "add_module_names",
      "epub_exclude_files",
      "html_use_smartypants",
      "source_suffix",
      "html_theme_options",
      "html_static_path"
    ],
    "function_params": [],
    "function_names": [],
    "class_names": [],
    "imports": [
      "sys",
      "os",
      "requests"
    ]
  },
  "github_extracted/psf_requests/exceptions.py": {
    "variables": [
      "response"
    ],
    "function_params": [
      "self"
    ],
    "function_names": [
      "__init__",
      "__reduce__"
    ],
    "class_names": [
      "RequestsDependencyWarning",
      "JSONDecodeError",
      "StreamConsumedError",
      "InvalidProxyURL",
      "MissingSchema",
      "InvalidHeader",
      "InvalidURL",
      "SSLError",
      "ContentDecodingError",
      "RetryError",
      "HTTPError",
      "FileModeWarning",
      "ConnectionError",
      "ReadTimeout",
      "TooManyRedirects",
      "ConnectTimeout",
      "InvalidSchema",
      "UnrewindableBodyError",
      "URLRequired",
      "ProxyError",
      "Timeout",
      "RequestsWarning",
      "InvalidJSONError",
      "RequestException",
      "ChunkedEncodingError"
    ],
    "imports": [
      "urllib3.exceptions",
      "compat",
      "JSONDecodeError",
      "HTTPError"
    ]
  },
  "github_extracted/psf_requests/setup.py": {
    "variables": [
      "REQUIRED_PYTHON",
      "here",
      "f",
      "about",
      "test_requirements",
      "requires",
      "readme",
      "CURRENT_PYTHON"
    ],
    "function_params": [],
    "function_names": [],
    "class_names": [],
    "imports": [
      "open",
      "sys",
      "setup",
      "codecs",
      "os",
      "setuptools"
    ]
  },
  "github_extracted/psf_requests/structures.py": {
    "variables": [
      "other",
      "mappedvalue",
      "lowerkey",
      "casedkey",
      "keyval",
      "data"
    ],
    "function_params": [
      "other",
      "name",
      "default",
      "value",
      "self",
      "key",
      "data"
    ],
    "function_names": [
      "get",
      "copy",
      "__init__",
      "__delitem__",
      "__setitem__",
      "__iter__",
      "lower_items",
      "__eq__",
      "__len__",
      "__repr__",
      "__getitem__"
    ],
    "class_names": [
      "CaseInsensitiveDict",
      "LookupDict"
    ],
    "imports": [
      "collections",
      "compat",
      "Mapping",
      "MutableMapping",
      "OrderedDict"
    ]
  },
  "github_extracted/psf_requests/__version__.py": {
    "variables": [
      "__version__",
      "__cake__",
      "__author_email__",
      "__url__",
      "__title__",
      "__copyright__",
      "__description__",
      "__author__",
      "__license__",
      "__build__"
    ],
    "function_params": [],
    "function_names": [],
    "class_names": [],
    "imports": []
  },
  "github_extracted/psf_requests/status_codes.py": {
    "variables": [
      "title",
      "code",
      "__doc__",
      "names",
      "titles",
      "_codes",
      "codes",
      "n"
    ],
    "function_params": [
      "code"
    ],
    "function_names": [
      "_init",
      "doc"
    ],
    "class_names": [],
    "imports": [
      "structures",
      "LookupDict"
    ]
  },
  "github_extracted/psf_requests/flask_theme_support.py": {
    "variables": [
      "default_style",
      "styles",
      "background_color"
    ],
    "function_params": [],
    "function_names": [],
    "class_names": [
      "FlaskyStyle"
    ],
    "imports": [
      "Other",
      "Style",
      "Operator",
      "Punctuation",
      "Whitespace",
      "Literal",
      "pygments.style",
      "Name",
      "Generic",
      "Comment",
      "String",
      "pygments.token",
      "Error",
      "Keyword",
      "Number"
    ]
  },
  "github_extracted/open-mmlab_mmdetection/ade20k_instance.py": {
    "variables": [
      "backend_args",
      "dataset_type",
      "data_root",
      "test_dataloader",
      "test_evaluator",
      "val_dataloader",
      "val_evaluator",
      "test_pipeline"
    ],
    "function_params": [],
    "function_names": [],
    "class_names": [],
    "imports": []
  },
  "github_extracted/open-mmlab_mmdetection/benchmark_inference_fps.py": {
    "variables": [
      "table",
      "model_info",
      "name",
      "fps",
      "model_infos",
      "fps_list",
      "ms_times_pre_image_str",
      "times_pre_image_list",
      "mean_fps",
      "checkpoint",
      "fps_str",
      "cfg",
      "is_multiple_results",
      "s",
      "ms_times_pre_image",
      "args",
      "config",
      "record_metrics",
      "cfg_name",
      "result_dict",
      "fps_",
      "cfg_path",
      "value",
      "parser",
      "table_data",
      "model_key",
      "mean_times_pre_image"
    ],
    "function_params": [
      "result_dict"
    ],
    "function_names": [
      "results2markdown",
      "parse_args"
    ],
    "class_names": [],
    "imports": [
      "init_dist",
      "tools.analysis_tools.benchmark",
      "terminaltables",
      "mmengine.fileio",
      "Config",
      "repeat_measure_inference_speed",
      "mmengine.dist",
      "mmengine.config",
      "GithubFlavoredMarkdownTable",
      "mkdir_or_exist",
      "os.path",
      "DictAction",
      "mmengine.utils",
      "argparse",
      "os",
      "dump"
    ]
  },
  "github_extracted/open-mmlab_mmdetection/test_init_backbone.py": {
    "variables": [
      "init_flag",
      "name",
      "config_file",
      "checkpoint_layers",
      "checkpoint",
      "init_cfg",
      "repo_dpath",
      "cfg",
      "need_check_cfg",
      "config_dpath",
      "state_dict",
      "config_mod",
      "config_path",
      "prog_bar",
      "config",
      "config_file_name",
      "init_cfg_name",
      "check_cfg_names",
      "model",
      "config_sub_file",
      "value",
      "ignores_folder",
      "ignores_file",
      "config_fpath"
    ],
    "function_params": [
      "fname",
      "config",
      "print_cfg"
    ],
    "function_names": [
      "test_load_pretrained",
      "_check_backbone",
      "_get_config_module",
      "_test_load_pretrained",
      "_get_config_directory",
      "_get_detector_cfg",
      "_traversed_config_file"
    ],
    "class_names": [],
    "imports": [
      "exists",
      "copy",
      "dirname",
      "Config",
      "CheckpointLoader",
      "mmdet.registry",
      "join",
      "mmengine.config",
      "ProgressBar",
      "os.path",
      "pytest",
      "mmengine.runner",
      "mmengine.utils",
      "mmdet",
      "os",
      "MODELS"
    ]
  },
  "github_extracted/open-mmlab_mmdetection/benchmark_train.py": {
    "variables": [
      "model_info",
      "config",
      "model_infos",
      "by_epoch",
      "runner",
      "optim_wrapper",
      "parser",
      "interval",
      "config_name",
      "stop_iter_or_epoch",
      "custom_hooks",
      "fast_stop_hook",
      "logger",
      "model_key",
      "args",
      "cfg",
      "ckpt_hook"
    ],
    "function_params": [
      "config_name",
      "args",
      "logger"
    ],
    "function_names": [
      "fast_train_model",
      "parse_args",
      "main"
    ],
    "class_names": [],
    "imports": [
      "Config",
      "replace_cfg_vals",
      "RUNNERS",
      "mmengine.config",
      "mmengine.runner",
      "mmengine.logging",
      "mmdet.testing",
      "replace_to_ceph",
      "logging",
      "os.path",
      "mmengine.registry",
      "print_log",
      "register_all_modules",
      "argparse",
      "os",
      "MMLogger",
      "DictAction",
      "mmdet.utils",
      "ArgumentParser",
      "Runner"
    ]
  },
  "github_extracted/open-mmlab_mmdetection/gather_train_benchmark_metric.py": {
    "variables": [
      "table",
      "final_results_out",
      "xlrd",
      "sheet_info",
      "filename",
      "total_epochs",
      "cfg",
      "row_num",
      "log_json_path",
      "ckpt_path",
      "model_performance",
      "xlrw",
      "i",
      "result_path",
      "xlutils",
      "total_nrows",
      "root_path",
      "args",
      "performance",
      "metrics_out",
      "config",
      "metric",
      "readbook",
      "result_dict",
      "metrics",
      "sufflx",
      "model_cfgs",
      "final_results",
      "f",
      "parser",
      "config_name",
      "sheet",
      "key"
    ],
    "function_params": [],
    "function_names": [
      "parse_args"
    ],
    "class_names": [],
    "imports": [
      "gather_models",
      "xlrd",
      "dump",
      "copy",
      "mmengine.fileio",
      "Config",
      "mmengine.config",
      "xlutils",
      "mkdir_or_exist",
      "os.path",
      "glob",
      "xlutils.copy",
      "mmengine.utils",
      "argparse",
      "get_final_results"
    ]
  },
  "github_extracted/open-mmlab_mmdetection/cityscapes_detection.py": {
    "variables": [
      "backend_args",
      "dataset_type",
      "data_root",
      "test_dataloader",
      "test_evaluator",
      "val_dataloader",
      "train_dataloader",
      "val_evaluator",
      "test_pipeline",
      "train_pipeline"
    ],
    "function_params": [],
    "function_names": [],
    "class_names": [],
    "imports": []
  },
  "github_extracted/open-mmlab_mmdetection/gather_test_benchmark_metric.py": {
    "variables": [
      "model_info",
      "model_infos",
      "fname",
      "record_metric_key_bk",
      "new_metrics",
      "cfg",
      "log_json_path",
      "new_metric",
      "_",
      "root_path",
      "args",
      "record_metric_key",
      "json_list",
      "metrics_out",
      "config",
      "record_metrics",
      "metric",
      "metric_json_dir",
      "result_dict",
      "metrics",
      "parser",
      "old_metric",
      "config_name",
      "model_key"
    ],
    "function_params": [],
    "function_names": [
      "parse_args"
    ],
    "class_names": [],
    "imports": [
      "load",
      "mmengine.fileio",
      "Config",
      "mmengine.config",
      "mkdir_or_exist",
      "os.path",
      "glob",
      "mmengine.utils",
      "argparse",
      "dump"
    ]
  },
  "github_extracted/open-mmlab_mmdetection/batch_test_list.py": {
    "variables": [
      "faster_rcnn",
      "gfl",
      "yolof",
      "tood",
      "centernet",
      "hrnet",
      "carafe",
      "detectors",
      "sabl",
      "retinanet",
      "yolo",
      "htc",
      "nas_fpn",
      "dyhead",
      "queryinst",
      "solov2",
      "detr",
      "sparse_rcnn",
      "guided_anchoring",
      "nas_fcos",
      "dcn",
      "atss",
      "cascade_rpn",
      "swin",
      "fpg",
      "autoassign",
      "groie",
      "dcnv2",
      "ssd",
      "gn_ws",
      "convnext",
      "solo",
      "cascade_rcnn",
      "pafpn",
      "centripetalnet",
      "gn",
      "resnest",
      "ghm",
      "efficientnet",
      "free_anchor",
      "pvt",
      "scratch",
      "libra_rcnn",
      "vfnet",
      "mask2former",
      "res2net",
      "regnet",
      "fcos",
      "fsaf",
      "mask_rcnn",
      "double_heads",
      "cornernet",
      "instaboost",
      "maskformer",
      "resnet_strikes_back",
      "tridentnet",
      "foveabox",
      "reppoints",
      "grid_rcnn",
      "ddod",
      "paa",
      "panoptic_fpn",
      "rpn",
      "dynamic_rcnn",
      "pisa",
      "yolact",
      "ms_rcnn",
      "yolox",
      "deformable_detr",
      "point_rend",
      "scnet",
      "empirical_attention",
      "gcnet"
    ],
    "function_params": [],
    "function_names": [],
    "class_names": [],
    "imports": []
  },
  "github_extracted/open-mmlab_mmdetection/benchmark_filter.py": {
    "variables": [
      "config",
      "benchmark_type",
      "data_pipeline_root",
      "cfg_root",
      "cfg_dir",
      "configs",
      "f",
      "parser",
      "datasets_root",
      "nn_module_root",
      "benchmark_pool",
      "config_dpath",
      "special_model",
      "basic_arch_root",
      "args",
      "benchmark_configs",
      "cfg",
      "config_path"
    ],
    "function_params": [],
    "function_names": [
      "parse_args",
      "main"
    ],
    "class_names": [],
    "imports": [
      "argparse",
      "os",
      "os.path"
    ]
  },
  "github_extracted/open-mmlab_mmdetection/check_links.py": {
    "variables": [
      "url_regex",
      "name",
      "link",
      "unreachable_results",
      "full_path",
      "http_session",
      "markdown_file",
      "pool",
      "source",
      "results",
      "success",
      "reason",
      "resource_prefix",
      "line",
      "result",
      "args",
      "project_root",
      "result_ok",
      "handle",
      "markdown_files",
      "all_matches",
      "OK_STATUS_CODES",
      "match_tuple",
      "parser",
      "relative_path",
      "match",
      "logger",
      "matches"
    ],
    "function_params": [
      "http_session",
      "match_tuple",
      "logger"
    ],
    "function_names": [
      "check_link",
      "main",
      "check_url",
      "parse_args",
      "check_path"
    ],
    "class_names": [
      "MatchTuple"
    ],
    "imports": [
      "multiprocessing.dummy",
      "pathlib",
      "mmengine.logging",
      "Pool",
      "Optional",
      "logging",
      "NamedTuple",
      "MMLogger",
      "requests",
      "typing",
      "sys",
      "re",
      "argparse",
      "Tuple",
      "os"
    ]
  },
  "github_extracted/open-mmlab_mmdetection/benchmark_options.py": {
    "variables": [
      "model_floating_ranges",
      "default_floating_range",
      "third_part_libs"
    ],
    "function_params": [],
    "function_names": [],
    "class_names": [],
    "imports": []
  },
  "github_extracted/open-mmlab_mmdetection/benchmark_test.py": {
    "variables": [
      "model_info",
      "config",
      "model_infos",
      "runner",
      "parser",
      "checkpoint",
      "config_name",
      "logger",
      "model_key",
      "args",
      "cfg"
    ],
    "function_params": [
      "checkpoint",
      "config_name",
      "args",
      "logger"
    ],
    "function_names": [
      "fast_test_model",
      "parse_args",
      "main"
    ],
    "class_names": [],
    "imports": [
      "Config",
      "replace_cfg_vals",
      "RUNNERS",
      "mmengine.config",
      "mmengine.runner",
      "mmengine.logging",
      "mmdet.testing",
      "replace_to_ceph",
      "logging",
      "os.path",
      "mmengine.registry",
      "register_all_modules",
      "argparse",
      "os",
      "MMLogger",
      "DictAction",
      "mmdet.utils",
      "ArgumentParser",
      "Runner"
    ]
  },
  "github_extracted/open-mmlab_mmdetection/gather_models.py": {
    "variables": [
      "model_info",
      "target_config_path",
      "name",
      "publish_model_infos",
      "final_model_path",
      "model_infos",
      "by_epoch",
      "models",
      "trained_model_path",
      "best_epoch_iter_full_path",
      "checkpoint",
      "model_path",
      "cfg",
      "final_file",
      "latest_exp_name",
      "cfg_folder_name",
      "model_performance",
      "final_model",
      "results",
      "pwc_model_info",
      "publish_model_path",
      "last_metric",
      "dst_times",
      "time_stamp",
      "dataset_name",
      "used_configs",
      "model_publish_dir",
      "models_out",
      "args",
      "used_config",
      "sha",
      "config_path",
      "pwc_files",
      "name_map",
      "best_epoch_or_iter",
      "model_name",
      "dst_time",
      "raw_config",
      "metric",
      "final_epoch_or_iter",
      "latest_exp_json",
      "raw_configs",
      "exp_dir",
      "best_epoch_or_iter_model_path",
      "result_dict",
      "meta_data",
      "epoch",
      "r",
      "model",
      "f",
      "link_string",
      "parser",
      "models_root",
      "key"
    ],
    "function_params": [
      "log_json_path",
      "model_dir",
      "stream",
      "results_lut",
      "config",
      "out_file",
      "by_epoch",
      "model_infos",
      "dumper",
      "exp_dir",
      "epoch_or_iter",
      "data",
      "in_file",
      "Dumper"
    ],
    "function_names": [
      "get_dataset_name",
      "_dict_representer",
      "get_final_epoch_or_iter",
      "get_real_epoch_or_iter",
      "find_last_dir",
      "convert_model_info_to_pwc",
      "main",
      "ordered_yaml_dump",
      "is_by_epoch",
      "process_checkpoint",
      "parse_args",
      "get_final_results",
      "get_best_epoch_or_iter"
    ],
    "class_names": [
      "OrderedDumper"
    ],
    "imports": [
      "mmengine.fileio",
      "Config",
      "digit_version",
      "mmengine.config",
      "mkdir_or_exist",
      "dump",
      "collections",
      "os.path",
      "OrderedDict",
      "time",
      "glob",
      "argparse",
      "os",
      "shutil",
      "torch",
      "yaml",
      "subprocess",
      "mmengine.utils",
      "scandir"
    ]
  },
  "github_extracted/open-mmlab_mmdetection/benchmark_valid_flops.py": {
    "variables": [
      "table",
      "model_info",
      "y",
      "divisor",
      "outputs",
      "data_batch",
      "models",
      "summary_data",
      "k",
      "checkpoint",
      "w",
      "cfg",
      "patterns",
      "pattern",
      "filter_models",
      "MMDET_ROOT",
      "v",
      "tmpdir",
      "data_loader",
      "file_client",
      "console",
      "row",
      "summary",
      "_forward",
      "result",
      "args",
      "http_prefix",
      "x",
      "exists",
      "params",
      "model_name",
      "table_pd",
      "config",
      "input_shape",
      "data",
      "model_index",
      "flops",
      "h",
      "valid",
      "model_index_file",
      "color",
      "root",
      "model",
      "activations",
      "parser",
      "input",
      "logger",
      "table_data",
      "inputs"
    ],
    "function_params": [
      "exp_name",
      "config_file",
      "work_dir",
      "summary_data",
      "checkpoint",
      "args"
    ],
    "function_names": [
      "show_summary",
      "parse_args",
      "inference",
      "main"
    ],
    "class_names": [],
    "imports": [
      "revert_sync_batchnorm",
      "pathlib",
      "load",
      "mmengine.fileio",
      "Config",
      "functools",
      "mmengine.runner",
      "re",
      "Table",
      "mmengine.logging",
      "numpy",
      "collections",
      "mmdet.registry",
      "logging",
      "pandas",
      "rich.table",
      "rich.console",
      "OrderedDict",
      "get_model_complexity_info",
      "modelindex.load_model_index",
      "mmengine.analysis",
      "rich.text",
      "mmengine.analysis.print_helper",
      "Console",
      "register_all_modules",
      "FileClient",
      "_format_size",
      "AccessDeniedError",
      "argparse",
      "MODELS",
      "Path",
      "mmengine.model",
      "tempfile",
      "partial",
      "Text",
      "torch",
      "MMLogger",
      "traceback",
      "DictAction",
      "mmengine",
      "mmdet.utils",
      "ArgumentParser",
      "petrel_client.common.exception",
      "Runner",
      "tqdm"
    ]
  },
  "github_extracted/open-mmlab_mmdetection/convert_train_benchmark_script.py": {
    "variables": [
      "echo_info",
      "work_dir",
      "fname",
      "root_name",
      "commands",
      "gpus_pre_node",
      "cfg",
      "gpus",
      "cpus_pre_task",
      "i",
      "_",
      "args",
      "train_script_name",
      "partition_name",
      "out_suffix",
      "model_cfgs",
      "command_info",
      "command_str",
      "f",
      "parser",
      "out_fname"
    ],
    "function_params": [
      "cfg_name"
    ],
    "function_names": [
      "parse_args",
      "determine_gpus",
      "main"
    ],
    "class_names": [],
    "imports": [
      "argparse",
      "os",
      "os.path"
    ]
  },
  "github_extracted/open-mmlab_mmdetection/benchmark_test_image.py": {
    "variables": [
      "model_info",
      "visualizer_cfg",
      "out_dir",
      "model",
      "model_key",
      "config",
      "out_file",
      "model_infos",
      "parser",
      "checkpoint",
      "config_name",
      "logger",
      "args",
      "img",
      "result",
      "cfg",
      "visualizer"
    ],
    "function_params": [
      "checkpoint",
      "config_name",
      "logger",
      "args",
      "visualizer"
    ],
    "function_names": [
      "parse_args",
      "main",
      "inference_model"
    ],
    "class_names": [],
    "imports": [
      "mmcv",
      "init_detector",
      "inference_detector",
      "Config",
      "mmdet.apis",
      "mmdet.registry",
      "logging",
      "MMLogger",
      "mmengine.config",
      "register_all_modules",
      "mkdir_or_exist",
      "os.path",
      "mmdet.utils",
      "ArgumentParser",
      "mmengine.utils",
      "argparse",
      "mmengine.logging",
      "VISUALIZERS"
    ]
  },
  "github_extracted/open-mmlab_mmdetection/convert_test_benchmark_script.py": {
    "variables": [
      "model_info",
      "echo_info",
      "model_infos",
      "work_dir",
      "fname",
      "checkpoint",
      "commands",
      "job_name",
      "cfg",
      "port",
      "cpus_pre_task",
      "checkpoint_root",
      "_",
      "args",
      "script_name",
      "partition_name",
      "config",
      "model_test_dict",
      "out_suffix",
      "command_info",
      "command_str",
      "f",
      "parser",
      "model_key"
    ],
    "function_params": [
      "model_info",
      "work_dir",
      "commands",
      "partition",
      "model_test_dict",
      "script_name",
      "port"
    ],
    "function_names": [
      "process_model_info",
      "create_test_bash_info",
      "parse_args",
      "main"
    ],
    "class_names": [],
    "imports": [
      "Config",
      "os.path",
      "mmengine",
      "argparse",
      "os"
    ]
  },
  "github_extracted/open-mmlab_mmdetection/download_checkpoints.py": {
    "variables": [
      "model_info",
      "checkpoint_out_list",
      "pool",
      "model",
      "model_infos",
      "out_file",
      "assert_msg",
      "parser",
      "checkpoint",
      "checkpoint_url_list",
      "url",
      "args",
      "cfg"
    ],
    "function_params": [
      "out_file",
      "progress",
      "url",
      "min_bytes"
    ],
    "function_names": [
      "download",
      "parse_args"
    ],
    "class_names": [],
    "imports": [
      "math",
      "Pool",
      "Config",
      "torch",
      "mmengine.config",
      "mkdir_or_exist",
      "os.path",
      "multiprocessing",
      "mmengine.utils",
      "argparse",
      "os"
    ]
  },
  "github_extracted/open-mmlab_mmdetection/ade20k_semantic.py": {
    "variables": [
      "backend_args",
      "dataset_type",
      "data_root",
      "test_dataloader",
      "test_evaluator",
      "val_dataloader",
      "val_evaluator",
      "test_pipeline"
    ],
    "function_params": [],
    "function_names": [],
    "class_names": [],
    "imports": []
  },
  "github_extracted/open-mmlab_mmdetection/ade20k_panoptic.py": {
    "variables": [
      "backend_args",
      "dataset_type",
      "data_root",
      "test_dataloader",
      "test_evaluator",
      "val_dataloader",
      "val_evaluator",
      "test_pipeline"
    ],
    "function_params": [],
    "function_names": [],
    "class_names": [],
    "imports": []
  },
  "github_extracted/hpcaitech_ColossalAI/init_tokenizer.py": {
    "variables": [
      "source_spm_tokens",
      "new_p",
      "target_tokenizer_model_path",
      "item",
      "token",
      "fp_reader",
      "piece",
      "source_spm",
      "p",
      "parser",
      "logger",
      "fp",
      "target_tokenizer",
      "source_sp_processor",
      "line",
      "expand_tokens",
      "args",
      "source_tokenizer"
    ],
    "function_params": [
      "target_tokenizer_dir",
      "source_tokenizer_dir",
      "new_tokens"
    ],
    "function_names": [
      "expand_vocab_tokenizer",
      "main"
    ],
    "class_names": [],
    "imports": [
      "sentencepiece",
      "LlamaTokenizer",
      "transformers.models.llama.tokenization_llama",
      "get_dist_logger",
      "colossalai.logging",
      "List",
      "typing",
      "Union",
      "sentencepiece_model_pb2",
      "argparse",
      "os",
      "json"
    ]
  },
  "github_extracted/hpcaitech_ColossalAI/neftune_patch.py": {
    "variables": [
      "output",
      "embeddings",
      "mag_norm",
      "hook_handle",
      "neftune_hook_handle",
      "dims"
    ],
    "function_params": [
      "output",
      "model",
      "module",
      "neftune_noise_alpha",
      "input",
      "neftune_hook_handle"
    ],
    "function_names": [
      "unwrap",
      "activate_neftune",
      "deactivate_neftune",
      "neftune_post_forward_hook"
    ],
    "class_names": [],
    "imports": [
      "torch"
    ]
  },
  "github_extracted/hpcaitech_ColossalAI/spliced_and_tokenized_dataset.py": {
    "variables": [
      "turns",
      "gpt_eos",
      "sequence_input_ids",
      "start",
      "target_turn_index",
      "seq_labels",
      "labels_decode",
      "end",
      "truncated_label_ids",
      "sequence_labels",
      "prompt",
      "sequence_text",
      "more_data_points",
      "source_length",
      "target_turn",
      "i",
      "_",
      "labels",
      "ends",
      "DSType",
      "from_str",
      "token_id",
      "source_text",
      "truncated_seq_input_ids",
      "spliced_labels",
      "tokenized",
      "buffer",
      "spliced_input_ids",
      "seq_input_ids",
      "starts",
      "z",
      "iterator",
      "mess",
      "template",
      "data_point",
      "spliced_data_point",
      "logger",
      "gpt_bos",
      "target_text",
      "buffer_len",
      "IGNORE_INDEX",
      "is_null_source",
      "ignore_index",
      "messages",
      "examples"
    ],
    "function_params": [
      "shuffle",
      "error_strict",
      "conversation_template",
      "tokenizer",
      "dataset",
      "num_packed_sequences",
      "input_ids_field",
      "labels_field",
      "infinite",
      "data_point",
      "self",
      "fetch_sequence_func",
      "max_length",
      "ignore_index"
    ],
    "function_names": [
      "__init__",
      "supervised_tokenize_sft",
      "supervised_tokenize_pretrain",
      "__iter__",
      "__len__"
    ],
    "class_names": [
      "ClosedToConstantLengthSplicedDataset"
    ],
    "imports": [
      "Conversation",
      "List",
      "dataset_dict",
      "Union",
      "Callable",
      "torch.utils.data",
      "datasets",
      "IterableDataset",
      "colossalai.logging",
      "Any",
      "random",
      "PreTrainedTokenizer",
      "bisect",
      "AutoTokenizer",
      "Iterable",
      "deepcopy",
      "transformers.tokenization_utils",
      "Tuple",
      "LlamaTokenizer",
      "Dataset",
      "copy",
      "transformers.models.llama.tokenization_llama",
      "get_dist_logger",
      "default_conversation",
      "transformers",
      "Dict",
      "typing",
      "ConcatDataset",
      "warnings",
      "conversation"
    ]
  },
  "github_extracted/hpcaitech_ColossalAI/init_model.py": {
    "variables": [
      "source_input_embeddings",
      "output_embeddings",
      "k",
      "target_tokenizer",
      "cpu_device",
      "target_token",
      "source_vocab",
      "v",
      "i",
      "target_to_source_token_ids",
      "args",
      "source_tokenizer",
      "source_output_embeddings",
      "target_to_source_output_embedding",
      "target_to_source_input_embedding",
      "source_model",
      "input_embeddings",
      "gpu_device",
      "parser",
      "logger",
      "target_vocab",
      "target_inverted_vocab"
    ],
    "function_params": [],
    "function_names": [
      "main"
    ],
    "class_names": [],
    "imports": [
      "numpy",
      "LlamaTokenizer",
      "get_dist_logger",
      "colossalai.logging",
      "transformers",
      "LlamaForCausalLM",
      "torch",
      "argparse"
    ]
  },
  "github_extracted/hpcaitech_ColossalAI/conversation.py": {
    "variables": [
      "system",
      "length",
      "roles",
      "y",
      "default_conversation",
      "message",
      "seps",
      "role",
      "LLaMA2_Conv",
      "ADD_BOS_EOS_TOKEN",
      "LLaMA3_Conv",
      "offset",
      "ret",
      "sep_style",
      "messages",
      "x"
    ],
    "function_params": [
      "message",
      "self",
      "length",
      "role"
    ],
    "function_names": [
      "copy",
      "save_prompt",
      "append_message",
      "get_prompt",
      "dict",
      "clear"
    ],
    "class_names": [
      "Conversation",
      "SeparatorStyle"
    ],
    "imports": [
      "Enum",
      "List",
      "auto",
      "dataclasses",
      "enum",
      "typing"
    ]
  },
  "github_extracted/hpcaitech_ColossalAI/loader.py": {
    "variables": [
      "batch_labels",
      "indices",
      "instance",
      "datasets",
      "input_ids",
      "batch_input_ids",
      "labels",
      "attention_mask",
      "to_pad",
      "seq",
      "ds_path",
      "reversed_labels",
      "PathType",
      "DatasetType",
      "tokenizer",
      "max_length",
      "iterator",
      "reversed_input_ids",
      "ds_dict",
      "mode_map",
      "padding",
      "ignore_index",
      "dataset_paths"
    ],
    "function_params": [
      "shuffle",
      "instances",
      "num_replicas",
      "mode",
      "dataset",
      "drop_last",
      "self",
      "start_index",
      "seed",
      "dataset_paths",
      "rank"
    ],
    "function_names": [
      "__init__",
      "__iter__",
      "load_tokenized_dataset",
      "set_start_index",
      "__len__",
      "__call__"
    ],
    "class_names": [
      "DataCollatorForSupervisedDataset",
      "StatefulDistributedSampler"
    ],
    "imports": [
      "load_from_disk",
      "List",
      "dataset_dict",
      "dataclass",
      "dataclasses",
      "Union",
      "torch.utils.data",
      "datasets",
      "Sequence",
      "PreTrainedTokenizer",
      "DistributedSampler",
      "torch.nn.functional",
      "Optional",
      "transformers.tokenization_utils",
      "os",
      "Dataset",
      "Dict",
      "torch",
      "typing",
      "ConcatDataset",
      "Iterator"
    ]
  },
  "github_extracted/hpcaitech_ColossalAI/dummy_dataset.py": {
    "variables": [],
    "function_params": [
      "num_samples",
      "self",
      "idx",
      "vocab_size",
      "max_length"
    ],
    "function_names": [
      "__getitem__",
      "__init__",
      "__len__"
    ],
    "class_names": [
      "RandomDataset"
    ],
    "imports": [
      "Dataset",
      "get_accelerator",
      "torch",
      "torch.utils.data",
      "colossalai.accelerator"
    ]
  },
  "github_extracted/hpcaitech_ColossalAI/generate_release_draft.py": {
    "variables": [
      "COMMIT_API",
      "highlights",
      "token",
      "k",
      "api",
      "commit_info",
      "res",
      "tag",
      "v",
      "headers",
      "last_release_date",
      "results",
      "last_version",
      "author_url",
      "page",
      "resp",
      "line",
      "args",
      "TAGS_API",
      "msg",
      "version",
      "commit_hash",
      "author",
      "data",
      "last_release_commit_info",
      "release_info",
      "last_release_commit",
      "topic",
      "item",
      "f",
      "markdown_text",
      "parser",
      "match",
      "text",
      "pattern"
    ],
    "function_params": [
      "headers",
      "commit_info_list",
      "current_version",
      "last_version",
      "commit_hash",
      "since",
      "release_info"
    ],
    "function_names": [
      "collate_release_info",
      "generate_release_post_markdown",
      "get_all_commit_info",
      "parse_args",
      "get_latest_tag_commit",
      "get_commit_info"
    ],
    "class_names": [],
    "imports": [
      "re",
      "argparse",
      "os",
      "requests"
    ]
  },
  "github_extracted/hpcaitech_ColossalAI/check_dispatch_inputs.py": {
    "variables": [
      "path",
      "is_correct",
      "real_path",
      "parser",
      "name_list",
      "args"
    ],
    "function_params": [
      "input_list"
    ],
    "function_names": [
      "main",
      "check_inputs"
    ],
    "class_names": [],
    "imports": [
      "argparse",
      "os"
    ]
  },
  "github_extracted/hpcaitech_ColossalAI/froze.py": {
    "variables": [
      "params",
      "name"
    ],
    "function_params": [
      "model"
    ],
    "function_names": [
      "unfreeze_parameters",
      "freeze_non_embeds_parameters"
    ],
    "class_names": [],
    "imports": [
      "LlamaForCausalLM",
      "transformers.models.llama"
    ]
  },
  "github_extracted/hpcaitech_ColossalAI/generate_leaderboard_and_send_to_lark.py": {
    "variables": [
      "start_datetime_str",
      "title",
      "merge_datetime",
      "LARK_TENANT_TOKEN",
      "APP_SECRET",
      "issue_pr_engagement_count",
      "repo_list",
      "xlabel",
      "headers",
      "count",
      "contribution_list",
      "ylabel",
      "discussion_number",
      "page",
      "x",
      "issue_response",
      "user_engagement_count",
      "url",
      "comment_response",
      "comment",
      "member_name",
      "item",
      "REPO_LIST",
      "APP_ID",
      "key",
      "edge",
      "name",
      "json_data",
      "author_list",
      "res",
      "stop",
      "now",
      "issue_api",
      "multi_form",
      "discussion",
      "comment_updated_at",
      "discussion_engagement_count",
      "engagement_success",
      "bj_start_datetime",
      "query",
      "user_engagement_image_key",
      "author",
      "fig",
      "counter",
      "message",
      "discussion_numbers",
      "y",
      "edges",
      "reply_edges",
      "bj_start_datetime_str",
      "reply_updated_at",
      "form",
      "comment_api",
      "LARK_WEBHOOK_URL",
      "offset_str",
      "discussion_updated_at",
      "GITHUB_TOKEN",
      "comment_author_relationship",
      "data",
      "CONTRIBUTOR_IMAGE_PATH",
      "cursor",
      "value",
      "reply_edge",
      "pr_data",
      "contributor_image_key",
      "ORG_NAME",
      "start_datetime",
      "response",
      "repo_name",
      "found_discussion_out_of_time_range",
      "reply",
      "total_engagement_count",
      "num_per_request",
      "contrib_success",
      "USER_ENGAGEMENT_IMAGE_PATH",
      "issue_author_relationship",
      "ranking",
      "issue_id",
      "num_commit_list",
      "merged_at"
    ],
    "function_params": [
      "y",
      "title",
      "app_id",
      "app_secret",
      "repo_name",
      "repo_list",
      "xlabel",
      "output_path",
      "ylabel",
      "string",
      "num",
      "discussion_number",
      "image_key",
      "page",
      "lark_tenant_token",
      "org_name",
      "github_token",
      "x",
      "dt",
      "organization_name",
      "query",
      "self",
      "image_path",
      "webhook_url",
      "cursor",
      "counter",
      "item",
      "since",
      "message"
    ],
    "function_names": [
      "_update_count",
      "upload_image_to_lark",
      "get_issue_pull_request_comments",
      "_call_graphql_api",
      "str2datetime",
      "plot_bar_chart",
      "get_organization_repositories",
      "_generate_comment_reply_count_for_discussion",
      "get_discussion_comments",
      "generate_user_engagement_leaderboard_image",
      "datetime2str",
      "send_image_to_lark",
      "_iterate_by_page",
      "send_message_to_lark",
      "generate_lark_tenant_access_token",
      "generate_contributor_leaderboard_image",
      "record",
      "to_sorted_list",
      "_generate_discussion_query",
      "_get_url",
      "get_utc_time_one_week_ago"
    ],
    "class_names": [
      "Counter"
    ],
    "imports": [
      "matplotlib.pyplot",
      "seaborn",
      "Any",
      "List",
      "Dict",
      "datetime",
      "timedelta",
      "typing",
      "requests",
      "requests_toolbelt",
      "pytz",
      "MultipartEncoder",
      "os"
    ]
  },
  "github_extracted/hpcaitech_ColossalAI/ckpt_io.py": {
    "variables": [
      "running_states",
      "save_dir",
      "fp"
    ],
    "function_params": [
      "file_path",
      "booster",
      "epoch",
      "step",
      "model",
      "batch_size",
      "coordinator",
      "save_dir",
      "load_dir",
      "lr_scheduler",
      "data",
      "use_lora",
      "optimizer"
    ],
    "function_names": [
      "save_checkpoint",
      "load_json",
      "save_json",
      "load_checkpoint"
    ],
    "class_names": [],
    "imports": [
      "colossalai.booster",
      "Any",
      "colossalai.cluster",
      "Dict",
      "torch",
      "_LRScheduler",
      "typing",
      "torch.optim.lr_scheduler",
      "Optimizer",
      "Booster",
      "Union",
      "torch.optim.optimizer",
      "DistCoordinator",
      "Tuple",
      "os",
      "json"
    ]
  },
  "github_extracted/hpcaitech_ColossalAI/send_message_to_lark.py": {
    "variables": [
      "data",
      "args",
      "parser"
    ],
    "function_params": [
      "message",
      "webhook_url"
    ],
    "function_names": [
      "parse_args",
      "send_message_to_lark"
    ],
    "class_names": [],
    "imports": [
      "argparse",
      "requests"
    ]
  },
  "github_extracted/hpcaitech_ColossalAI/__init__.py": {
    "variables": [],
    "function_params": [],
    "function_names": [],
    "class_names": [],
    "imports": []
  },
  "github_extracted/hpcaitech_ColossalAI/check_doc_i18n.py": {
    "variables": [
      "i18n_folders",
      "val",
      "item",
      "item_path1",
      "i",
      "parser",
      "match",
      "item_path2",
      "items2",
      "items1",
      "dir1",
      "dir2",
      "args"
    ],
    "function_params": [
      "dir2",
      "dir1"
    ],
    "function_names": [
      "compare_dirs"
    ],
    "class_names": [],
    "imports": [
      "argparse",
      "os"
    ]
  },
  "github_extracted/hpcaitech_ColossalAI/update_setup_for_nightly.py": {
    "variables": [
      "f",
      "package_name",
      "file_lines",
      "version",
      "idx",
      "line"
    ],
    "function_params": [
      "file_lines"
    ],
    "function_names": [
      "replace_nightly_package_info",
      "open_setup_file",
      "write_setup_file",
      "main"
    ],
    "class_names": [],
    "imports": [
      "datetime"
    ]
  },
  "github_extracted/hpcaitech_ColossalAI/check_example_weekly.py": {
    "variables": [
      "contents",
      "file_name",
      "cur_path",
      "file_list",
      "split_loc",
      "all_loc",
      "file_loc",
      "re_loc"
    ],
    "function_params": [
      "sep",
      "path",
      "all_files",
      "input_list"
    ],
    "function_names": [
      "main",
      "join",
      "show_files"
    ],
    "class_names": [],
    "imports": [
      "os"
    ]
  },
  "github_extracted/hpcaitech_ColossalAI/detect_changed_example.py": {
    "variables": [
      "folder_need_check",
      "parser",
      "name_list",
      "loc",
      "args"
    ],
    "function_params": [],
    "function_names": [
      "main"
    ],
    "class_names": [],
    "imports": [
      "argparse"
    ]
  },
  "github_extracted/scikit-learn_scikit-learn/cluster.py": {
    "variables": [
      "params",
      "param_names",
      "init",
      "algorithm",
      "estimator",
      "max_iter",
      "representation",
      "data"
    ],
    "function_params": [
      "params",
      "self"
    ],
    "function_names": [
      "setup_cache",
      "make_estimator",
      "make_scorers",
      "make_data"
    ],
    "class_names": [
      "KMeansBenchmark",
      "MiniBatchKMeansBenchmark"
    ],
    "imports": [
      "_blobs_dataset",
      "Benchmark",
      "Transformer",
      "_20newsgroups_highdim_dataset",
      "utils",
      "Predictor",
      "sklearn.cluster",
      "Estimator",
      "KMeans",
      "neg_mean_inertia",
      "common",
      "MiniBatchKMeans",
      "datasets"
    ]
  },
  "github_extracted/scikit-learn_scikit-learn/bench_glm.py": {
    "variables": [
      "ols",
      "time_ols",
      "time_ridge",
      "ridge",
      "n_features",
      "X",
      "i",
      "n_iter",
      "start",
      "dimensions",
      "time_lasso",
      "lasso",
      "n_samples",
      "Y"
    ],
    "function_params": [],
    "function_names": [],
    "class_names": [],
    "imports": [
      "numpy",
      "matplotlib.pyplot",
      "linear_model",
      "sklearn",
      "datetime"
    ]
  },
  "github_extracted/scikit-learn_scikit-learn/manifold.py": {
    "variables": [
      "params",
      "param_names",
      "estimator",
      "method",
      "n_samples"
    ],
    "function_params": [
      "params",
      "self"
    ],
    "function_names": [
      "setup_cache",
      "make_estimator",
      "make_scorers",
      "make_data"
    ],
    "class_names": [
      "TSNEBenchmark"
    ],
    "imports": [
      "Benchmark",
      "_digits_dataset",
      "Estimator",
      "sklearn.manifold",
      "TSNE",
      "common",
      "datasets"
    ]
  },
  "github_extracted/scikit-learn_scikit-learn/bench_covertype.py": {
    "variables": [
      "std",
      "y_train",
      "y",
      "name",
      "n_train",
      "X",
      "mean",
      "y_test",
      "ESTIMATORS",
      "y_pred",
      "p",
      "args",
      "test_time",
      "estimator_params",
      "estimator",
      "memory",
      "data",
      "time_start",
      "parser",
      "X_test",
      "error",
      "train_time",
      "X_train"
    ],
    "function_params": [
      "dtype",
      "order",
      "random_state"
    ],
    "function_names": [
      "load_data"
    ],
    "class_names": [],
    "imports": [
      "sklearn.tree",
      "fetch_covtype",
      "sklearn.metrics",
      "numpy",
      "get_data_home",
      "sklearn.naive_bayes",
      "sklearn.svm",
      "DecisionTreeClassifier",
      "sklearn.utils",
      "SGDClassifier",
      "LinearSVC",
      "joblib",
      "zero_one_loss",
      "Memory",
      "ExtraTreesClassifier",
      "RandomForestClassifier",
      "time",
      "sklearn.datasets",
      "GaussianNB",
      "argparse",
      "os",
      "sklearn.ensemble",
      "GradientBoostingClassifier",
      "sklearn.linear_model",
      "check_array",
      "LogisticRegression"
    ]
  },
  "github_extracted/scikit-learn_scikit-learn/decomposition.py": {
    "variables": [
      "params",
      "param_names",
      "fit_algorithm",
      "estimator",
      "n_jobs",
      "svd_solver"
    ],
    "function_params": [
      "params",
      "self"
    ],
    "function_names": [
      "setup_cache",
      "make_estimator",
      "make_scorers",
      "make_data"
    ],
    "class_names": [
      "DictionaryLearningBenchmark",
      "PCABenchmark",
      "MiniBatchDictionaryLearningBenchmark"
    ],
    "imports": [
      "_mnist_dataset",
      "Benchmark",
      "Transformer",
      "make_pca_scorers",
      "MiniBatchDictionaryLearning",
      "DictionaryLearning",
      "make_dict_learning_scorers",
      "sklearn.decomposition",
      "utils",
      "Estimator",
      "PCA",
      "_olivetti_faces_dataset",
      "common",
      "datasets"
    ]
  },
  "github_extracted/scikit-learn_scikit-learn/datasets.py": {
    "variables": [
      "y",
      "X_val",
      "coefs",
      "dataset",
      "X",
      "faces",
      "n_features",
      "vectorizer",
      "_",
      "faces_centered",
      "y_val",
      "M",
      "newsgroups",
      "n_samples",
      "svd"
    ],
    "function_params": [
      "density",
      "dtype",
      "n_features",
      "n_classes",
      "representation",
      "n_clusters",
      "ngrams",
      "n_components",
      "n_samples"
    ],
    "function_names": [
      "_mnist_dataset",
      "_synth_regression_dataset",
      "_blobs_dataset",
      "_20newsgroups_highdim_dataset",
      "_synth_classification_dataset",
      "_digits_dataset",
      "_synth_regression_sparse_dataset",
      "_olivetti_faces_dataset",
      "_random_dataset",
      "_20newsgroups_lowdim_dataset"
    ],
    "class_names": [],
    "imports": [
      "TruncatedSVD",
      "pathlib",
      "train_test_split",
      "numpy",
      "fetch_20newsgroups",
      "fetch_olivetti_faces",
      "sklearn.feature_extraction.text",
      "sklearn.model_selection",
      "joblib",
      "load_digits",
      "Memory",
      "make_classification",
      "sklearn.decomposition",
      "sklearn.datasets",
      "StandardScaler",
      "MaxAbsScaler",
      "Path",
      "make_blobs",
      "fetch_openml",
      "scipy.sparse",
      "TfidfVectorizer",
      "make_regression",
      "sklearn.preprocessing"
    ]
  },
  "github_extracted/scikit-learn_scikit-learn/svm.py": {
    "variables": [
      "kernel",
      "params",
      "param_names",
      "estimator"
    ],
    "function_params": [
      "params",
      "self"
    ],
    "function_names": [
      "setup_cache",
      "make_estimator",
      "make_scorers",
      "make_data"
    ],
    "class_names": [
      "SVCBenchmark"
    ],
    "imports": [
      "Benchmark",
      "sklearn.svm",
      "utils",
      "_synth_classification_dataset",
      "Predictor",
      "make_gen_classif_scorers",
      "Estimator",
      "common",
      "datasets",
      "SVC"
    ]
  },
  "github_extracted/scikit-learn_scikit-learn/metrics.py": {
    "variables": [
      "params",
      "param_names",
      "metric",
      "representation",
      "data",
      "n_jobs",
      "n_samples"
    ],
    "function_params": [
      "self"
    ],
    "function_names": [
      "time_pairwise_distances",
      "setup",
      "peakmem_pairwise_distances"
    ],
    "class_names": [
      "PairwiseDistancesBenchmark"
    ],
    "imports": [
      "pairwise_distances",
      "Benchmark",
      "sklearn.metrics.pairwise",
      "common",
      "datasets",
      "_random_dataset"
    ]
  },
  "github_extracted/scikit-learn_scikit-learn/bench_20newsgroups.py": {
    "variables": [
      "ESTIMATORS",
      "y_train",
      "name",
      "accuracy",
      "y_pred",
      "y_test",
      "parser",
      "clf",
      "data_test",
      "X_test",
      "data_train",
      "train_time",
      "args",
      "test_time",
      "X_train",
      "t0"
    ],
    "function_params": [],
    "function_names": [],
    "class_names": [],
    "imports": [
      "sklearn.metrics",
      "numpy",
      "sklearn.naive_bayes",
      "DummyClassifier",
      "accuracy_score",
      "fetch_20newsgroups_vectorized",
      "ExtraTreesClassifier",
      "RandomForestClassifier",
      "MultinomialNB",
      "sklearn.dummy",
      "time",
      "sklearn.datasets",
      "argparse",
      "sklearn.ensemble",
      "sklearn.linear_model",
      "sklearn.utils.validation",
      "check_array",
      "LogisticRegression",
      "AdaBoostClassifier"
    ]
  },
  "github_extracted/scikit-learn_scikit-learn/label_title_regex.py": {
    "variables": [
      "labels_to_add",
      "title",
      "label",
      "g",
      "pr_number",
      "repo",
      "regex_to_labels",
      "regex",
      "issue",
      "context_dict"
    ],
    "function_params": [],
    "function_names": [],
    "class_names": [],
    "imports": [
      "Github",
      "github",
      "re",
      "os",
      "json"
    ]
  },
  "github_extracted/scikit-learn_scikit-learn/bench_feature_expansions.py": {
    "variables": [
      "trial",
      "density",
      "dense_times",
      "csr_linestyle",
      "dense_linestyle",
      "trials",
      "densities",
      "X_dense",
      "degree",
      "axes",
      "dimensionalities",
      "num_rows",
      "t0",
      "d",
      "ax",
      "fig",
      "csr_times",
      "dim_index",
      "dim",
      "transform",
      "X_csr"
    ],
    "function_params": [],
    "function_names": [],
    "class_names": [],
    "imports": [
      "numpy",
      "matplotlib.pyplot",
      "scipy.sparse",
      "PolynomialFeatures",
      "time",
      "sklearn.preprocessing"
    ]
  },
  "github_extracted/scikit-learn_scikit-learn/cmds.py": {
    "variables": [
      "default_meson_build_dir"
    ],
    "function_params": [],
    "function_names": [
      "clean"
    ],
    "class_names": [],
    "imports": [
      "shutil",
      "spin.cmds",
      "click",
      "sys",
      "util"
    ]
  },
  "github_extracted/scikit-learn_scikit-learn/ensemble.py": {
    "variables": [
      "params",
      "param_names",
      "estimator",
      "representation",
      "data",
      "n_jobs",
      "n_estimators"
    ],
    "function_params": [
      "params",
      "self"
    ],
    "function_names": [
      "setup_cache",
      "make_estimator",
      "make_scorers",
      "make_data"
    ],
    "class_names": [
      "GradientBoostingClassifierBenchmark",
      "HistGradientBoostingClassifierBenchmark",
      "RandomForestClassifierBenchmark"
    ],
    "imports": [
      "GradientBoostingClassifier",
      "Benchmark",
      "_20newsgroups_highdim_dataset",
      "RandomForestClassifier",
      "utils",
      "_synth_classification_dataset",
      "Predictor",
      "make_gen_classif_scorers",
      "Estimator",
      "common",
      "HistGradientBoostingClassifier",
      "sklearn.ensemble",
      "datasets",
      "_20newsgroups_lowdim_dataset"
    ]
  },
  "github_extracted/scikit-learn_scikit-learn/utils.py": {
    "variables": [],
    "function_params": [
      "X",
      "Xt",
      "centers",
      "caller",
      "V",
      "labels",
      "U"
    ],
    "function_names": [
      "make_pca_scorers",
      "make_dict_learning_scorers",
      "explained_variance_ratio",
      "make_gen_classif_scorers",
      "neg_mean_inertia",
      "make_gen_reg_scorers",
      "neg_mean_data_error"
    ],
    "class_names": [],
    "imports": [
      "numpy",
      "balanced_accuracy_score",
      "r2_score",
      "sklearn.metrics"
    ]
  },
  "github_extracted/scikit-learn_scikit-learn/neighbors.py": {
    "variables": [
      "params",
      "param_names",
      "estimator",
      "algorithm",
      "data",
      "n_jobs",
      "n_components",
      "dimension"
    ],
    "function_params": [
      "params",
      "self"
    ],
    "function_names": [
      "setup_cache",
      "make_estimator",
      "make_scorers",
      "make_data"
    ],
    "class_names": [
      "KNeighborsClassifierBenchmark"
    ],
    "imports": [
      "KNeighborsClassifier",
      "Benchmark",
      "utils",
      "Predictor",
      "make_gen_classif_scorers",
      "Estimator",
      "common",
      "sklearn.neighbors",
      "datasets",
      "_20newsgroups_lowdim_dataset"
    ]
  },
  "github_extracted/scikit-learn_scikit-learn/common.py": {
    "variables": [
      "y",
      "timer",
      "config_file",
      "X",
      "filename",
      "n_jobs_vals",
      "current_path",
      "save_dir",
      "bench_predict",
      "child",
      "y_pred",
      "_",
      "bench_transform",
      "line",
      "estimator_base",
      "number",
      "X_val_t_base",
      "config_path",
      "n_jobs_vals_env",
      "X_val_t",
      "params",
      "save_estimators",
      "warmup_time",
      "estimator",
      "config",
      "y_val_pred",
      "repeat",
      "base_commit",
      "param_grid",
      "data_size",
      "y_val_pred_base",
      "path",
      "timeout",
      "processes",
      "f",
      "profile",
      "cache_path",
      "est_path",
      "min_run_count"
    ],
    "function_params": [
      "save",
      "benchmark",
      "params",
      "directory",
      "self"
    ],
    "function_names": [
      "peakmem_predict",
      "make_data",
      "track_same_transform",
      "get_from_config",
      "skip",
      "setup",
      "make_estimator",
      "track_train_score",
      "track_test_score",
      "clear_tmp",
      "params",
      "peakmem_fit",
      "time_predict",
      "setup_cache",
      "peakmem_transform",
      "get_estimator_path",
      "time_transform",
      "track_same_prediction",
      "time_fit"
    ],
    "class_names": [
      "Transformer",
      "Benchmark",
      "Estimator",
      "Predictor"
    ],
    "imports": [
      "numpy",
      "cpu_count",
      "pathlib",
      "abc",
      "abstractmethod",
      "itertools",
      "ABC",
      "pickle",
      "json",
      "multiprocessing",
      "os",
      "timeit",
      "Path"
    ]
  },
  "github_extracted/scikit-learn_scikit-learn/linear_model.py": {
    "variables": [
      "params",
      "param_names",
      "estimator",
      "max_iter",
      "precompute",
      "representation",
      "penalty",
      "data",
      "solver",
      "n_jobs"
    ],
    "function_params": [
      "params",
      "self"
    ],
    "function_names": [
      "setup_cache",
      "make_data",
      "make_scorers",
      "skip",
      "make_estimator"
    ],
    "class_names": [
      "LogisticRegressionBenchmark",
      "LassoBenchmark",
      "LinearRegressionBenchmark",
      "RidgeBenchmark",
      "SGDRegressorBenchmark",
      "ElasticNetBenchmark"
    ],
    "imports": [
      "_synth_regression_dataset",
      "Estimator",
      "datasets",
      "Ridge",
      "SGDRegressor",
      "Benchmark",
      "ElasticNet",
      "Lasso",
      "LinearRegression",
      "make_gen_classif_scorers",
      "common",
      "utils",
      "_20newsgroups_lowdim_dataset",
      "_20newsgroups_highdim_dataset",
      "sklearn.linear_model",
      "Predictor",
      "_synth_regression_sparse_dataset",
      "make_gen_reg_scorers",
      "LogisticRegression"
    ]
  },
  "github_extracted/scikit-learn_scikit-learn/bench_glmnet.py": {
    "variables": [
      "alpha",
      "step",
      "coef_",
      "n_features",
      "X",
      "tstart",
      "n_informative",
      "i",
      "clf",
      "Y_test",
      "xx",
      "glmnet_results",
      "n_samples",
      "n",
      "scikit_results",
      "n_test_samples",
      "delta",
      "X_test",
      "Y"
    ],
    "function_params": [
      "b",
      "X",
      "a",
      "X_test",
      "Y_test",
      "factory",
      "ref_coef",
      "Y"
    ],
    "function_names": [
      "rmse",
      "bench"
    ],
    "class_names": [],
    "imports": [
      "numpy",
      "matplotlib.pyplot",
      "sklearn.linear_model",
      "Lasso",
      "time",
      "sklearn.datasets",
      "glmnet.elastic_net",
      "make_regression",
      "gc"
    ]
  },
  "github_extracted/scikit-learn_scikit-learn/__init__.py": {
    "variables": [],
    "function_params": [],
    "function_names": [],
    "class_names": [],
    "imports": []
  },
  "github_extracted/scikit-learn_scikit-learn/model_selection.py": {
    "variables": [
      "params",
      "max_features_list",
      "timeout",
      "param_names",
      "estimator",
      "clf",
      "cv",
      "n_estimators_list",
      "param_grid",
      "data",
      "n_jobs",
      "max_depth_list"
    ],
    "function_params": [
      "params",
      "self"
    ],
    "function_names": [
      "setup_cache",
      "make_data",
      "peakmem_crossval",
      "time_crossval",
      "make_scorers",
      "setup",
      "track_crossval",
      "make_estimator"
    ],
    "class_names": [
      "CrossValidationBenchmark",
      "GridSearchBenchmark"
    ],
    "imports": [
      "GridSearchCV",
      "Benchmark",
      "RandomForestClassifier",
      "utils",
      "_synth_classification_dataset",
      "Predictor",
      "make_gen_classif_scorers",
      "Estimator",
      "cross_val_score",
      "sklearn.model_selection",
      "common",
      "sklearn.ensemble",
      "datasets"
    ]
  },
  "github_extracted/matplotlib_matplotlib/redirect_from.py": {
    "variables": [
      "HTML_TEMPLATE",
      "v",
      "name",
      "metadata",
      "label",
      "redirected_reldoc",
      "src",
      "redirected_doc",
      "current_doc",
      "k",
      "_",
      "p",
      "logger",
      "dst",
      "required_arguments",
      "builder",
      "html",
      "domain"
    ],
    "function_params": [
      "otherdata",
      "self",
      "exception",
      "docname",
      "docnames",
      "app"
    ],
    "function_names": [
      "run",
      "merge_domaindata",
      "setup",
      "_clear_redirects",
      "redirects",
      "clear_doc",
      "_generate_redirects"
    ],
    "class_names": [
      "RedirectFromDomain",
      "RedirectFrom"
    ],
    "imports": [
      "SphinxDirective",
      "pathlib",
      "sphinx.util.docutils",
      "logging",
      "sphinx.domains",
      "sphinx.util",
      "Domain",
      "Path"
    ]
  },
  "github_extracted/matplotlib_matplotlib/vendor_schemas.py": {
    "variables": [
      "SCHEMAS",
      "schema",
      "size",
      "path",
      "width",
      "percent_str",
      "HERE",
      "percent",
      "json",
      "filled"
    ],
    "function_params": [
      "block_size",
      "total_size",
      "block_count"
    ],
    "function_names": [
      "print_progress"
    ],
    "class_names": [],
    "imports": [
      "urllib.request",
      "os",
      "pathlib"
    ]
  },
  "github_extracted/matplotlib_matplotlib/animate_decay.py": {
    "variables": [
      "xmin",
      "y",
      "cnt",
      "ydata",
      "t",
      "ax",
      "line",
      "fig",
      "xdata",
      "ani",
      "xmax"
    ],
    "function_params": [
      "data"
    ],
    "function_names": [
      "run",
      "init",
      "data_gen"
    ],
    "class_names": [],
    "imports": [
      "numpy",
      "matplotlib.pyplot",
      "itertools",
      "matplotlib.animation"
    ]
  },
  "github_extracted/matplotlib_matplotlib/check_wheel_licenses.py": {
    "variables": [
      "wheel",
      "path",
      "f",
      "license_dir",
      "project_dir",
      "license_file_names",
      "wheel_license_file_names"
    ],
    "function_params": [],
    "function_names": [],
    "class_names": [],
    "imports": [
      "zipfile",
      "sys",
      "pathlib",
      "Path"
    ]
  },
  "github_extracted/matplotlib_matplotlib/gallery_order.py": {
    "variables": [
      "UNSORTED",
      "fd",
      "folders",
      "explicit_order_folders",
      "item",
      "sectionorder",
      "folder_lists",
      "list_all",
      "plot_types_order",
      "explicit_subsection_order",
      "tutorials_order",
      "subsectionorder",
      "examples_order"
    ],
    "function_params": [
      "item",
      "src_dir",
      "self"
    ],
    "function_names": [
      "__call__",
      "__init__"
    ],
    "class_names": [
      "MplExplicitOrder",
      "MplExplicitSubOrder"
    ],
    "imports": [
      "ExplicitOrder",
      "sphinx_gallery.sorting"
    ]
  },
  "github_extracted/matplotlib_matplotlib/skip_deprecated.py": {
    "variables": [
      "skipped",
      "skip_list",
      "metadata"
    ],
    "function_params": [
      "obj",
      "name",
      "what",
      "options",
      "skip",
      "app"
    ],
    "function_names": [
      "skip_deprecated",
      "setup"
    ],
    "class_names": [],
    "imports": []
  },
  "github_extracted/matplotlib_matplotlib/mock_gui_toolkits.py": {
    "variables": [
      "__name__"
    ],
    "function_params": [
      "app"
    ],
    "function_names": [
      "setup"
    ],
    "class_names": [
      "MyCairoCffi"
    ],
    "imports": [
      "sys",
      "unittest.mock",
      "MagicMock"
    ]
  },
  "github_extracted/matplotlib_matplotlib/generate_credits.py": {
    "variables": [
      "emails",
      "l",
      "count",
      "email",
      "email_counter",
      "f",
      "lines",
      "line",
      "contributors",
      "text",
      "TEMPLATE"
    ],
    "function_params": [],
    "function_names": [
      "generate_credits",
      "check_duplicates"
    ],
    "class_names": [],
    "imports": [
      "locale",
      "collections",
      "Counter",
      "subprocess",
      "re"
    ]
  },
  "github_extracted/matplotlib_matplotlib/github.py": {
    "variables": [
      "metadata",
      "issue_num",
      "msg",
      "ref",
      "node",
      "app",
      "category",
      "base",
      "prb",
      "prefix"
    ],
    "function_params": [
      "name",
      "lineno",
      "options",
      "inliner",
      "slug",
      "content",
      "app",
      "rawtext",
      "text",
      "type"
    ],
    "function_names": [
      "make_link_node",
      "ghissue_role",
      "ghuser_role",
      "setup",
      "ghcommit_role"
    ],
    "class_names": [],
    "imports": [
      "set_classes",
      "nodes",
      "docutils",
      "utils",
      "docutils.parsers.rst.roles"
    ]
  },
  "github_extracted/matplotlib_matplotlib/math_symbol_table.py": {
    "variables": [
      "header",
      "k",
      "v",
      "metadata",
      "frak_pattern",
      "max_width",
      "row",
      "part",
      "symbols",
      "sym",
      "final_argument_whitespace",
      "optional_arguments",
      "val",
      "syms",
      "symbol",
      "option_spec",
      "scr_pattern",
      "fn",
      "all_symbols",
      "columns",
      "required_arguments",
      "lines",
      "has_content",
      "category",
      "rendered_syms",
      "bb_pattern"
    ],
    "function_params": [
      "state_machine",
      "sym",
      "self",
      "ignore_variant",
      "app"
    ],
    "function_names": [
      "run",
      "setup",
      "render_symbol"
    ],
    "class_names": [
      "MathSymbolTableDirective"
    ],
    "imports": [
      "_mathtext_data",
      "_mathtext",
      "Directive",
      "docutils.parsers.rst",
      "re",
      "matplotlib"
    ]
  },
  "github_extracted/matplotlib_matplotlib/hatch_classes.py": {
    "variables": [
      "r",
      "i",
      "hatch",
      "classes",
      "ax",
      "fig",
      "pattern_to_class",
      "h"
    ],
    "function_params": [],
    "function_names": [],
    "class_names": [],
    "imports": [
      "matplotlib.pyplot",
      "matplotlib.patches",
      "Rectangle"
    ]
  },
  "github_extracted/matplotlib_matplotlib/figure_subplots_adjust.py": {
    "variables": [
      "overlay",
      "arrowprops",
      "ax",
      "xycoords",
      "fig",
      "axs"
    ],
    "function_params": [],
    "function_names": [],
    "class_names": [],
    "imports": [
      "matplotlib.pyplot"
    ]
  },
  "github_extracted/matplotlib_matplotlib/axes_margins.py": {
    "variables": [
      "aymax",
      "xmin",
      "ymin",
      "y0",
      "y",
      "xmax",
      "axmin",
      "ax",
      "aymin",
      "x0",
      "fig",
      "ymax",
      "axmax",
      "x"
    ],
    "function_params": [
      "p1",
      "p2"
    ],
    "function_names": [
      "arrow"
    ],
    "class_names": [],
    "imports": [
      "numpy",
      "matplotlib.pyplot"
    ]
  },
  "github_extracted/matplotlib_matplotlib/export_sdist_name.py": {
    "variables": [
      "f",
      "p",
      "paths"
    ],
    "function_params": [],
    "function_names": [],
    "class_names": [],
    "imports": [
      "sys",
      "os",
      "pathlib",
      "Path"
    ]
  },
  "github_extracted/matplotlib_matplotlib/missing_references.py": {
    "variables": [
      "locations",
      "paths",
      "location",
      "reftype",
      "fullpath",
      "source",
      "refdomain",
      "stream",
      "targets",
      "json_path",
      "line",
      "references_warnings",
      "transformed_records",
      "references_ignored",
      "ignored_reference_location",
      "msg",
      "missing_reference_locations",
      "target",
      "domain_type",
      "data",
      "path",
      "basepath",
      "references_events",
      "ignored_references",
      "post",
      "logger",
      "short_location",
      "srcpath"
    ],
    "function_params": [
      "exc",
      "json_path",
      "app",
      "node",
      "records",
      "location",
      "domain"
    ],
    "function_names": [
      "_write_missing_references_json",
      "get_location",
      "save_missing_references",
      "prepare_missing_references_setup",
      "_truncate_location",
      "handle_missing_reference",
      "warn_unused_missing_references",
      "_read_missing_references_json",
      "setup"
    ],
    "class_names": [],
    "imports": [
      "get_source_line",
      "pathlib",
      "collections",
      "defaultdict",
      "logging",
      "sphinx.util",
      "docutils.utils",
      "matplotlib",
      "json",
      "Path"
    ]
  },
  "github_extracted/matplotlib_matplotlib/fetch_doc_logs.py": {
    "variables": [
      "fd",
      "logs",
      "path",
      "item",
      "build_id",
      "artifacts",
      "organization",
      "_",
      "target_url",
      "repository",
      "artifact_url",
      "found",
      "response",
      "artifact_count"
    ],
    "function_params": [],
    "function_names": [],
    "class_names": [],
    "imports": [
      "pathlib",
      "URLError",
      "urllib.request",
      "urllib.parse",
      "sys",
      "urlparse",
      "os",
      "json",
      "urlopen",
      "Path"
    ]
  },
  "github_extracted/matplotlib_matplotlib/__init__.py": {
    "variables": [],
    "function_params": [],
    "function_names": [],
    "class_names": [],
    "imports": []
  },
  "github_extracted/matplotlib_matplotlib/check_version_number.py": {
    "variables": [],
    "function_params": [],
    "function_names": [],
    "class_names": [],
    "imports": [
      "sys",
      "matplotlib"
    ]
  },
  "github_extracted/matplotlib_matplotlib/conf.py": {
    "variables": [
      "tags_create_badges",
      "out",
      "autoclass_content",
      "tag",
      "js",
      "DEVDOCS",
      "linespec",
      "html_domain_index",
      "intersphinx_mapping",
      "gallery_order_subsectionorder",
      "docstring",
      "html_baseurl",
      "source_encoding",
      "startdir",
      "version",
      "url",
      "target_file",
      "pygments_style",
      "release",
      "modname",
      "sig",
      "pattern",
      "html_last_updated_fmt",
      "tags_create_tags",
      "name",
      "html_use_index",
      "graphviz_dot",
      "exclude_patterns",
      "bld_type",
      "autosummary_generate",
      "ed",
      "copyright",
      "templates_path",
      "submod",
      "obj",
      "default_role",
      "copybutton_prompt_is_regexp",
      "is_release_build",
      "part",
      "copybutton_prompt_text",
      "html_context",
      "autodoc_default_options",
      "sourceyear",
      "formats",
      "project",
      "fout",
      "skip_subdirs",
      "unused_docs",
      "latex_engine",
      "matplotlib_reduced_latex_scraper",
      "numpydoc_show_class_members",
      "graphviz_output_format",
      "tags_page_title",
      "target",
      "tags_badge_colors",
      "latex_documents",
      "inheritance_node_attrs",
      "gallery_order_sectionorder",
      "source_suffix",
      "root_doc",
      "default_skip_subdirs",
      "html_static_path",
      "sg_matplotlib_animations",
      "html_theme",
      "extensions",
      "html_file_suffix",
      "css",
      "htmlhelp_basename",
      "missing_references_write_json",
      "autodoc_mock_imports",
      "source",
      "missing",
      "mathmpl_srcset",
      "latex_paper_size",
      "autodoc_docstring_signature",
      "html_show_sourcelink",
      "latex_toplevel_sectioning",
      "include_analytics",
      "latex_use_modindex",
      "example_dirs",
      "css_tag",
      "inheritance_graph_attrs",
      "html_index",
      "cls",
      "gd",
      "latex_appendices",
      "clear_basic_units",
      "sphinx_gallery_conf",
      "fullname",
      "yamldict",
      "inheritance_edge_attrs",
      "html_favicon",
      "ext",
      "autodoc_typehints",
      "nitpicky",
      "logger",
      "SHA",
      "html_theme_options",
      "smartquotes",
      "github_project_url",
      "lineno",
      "meth",
      "fin",
      "gallery_dirs",
      "html_sidebars",
      "html_use_opensearch",
      "js_tag",
      "plot_formats",
      "mathmpl_fontsize",
      "names",
      "html_css_files",
      "texinfo_documents",
      "today_fmt",
      "link_github",
      "missing_references_warn_unused_ignores",
      "msg",
      "fn",
      "latex_elements",
      "plot_srcset",
      "st",
      "CIRCLECI",
      "latex_logo"
    ],
    "function_params": [
      "bases",
      "obj",
      "js",
      "name",
      "info",
      "css",
      "options",
      "pagename",
      "doctree",
      "context",
      "app",
      "domain",
      "templatename",
      "record"
    ],
    "function_names": [
      "gallery_image_warning_filter",
      "_check_dependencies",
      "generate_ScalarMappable_docs",
      "js_tag_with_cache_busting",
      "_parse_skip_subdirs_file",
      "setup",
      "autodoc_process_bases",
      "css_tag_with_cache_busting",
      "linkcode_resolve",
      "tutorials_download_error",
      "add_html_cache_busting"
    ],
    "class_names": [],
    "imports": [
      "subprocess",
      "pathlib",
      "mpl_sphinx_theme",
      "packaging.version",
      "urllib.parse",
      "re",
      "stringify_signature",
      "Stylesheet",
      "sphinxext.util",
      "inspect",
      "pydata_sphinx_theme",
      "logging",
      "gen_rst",
      "datetime",
      "JavaScript",
      "timezone",
      "sys",
      "textwrap",
      "numpydoc.docscrape_sphinx",
      "parse",
      "subsectionorder",
      "sphinx.builders.html",
      "sphinx_gallery",
      "matplotlib_reduced_latex_scraper",
      "sphinx.util.inspect",
      "urlsplit",
      "get_doc_object",
      "sectionorder",
      "clear_basic_units",
      "sphinxext.gallery_order",
      "time",
      "os",
      "Path",
      "shutil",
      "yaml",
      "urlunsplit",
      "warnings",
      "matplotlib",
      "matplotlib.colorizer",
      "sphinx"
    ]
  },
  "github_extracted/matplotlib_matplotlib/util.py": {
    "variables": [],
    "function_params": [
      "fname",
      "block",
      "block_vars",
      "gallery_conf"
    ],
    "function_names": [
      "clear_basic_units",
      "matplotlib_reduced_latex_scraper"
    ],
    "class_names": [],
    "imports": [
      "sys",
      "sphinx_gallery.scrapers",
      "matplotlib_scraper"
    ]
  },
  "github_extracted/django_django/__main__.py": {
    "variables": [],
    "function_params": [],
    "function_names": [],
    "class_names": [],
    "imports": [
      "management",
      "django.core"
    ]
  },
  "github_extracted/django_django/global_settings.py": {
    "variables": [
      "FIXTURE_DIRS",
      "TIME_INPUT_FORMATS",
      "SESSION_COOKIE_PATH",
      "TIME_FORMAT",
      "LANGUAGE_COOKIE_SAMESITE",
      "CSRF_COOKIE_HTTPONLY",
      "USE_X_FORWARDED_HOST",
      "LANGUAGE_COOKIE_SECURE",
      "SESSION_COOKIE_AGE",
      "SESSION_SAVE_EVERY_REQUEST",
      "CSRF_USE_SESSIONS",
      "TEST_RUNNER",
      "MESSAGE_STORAGE",
      "SECURE_SSL_HOST",
      "USE_X_FORWARDED_PORT",
      "AUTH_USER_MODEL",
      "TEST_NON_SERIALIZED_APPS",
      "AUTHENTICATION_BACKENDS",
      "FORM_RENDERER",
      "DEBUG",
      "EMAIL_SSL_KEYFILE",
      "SESSION_COOKIE_HTTPONLY",
      "DEFAULT_FROM_EMAIL",
      "MONTH_DAY_FORMAT",
      "SECURE_REFERRER_POLICY",
      "CSRF_COOKIE_AGE",
      "MANAGERS",
      "EMAIL_BACKEND",
      "SERVER_EMAIL",
      "FILE_UPLOAD_DIRECTORY_PERMISSIONS",
      "CSRF_TRUSTED_ORIGINS",
      "FIRST_DAY_OF_WEEK",
      "CACHE_MIDDLEWARE_ALIAS",
      "FILE_UPLOAD_PERMISSIONS",
      "EMAIL_HOST_USER",
      "USE_I18N",
      "CACHE_MIDDLEWARE_KEY_PREFIX",
      "SILENCED_SYSTEM_CHECKS",
      "CSRF_FAILURE_VIEW",
      "URLIZE_ASSUME_HTTPS",
      "MEDIA_URL",
      "CSRF_HEADER_NAME",
      "EMAIL_HOST_PASSWORD",
      "NUMBER_GROUPING",
      "DEFAULT_CHARSET",
      "SECURE_CONTENT_TYPE_NOSNIFF",
      "LANGUAGE_COOKIE_HTTPONLY",
      "SESSION_COOKIE_SECURE",
      "STATIC_URL",
      "SHORT_DATE_FORMAT",
      "CSRF_COOKIE_NAME",
      "STATICFILES_DIRS",
      "LANGUAGES_BIDI",
      "DATE_INPUT_FORMATS",
      "USE_THOUSAND_SEPARATOR",
      "INTERNAL_IPS",
      "SECURE_CROSS_ORIGIN_OPENER_POLICY",
      "SECRET_KEY_FALLBACKS",
      "SIGNING_BACKEND",
      "EMAIL_PORT",
      "LANGUAGE_CODE",
      "CSRF_COOKIE_PATH",
      "DATABASE_ROUTERS",
      "SESSION_EXPIRE_AT_BROWSER_CLOSE",
      "SESSION_FILE_PATH",
      "DEFAULT_EXCEPTION_REPORTER_FILTER",
      "YEAR_MONTH_FORMAT",
      "DATA_UPLOAD_MAX_NUMBER_FILES",
      "EMAIL_HOST",
      "CSRF_COOKIE_DOMAIN",
      "LANGUAGE_COOKIE_NAME",
      "ABSOLUTE_URL_OVERRIDES",
      "APPEND_SLASH",
      "FILE_UPLOAD_TEMP_DIR",
      "LANGUAGE_COOKIE_AGE",
      "CSRF_COOKIE_SECURE",
      "DATA_UPLOAD_MAX_NUMBER_FIELDS",
      "LOGOUT_REDIRECT_URL",
      "FORCE_SCRIPT_NAME",
      "CACHES",
      "SESSION_COOKIE_SAMESITE",
      "MIDDLEWARE",
      "SESSION_COOKIE_DOMAIN",
      "EMAIL_USE_LOCALTIME",
      "EMAIL_TIMEOUT",
      "ADMINS",
      "PASSWORD_HASHERS",
      "SECURE_HSTS_INCLUDE_SUBDOMAINS",
      "SECURE_REDIRECT_EXEMPT",
      "WSGI_APPLICATION",
      "STORAGES",
      "MIGRATION_MODULES",
      "CSRF_COOKIE_SAMESITE",
      "TIME_ZONE",
      "AUTH_PASSWORD_VALIDATORS",
      "LOGIN_REDIRECT_URL",
      "STATICFILES_FINDERS",
      "LOGIN_URL",
      "DATETIME_FORMAT",
      "SESSION_ENGINE",
      "SESSION_SERIALIZER",
      "SESSION_COOKIE_NAME",
      "DATE_FORMAT",
      "LANGUAGE_COOKIE_DOMAIN",
      "DEFAULT_AUTO_FIELD",
      "FILE_UPLOAD_MAX_MEMORY_SIZE",
      "PREPEND_WWW",
      "DEFAULT_EXCEPTION_REPORTER",
      "CACHE_MIDDLEWARE_SECONDS",
      "EMAIL_SUBJECT_PREFIX",
      "LOCALE_PATHS",
      "PASSWORD_RESET_TIMEOUT",
      "USE_TZ",
      "LANGUAGES",
      "SECRET_KEY",
      "SECURE_PROXY_SSL_HEADER",
      "INSTALLED_APPS",
      "LANGUAGE_COOKIE_PATH",
      "THOUSAND_SEPARATOR",
      "DATA_UPLOAD_MAX_MEMORY_SIZE",
      "X_FRAME_OPTIONS",
      "FILE_UPLOAD_HANDLERS",
      "TEMPLATES",
      "DISALLOWED_USER_AGENTS",
      "DATABASES",
      "SECURE_HSTS_SECONDS",
      "EMAIL_USE_TLS",
      "SECURE_HSTS_PRELOAD",
      "EMAIL_SSL_CERTFILE",
      "DECIMAL_SEPARATOR",
      "ALLOWED_HOSTS",
      "DEFAULT_INDEX_TABLESPACE",
      "MEDIA_ROOT",
      "LOGGING",
      "SHORT_DATETIME_FORMAT",
      "STATIC_ROOT",
      "DEFAULT_TABLESPACE",
      "SESSION_CACHE_ALIAS",
      "DATETIME_INPUT_FORMATS",
      "LOGGING_CONFIG",
      "DEBUG_PROPAGATE_EXCEPTIONS",
      "IGNORABLE_404_URLS",
      "FORMAT_MODULE_PATH",
      "EMAIL_USE_SSL",
      "SECURE_SSL_REDIRECT"
    ],
    "function_params": [
      "s"
    ],
    "function_names": [
      "gettext_noop"
    ],
    "class_names": [],
    "imports": []
  },
  "github_extracted/django_django/registry.py": {
    "variables": [
      "name",
      "app_label",
      "next_model",
      "model_class",
      "function",
      "ac",
      "subpath",
      "available",
      "count",
      "candidates",
      "app_models",
      "counts",
      "apps",
      "result",
      "swapped",
      "model_name",
      "label",
      "to_string",
      "duplicates",
      "model",
      "next_function",
      "entry",
      "more_models",
      "app_config",
      "installed",
      "key",
      "message"
    ],
    "function_params": [
      "require_ready",
      "app_label",
      "model_name",
      "model",
      "available",
      "to_string",
      "installed_apps",
      "include_auto_created",
      "app_name",
      "self",
      "function",
      "installed",
      "include_swapped",
      "object_name"
    ],
    "function_names": [
      "set_installed_apps",
      "register_model",
      "apply_next_model",
      "get_model",
      "__init__",
      "check_models_ready",
      "get_models",
      "get_swappable_settings_name",
      "check_apps_ready",
      "get_app_configs",
      "do_pending_operations",
      "populate",
      "set_available_apps",
      "get_containing_app_config",
      "is_installed",
      "lazy_model_operation",
      "unset_installed_apps",
      "unset_available_apps",
      "get_app_config",
      "clear_cache",
      "get_registered_model"
    ],
    "class_names": [
      "Apps"
    ],
    "imports": [
      "ImproperlyConfigured",
      "collections",
      "Counter",
      "defaultdict",
      "partial",
      "config",
      "settings",
      "functools",
      "AppRegistryNotReady",
      "sys",
      "threading",
      "django.core.exceptions",
      "warnings",
      "AppConfig",
      "django.conf"
    ]
  },
  "github_extracted/django_django/formats.py": {
    "variables": [
      "DECIMAL_SEPARATOR",
      "YEAR_MONTH_FORMAT",
      "SHORT_DATE_FORMAT",
      "DATETIME_FORMAT",
      "TIME_FORMAT",
      "THOUSAND_SEPARATOR",
      "DATE_FORMAT",
      "MONTH_DAY_FORMAT"
    ],
    "function_params": [],
    "function_names": [],
    "class_names": [],
    "imports": []
  },
  "github_extracted/django_django/config.py": {
    "variables": [
      "name",
      "model",
      "mod",
      "app_module",
      "candidates",
      "app_configs",
      "cls_name",
      "filename",
      "app_name",
      "MODELS_MODULE_NAME",
      "app_config_class",
      "APPS_MODULE_NAME",
      "_",
      "msg",
      "paths",
      "candidate",
      "mod_path",
      "models_module_name"
    ],
    "function_params": [
      "model_name",
      "module",
      "app_module",
      "entry",
      "cls",
      "app_name",
      "include_auto_created",
      "self",
      "include_swapped",
      "require_ready"
    ],
    "function_names": [
      "create",
      "_path_from_module",
      "__init__",
      "default_auto_field",
      "import_models",
      "get_models",
      "_is_default_auto_field_overridden",
      "ready",
      "__repr__",
      "get_model"
    ],
    "class_names": [
      "AppConfig"
    ],
    "imports": [
      "import_module",
      "inspect",
      "ImproperlyConfigured",
      "django.utils.module_loading",
      "import_string",
      "module_has_submodule",
      "importlib",
      "django.utils.functional",
      "settings",
      "cached_property",
      "django.core.exceptions",
      "os",
      "django.conf"
    ]
  },
  "github_extracted/django_django/__init__.py": {
    "variables": [],
    "function_params": [],
    "function_names": [],
    "class_names": [],
    "imports": []
  },
  "github_extracted/psf_black/list_big.py": {
    "variables": [
      "config"
    ],
    "function_params": [],
    "function_names": [],
    "class_names": [],
    "imports": []
  },
  "github_extracted/psf_black/check_version_in_basics_example.py": {
    "variables": [
      "code_block",
      "changes_soup",
      "latest_tag",
      "header",
      "fd",
      "headers",
      "tags",
      "changes_html",
      "version_example",
      "changes",
      "the_basics",
      "version_examples",
      "the_basics_soup",
      "tag",
      "the_basics_html"
    ],
    "function_params": [
      "the_basics",
      "changes"
    ],
    "function_names": [
      "main"
    ],
    "class_names": [],
    "imports": [
      "commonmark",
      "bs4",
      "sys",
      "BeautifulSoup",
      "os"
    ]
  },
  "github_extracted/psf_black/generate_schema.py": {
    "variables": [
      "schema",
      "name",
      "param",
      "msg",
      "properties",
      "result"
    ],
    "function_params": [
      "cmd",
      "outfile",
      "schemastore"
    ],
    "function_names": [
      "generate_schema_from_click",
      "main"
    ],
    "class_names": [],
    "imports": [
      "Any",
      "typing",
      "click",
      "IO",
      "black",
      "json"
    ]
  },
  "github_extracted/psf_black/diff_shades_gha_helper.py": {
    "variables": [
      "USER_AGENT",
      "artifacts",
      "COMMENT_FILE",
      "command",
      "target_name",
      "rf",
      "sorted_versions",
      "v",
      "http",
      "headers",
      "s",
      "GH_API_TOKEN",
      "comment_zip",
      "comment_url",
      "diff_url",
      "pr_ref",
      "env",
      "diff_step",
      "j",
      "baseline_name",
      "proc",
      "jobs",
      "delimiter",
      "comment_artifact",
      "SHA_LENGTH",
      "data",
      "pr_num",
      "baseline_rev",
      "comment_data",
      "pr_rev",
      "zfile",
      "versions",
      "r",
      "target_rev",
      "cmd",
      "value",
      "REPO",
      "entry",
      "f",
      "baseline_cmd",
      "target_cmd",
      "body",
      "a",
      "job",
      "DOCS_URL",
      "DIFF_STEP_NAME"
    ],
    "function_params": [
      "pr_num",
      "name",
      "event",
      "run_id",
      "value",
      "target_sha",
      "pr",
      "target",
      "url",
      "baseline_sha",
      "baseline"
    ],
    "function_names": [
      "comment_body",
      "config",
      "set_output",
      "comment_details",
      "http_get",
      "get_main_revision",
      "get_pr_revision",
      "main",
      "get_pypi_version"
    ],
    "class_names": [],
    "imports": [
      "subprocess",
      "pathlib",
      "BytesIO",
      "packaging.version",
      "b64encode",
      "json",
      "zipfile",
      "diff_shades",
      "Any",
      "Literal",
      "sys",
      "pprint",
      "Version",
      "io",
      "os",
      "Path",
      "Final",
      "typing",
      "click",
      "base64",
      "urllib3",
      "platform"
    ]
  },
  "github_extracted/psf_black/mix_big.py": {
    "variables": [
      "config"
    ],
    "function_params": [],
    "function_names": [],
    "class_names": [],
    "imports": []
  },
  "github_extracted/psf_black/list_huge.py": {
    "variables": [
      "config"
    ],
    "function_params": [],
    "function_names": [],
    "class_names": [],
    "imports": []
  },
  "github_extracted/psf_black/release_tests.py": {
    "variables": [
      "second_month_release",
      "first_month_release"
    ],
    "function_params": [
      "self",
      "mocked_git_tags"
    ],
    "function_names": [
      "setUp",
      "today",
      "strftime",
      "test_tuple_calver",
      "test_get_next_version",
      "tearDown",
      "test_get_current_version"
    ],
    "class_names": [
      "TestRelease",
      "FakeDateTime"
    ],
    "imports": [
      "patch",
      "tuple_calver",
      "unittest.mock",
      "pathlib",
      "tempfile",
      "Any",
      "shutil",
      "release",
      "typing",
      "Mock",
      "SourceFiles",
      "TemporaryDirectory",
      "unittest",
      "rmtree",
      "Path"
    ]
  },
  "github_extracted/psf_black/dict_huge.py": {
    "variables": [
      "config"
    ],
    "function_params": [],
    "function_names": [],
    "class_names": [],
    "imports": []
  },
  "github_extracted/psf_black/main.py": {
    "variables": [
      "ENV_PATH",
      "ENV_BIN",
      "fp",
      "SRC",
      "VERSION",
      "pip_proc",
      "line",
      "req",
      "EXTRAS_RE",
      "m",
      "JUPYTER",
      "BLACK_VERSION_RE",
      "describe_name",
      "EXPORT_SUBST_FAIL_RE",
      "OPTIONS",
      "proc",
      "version",
      "version_specifier",
      "item",
      "arrays",
      "extra_deps",
      "base_cmd",
      "array",
      "BLACK_ARGS",
      "ACTION_PATH",
      "USE_PYPROJECT",
      "pyproject"
    ],
    "function_params": [
      "array"
    ],
    "function_names": [
      "read_version_specifier_from_pyproject",
      "determine_version_specifier",
      "find_black_version_in_array"
    ],
    "class_names": [],
    "imports": [
      "run",
      "pathlib",
      "shlex",
      "shutil",
      "PIPE",
      "typing",
      "sys",
      "tomllib",
      "Union",
      "subprocess",
      "re",
      "os",
      "STDOUT",
      "Path"
    ]
  },
  "github_extracted/psf_black/mix_small.py": {
    "variables": [
      "config"
    ],
    "function_params": [],
    "function_names": [],
    "class_names": [],
    "imports": []
  },
  "github_extracted/psf_black/make_width_table.py": {
    "variables": [
      "start_codepoint",
      "table_path",
      "width",
      "range_width",
      "f",
      "codepoint",
      "end_codepoint",
      "triple"
    ],
    "function_params": [],
    "function_names": [
      "main",
      "make_width_table"
    ],
    "class_names": [],
    "imports": [
      "Iterable",
      "basename",
      "dirname",
      "wcwidth",
      "join",
      "sys",
      "os.path",
      "collections.abc"
    ]
  },
  "github_extracted/psf_black/fuzz.py": {
    "variables": [
      "test",
      "dst_contents"
    ],
    "function_params": [
      "mode",
      "src_contents"
    ],
    "function_names": [
      "test_idempotent_any_syntatically_valid_python"
    ],
    "class_names": [],
    "imports": [
      "HealthCheck",
      "atheris",
      "strategies",
      "settings",
      "sys",
      "hypothesis",
      "black",
      "hypothesmith",
      "given"
    ]
  },
  "github_extracted/psf_black/check_pre_commit_rev_in_example.py": {
    "variables": [
      "source_version_control_html",
      "fd",
      "latest_tag",
      "changes_soup",
      "header",
      "headers",
      "source_version_control",
      "source_version_control_soup",
      "changes_html",
      "repo",
      "_",
      "pre_commit_repos",
      "pre_commit_rev",
      "changes"
    ],
    "function_params": [
      "source_version_control",
      "changes"
    ],
    "function_names": [
      "main"
    ],
    "class_names": [],
    "imports": [
      "commonmark",
      "bs4",
      "sys",
      "yaml",
      "BeautifulSoup",
      "os"
    ]
  },
  "github_extracted/psf_black/migrate-black.py": {
    "variables": [
      "allow_empty",
      "git_diff",
      "commit",
      "parser",
      "merge_base",
      "logger",
      "last_commit",
      "quiet",
      "args",
      "current_branch",
      "commits",
      "git_apply"
    ],
    "function_params": [
      "base_branch",
      "black_command",
      "logger"
    ],
    "function_names": [
      "blackify",
      "git"
    ],
    "class_names": [],
    "imports": [
      "run",
      "Popen",
      "logging",
      "check_output",
      "PIPE",
      "sys",
      "subprocess",
      "argparse",
      "os"
    ]
  },
  "github_extracted/psf_black/__init__.py": {
    "variables": [],
    "function_params": [],
    "function_names": [],
    "class_names": [],
    "imports": []
  },
  "github_extracted/psf_black/conf.py": {
    "variables": [
      "needs_extensions",
      "myst_disable_syntax",
      "html_theme",
      "myst_enable_extensions",
      "needs_sphinx",
      "extensions",
      "exclude_patterns",
      "htmlhelp_basename",
      "epub_author",
      "CURRENT_DIR",
      "language",
      "copyright",
      "templates_path",
      "epub_publisher",
      "copybutton_prompt_is_regexp",
      "html_logo",
      "intersphinx_mapping",
      "epub_title",
      "sp",
      "texinfo_documents",
      "epub_copyright",
      "copybutton_prompt_text",
      "project",
      "autodoc_member_order",
      "myst_heading_anchors",
      "man_pages",
      "version",
      "target",
      "author",
      "master_doc",
      "latex_documents",
      "pygments_style",
      "release",
      "svg",
      "f",
      "epub_exclude_files",
      "template",
      "source_suffix",
      "copybutton_remove_prompts",
      "html_static_path"
    ],
    "function_params": [
      "parent_docname",
      "relative_path",
      "version",
      "content",
      "app"
    ],
    "function_names": [
      "replace_pr_numbers_with_links",
      "setup",
      "handle_include_read",
      "make_pypi_svg"
    ],
    "class_names": [],
    "imports": [
      "importlib.metadata",
      "sphinx.application",
      "pathlib",
      "Sphinx",
      "string",
      "version",
      "re",
      "os",
      "Path"
    ]
  },
  "github_extracted/psf_black/dict_big.py": {
    "variables": [
      "config"
    ],
    "function_params": [],
    "function_names": [],
    "class_names": [],
    "imports": []
  },
  "github_extracted/psf_black/mix_huge.py": {
    "variables": [
      "config"
    ],
    "function_params": [],
    "function_names": [],
    "class_names": [],
    "imports": []
  },
  "github_extracted/psf_black/gallery.py": {
    "variables": [
      "INTERNAL_BLACK_REPO",
      "sources",
      "source_directory",
      "DEFAULT_SLICE",
      "executor",
      "directory",
      "black_version",
      "archive",
      "PYPI_TOP_PACKAGES",
      "package",
      "ArchiveKind",
      "black_versions",
      "bound_downloader",
      "metadata",
      "source",
      "python",
      "options",
      "_",
      "source_directories",
      "page",
      "format_cmd",
      "result",
      "args",
      "group",
      "result_dir",
      "config",
      "version",
      "current_branch",
      "repos",
      "from_branch",
      "PYPI_INSTANCE",
      "repo",
      "parser",
      "local_file"
    ],
    "function_params": [
      "from_branch",
      "workers",
      "directory",
      "black_version",
      "options",
      "msg",
      "input_directory",
      "archive",
      "repo",
      "version",
      "local_file",
      "black_repo",
      "limit",
      "new",
      "repos",
      "package",
      "branch"
    ],
    "function_names": [
      "git_add_and_commit",
      "git_create_repository",
      "format_repos",
      "get_top_packages",
      "git_switch_branch",
      "format_repo_with_version",
      "download_and_extract",
      "get_first_archive_member",
      "download_and_extract_top_packages",
      "black_runner",
      "get_package",
      "init_repos",
      "get_package_source",
      "main",
      "get_pypi_download_url",
      "get_archive_manager"
    ],
    "class_names": [
      "BlackVersion"
    ],
    "imports": [
      "pathlib",
      "functools",
      "lru_cache",
      "Union",
      "ThreadPoolExecutor",
      "json",
      "zipfile",
      "NamedTuple",
      "cast",
      "urllib.request",
      "collections.abc",
      "venv",
      "urlopen",
      "Optional",
      "Generator",
      "Namespace",
      "argparse",
      "ArgumentParser",
      "Path",
      "tarfile",
      "concurrent.futures",
      "tempfile",
      "atexit",
      "partial",
      "urlretrieve",
      "typing",
      "traceback",
      "subprocess"
    ]
  },
  "github_extracted/psf_black/release.py": {
    "variables": [
      "sf",
      "t",
      "base_calver",
      "NEW_VERSION_CHANGELOG_TEMPLATE",
      "calver_parts",
      "dfp",
      "line",
      "same_month_version",
      "args",
      "cfp",
      "next_version_doc",
      "changes_string",
      "doc_path",
      "log_level",
      "doc_string",
      "same_month_releases",
      "git_tags",
      "no_comments_changes",
      "templated_changes_string",
      "versioned_changes",
      "parser",
      "LOG",
      "cp"
    ],
    "function_params": [
      "versions_only",
      "debug",
      "self",
      "calver",
      "black_repo_dir"
    ],
    "function_names": [
      "tuple_calver",
      "__str__",
      "__init__",
      "cleanup_changes_template_for_release",
      "get_current_version",
      "_handle_debug",
      "get_git_tags",
      "add_template_to_changes",
      "get_next_version",
      "update_repo_for_release",
      "main",
      "update_version_in_docs",
      "parse_args"
    ],
    "class_names": [
      "NoGitTagsError",
      "SourceFiles"
    ],
    "imports": [
      "run",
      "pathlib",
      "logging",
      "datetime",
      "annotations",
      "sys",
      "subprocess",
      "argparse",
      "__future__",
      "Path"
    ]
  },
  "github_extracted/python-poetry_poetry/about.py": {
    "variables": [
      "description",
      "name"
    ],
    "function_params": [
      "self"
    ],
    "function_names": [
      "handle"
    ],
    "class_names": [
      "AboutCommand"
    ],
    "imports": [
      "metadata",
      "poetry.utils._compat",
      "poetry.console.commands.command",
      "Command",
      "annotations",
      "__future__"
    ]
  },
  "github_extracted/python-poetry_poetry/source.py": {
    "variables": [
      "v",
      "priority",
      "name",
      "value",
      "k",
      "source_table",
      "url",
      "key"
    ],
    "function_params": [
      "self"
    ],
    "function_names": [
      "to_toml_table",
      "__post_init__",
      "to_dict"
    ],
    "class_names": [
      "Source"
    ],
    "imports": [
      "table",
      "tomlkit",
      "tomlkit.items",
      "poetry.repositories.repository_pool",
      "nl",
      "annotations",
      "dataclasses",
      "typing",
      "Priority",
      "TYPE_CHECKING",
      "Table",
      "__future__"
    ]
  },
  "github_extracted/python-poetry_poetry/__main__.py": {
    "variables": [],
    "function_params": [],
    "function_names": [],
    "class_names": [],
    "imports": [
      "poetry.console.application",
      "annotations",
      "sys",
      "main",
      "__future__"
    ]
  },
  "github_extracted/python-poetry_poetry/dict_config_source.py": {
    "variables": [
      "config",
      "keys",
      "i",
      "key"
    ],
    "function_params": [
      "value",
      "self",
      "key"
    ],
    "function_names": [
      "__init__",
      "config",
      "add_property",
      "get_property",
      "remove_property"
    ],
    "class_names": [
      "DictConfigSource"
    ],
    "imports": [
      "Any",
      "poetry.config.config_source",
      "annotations",
      "typing",
      "ConfigSource",
      "__future__",
      "PropertyNotFoundError"
    ]
  },
  "github_extracted/python-poetry_poetry/command_loader.py": {
    "variables": [],
    "function_params": [
      "self",
      "command_name",
      "factory"
    ],
    "function_names": [
      "register_factory"
    ],
    "class_names": [
      "CommandLoader"
    ],
    "imports": [
      "cleo.commands.command",
      "cleo.exceptions",
      "cleo.loaders.factory_command_loader",
      "CleoLogicError",
      "Callable",
      "Command",
      "annotations",
      "typing",
      "FactoryCommandLoader",
      "collections.abc",
      "TYPE_CHECKING",
      "__future__"
    ]
  },
  "github_extracted/python-poetry_poetry/add.py": {
    "variables": [
      "poetry_section",
      "name",
      "project_name",
      "use_project_section",
      "replaced",
      "poetry_constraint",
      "project_dependency_names",
      "extra",
      "status",
      "normalized_name",
      "options",
      "project_section",
      "_constraint",
      "dependency",
      "groups",
      "project_content",
      "loggers",
      "existing_packages",
      "group",
      "requirements",
      "extras",
      "this_group",
      "optional",
      "extra_name",
      "version",
      "packages",
      "description",
      "dep",
      "poetry_content",
      "index",
      "r",
      "arguments",
      "value",
      "constraint_name",
      "canonical_constraint_name",
      "extra_deps",
      "help",
      "content",
      "constraint",
      "key",
      "examples"
    ],
    "function_params": [
      "section",
      "project_dependencies",
      "extra_name",
      "dependency",
      "self",
      "packages",
      "existing_packages"
    ],
    "function_names": [
      "handle",
      "notify_about_existing_packages",
      "_add_dependency_to_extras",
      "get_existing_packages_from_input",
      "_hint_update_packages"
    ],
    "class_names": [
      "AddCommand"
    ],
    "imports": [
      "table",
      "tomlkit",
      "poetry.core.constraints.version",
      "poetry.core.packages.dependency_group",
      "argument",
      "Option",
      "ClassVar",
      "NormalizedName",
      "InstallerCommand",
      "cleo.io.inputs.argument",
      "Argument",
      "Any",
      "TOMLDocument",
      "annotations",
      "collections.abc",
      "TYPE_CHECKING",
      "parse_constraint",
      "inline_table",
      "nl",
      "tomlkit.toml_document",
      "poetry.console.commands.installer_command",
      "canonicalize_name",
      "Factory",
      "contextlib",
      "option",
      "poetry.factory",
      "cleo.helpers",
      "Dependency",
      "typing",
      "poetry.core.packages.dependency",
      "Collection",
      "MAIN_GROUP",
      "array",
      "InitCommand",
      "cleo.io.inputs.option",
      "packaging.utils",
      "__future__",
      "poetry.console.commands.init"
    ]
  },
  "github_extracted/python-poetry_poetry/config.py": {
    "variables": [
      "config_value",
      "name",
      "config_file",
      "k",
      "package_name",
      "auth_config_file",
      "pattern",
      "names",
      "i",
      "all_",
      "_default_config",
      "policy",
      "desired_max_workers",
      "keys",
      "env",
      "current_parent",
      "packages",
      "path",
      "env_key",
      "item",
      "build_config_settings_key",
      "value",
      "env_value",
      "default_max_workers",
      "default_config",
      "match",
      "logger",
      "key",
      "build_config_settings",
      "is_valid_list",
      "repositories"
    ],
    "function_params": [
      "reload",
      "name",
      "setting_name",
      "default",
      "val",
      "config",
      "value",
      "parent_key",
      "cls",
      "package_name",
      "match",
      "self",
      "use_environment",
      "config_source",
      "policy"
    ],
    "function_names": [
      "auth_config_source",
      "merge",
      "installer_max_workers",
      "virtualenvs_path",
      "config_source",
      "_get_environment_build_config_settings",
      "create",
      "__init__",
      "resolve_from_config",
      "all",
      "set_auth_config_source",
      "boolean_validator",
      "boolean_normalizer",
      "repository_cache_directory",
      "get",
      "build_config_setting_normalizer",
      "raw",
      "_get_environment_repositories",
      "_all",
      "config",
      "__post_init__",
      "build_config_setting_validator",
      "set_config_source",
      "artifacts_cache_directory",
      "normalize",
      "allows",
      "validator",
      "process",
      "python_installation_dir",
      "int_normalizer",
      "_get_normalizer",
      "is_reserved"
    ],
    "class_names": [
      "PackageFilterPolicy",
      "Config"
    ],
    "imports": [
      "JSONDecodeError",
      "poetry.locations",
      "pathlib",
      "poetry.config.dict_config_source",
      "DEFAULT_CACHE_DIR",
      "poetry.config.config_source",
      "dataclasses",
      "ClassVar",
      "TOMLFile",
      "ConfigSource",
      "Callable",
      "re",
      "json",
      "Sequence",
      "NormalizedName",
      "Any",
      "logging",
      "FileConfigSource",
      "poetry.config.file_config_source",
      "poetry.toml",
      "annotations",
      "merge_dicts",
      "collections.abc",
      "TYPE_CHECKING",
      "CONFIG_DIR",
      "deepcopy",
      "Mapping",
      "os",
      "Path",
      "copy",
      "canonicalize_name",
      "poetry.utils.helpers",
      "data_dir",
      "typing",
      "DictConfigSource",
      "packaging.utils",
      "__future__"
    ]
  },
  "github_extracted/python-poetry_poetry/build.py": {
    "variables": [
      "name",
      "dist_dir",
      "DistributionType",
      "builder",
      "package",
      "options",
      "_",
      "formats",
      "loggers",
      "result",
      "fmt",
      "output",
      "build_dependency",
      "description",
      "config_setting",
      "build",
      "value",
      "build_handler",
      "build_options",
      "poetry_core_version",
      "key",
      "config_settings",
      "clean"
    ],
    "function_params": [
      "executable",
      "env",
      "options",
      "io",
      "poetry",
      "self",
      "config_settings",
      "target_dir",
      "local_version",
      "fmt"
    ],
    "function_names": [
      "build",
      "_build",
      "__init__",
      "_has_build_backend_defined",
      "handle",
      "_prepare_config_settings",
      "_isolated_build",
      "_requires_isolated_build",
      "__post_init__",
      "_prepare_formats",
      "_get_builder"
    ],
    "class_names": [
      "BuildOptions",
      "BuildHandler",
      "BuildCommand"
    ],
    "imports": [
      "pathlib",
      "poetry.core.constraints.version",
      "poetry.utils.env",
      "cleo.io.io",
      "dataclasses",
      "Option",
      "BUILD_FORMATS",
      "ClassVar",
      "Callable",
      "poetry.masonry.builders",
      "IO",
      "Env",
      "metadata",
      "poetry.utils._compat",
      "Any",
      "Literal",
      "EnvCommand",
      "annotations",
      "collections.abc",
      "TYPE_CHECKING",
      "isolated_builder",
      "Version",
      "remove_directory",
      "Path",
      "option",
      "poetry.utils.helpers",
      "cleo.helpers",
      "typing",
      "poetry.poetry",
      "cleo.io.inputs.option",
      "Poetry",
      "__future__",
      "poetry.console.commands.env_command",
      "poetry.utils.isolated_build"
    ]
  },
  "github_extracted/python-poetry_poetry/config_source.py": {
    "variables": [
      "UNSET",
      "old_key",
      "value",
      "msg",
      "io",
      "new_key",
      "old_value",
      "value_migration",
      "key",
      "new_value",
      "config_"
    ],
    "function_params": [
      "keys",
      "config",
      "value",
      "io",
      "self",
      "key",
      "config_source"
    ],
    "function_names": [
      "apply",
      "add_property",
      "get_property",
      "remove_property",
      "drop_empty_config_category",
      "dry_run"
    ],
    "class_names": [
      "ConfigSource",
      "ConfigSourceMigration",
      "PropertyNotFoundError"
    ],
    "imports": [
      "abc",
      "abstractmethod",
      "cleo.io.null_io",
      "Any",
      "ABC",
      "cleo.io.io",
      "annotations",
      "dataclasses",
      "typing",
      "NullIO",
      "TYPE_CHECKING",
      "IO",
      "__future__",
      "json"
    ]
  },
  "github_extracted/python-poetry_poetry/__init__.py": {
    "variables": [],
    "function_params": [],
    "function_names": [],
    "class_names": [],
    "imports": []
  },
  "github_extracted/python-poetry_poetry/__version__.py": {
    "variables": [
      "__version__"
    ],
    "function_params": [],
    "function_names": [],
    "class_names": [],
    "imports": [
      "annotations",
      "__future__",
      "metadata",
      "poetry.utils._compat"
    ]
  },
  "github_extracted/python-poetry_poetry/file_config_source.py": {
    "variables": [
      "keys",
      "mode",
      "config",
      "new_file",
      "i",
      "toml",
      "initial_config",
      "current_config",
      "key"
    ],
    "function_params": [
      "value",
      "self",
      "file",
      "key"
    ],
    "function_names": [
      "__init__",
      "name",
      "add_property",
      "get_property",
      "secure",
      "remove_property",
      "file"
    ],
    "class_names": [
      "FileConfigSource"
    ],
    "imports": [
      "table",
      "tomlkit",
      "poetry.config.config_source",
      "TOMLFile",
      "ConfigSource",
      "Any",
      "contextmanager",
      "TOMLDocument",
      "annotations",
      "document",
      "collections.abc",
      "TYPE_CHECKING",
      "PropertyNotFoundError",
      "tomlkit.toml_document",
      "contextlib",
      "typing",
      "drop_empty_config_category",
      "poetry.toml.file",
      "__future__",
      "Iterator"
    ]
  },
  "github_extracted/python-poetry_poetry/application.py": {
    "variables": [
      "c",
      "name",
      "sub_commands",
      "original_input",
      "subcommand",
      "suggestions",
      "command",
      "formatter",
      "COMMAND_NOT_FOUND_PREFIX_MESSAGE",
      "handler",
      "command_name",
      "tokens_without_command",
      "_level",
      "dispatcher",
      "poetry",
      "COMMAND_NOT_FOUND_MESSAGES",
      "suggested_names",
      "_",
      "env_manager",
      "sorted_input",
      "loggers",
      "args",
      "run_input",
      "subcommand_index",
      "COMMANDS",
      "command_index",
      "env",
      "module",
      "command_loader",
      "io",
      "words",
      "suggestion_lines",
      "installer",
      "tokens",
      "level",
      "exit_code",
      "without_command",
      "option",
      "definition",
      "value",
      "parser",
      "manager",
      "logger",
      "key",
      "remaining_args",
      "message",
      "command_class"
    ],
    "function_params": [
      "output",
      "error_output",
      "name",
      "event",
      "doc_tag",
      "cls",
      "io",
      "input",
      "suggested_names",
      "_",
      "command",
      "self",
      "event_name"
    ],
    "function_names": [
      "configure_installer_for_event",
      "load_command",
      "_configure_global_options",
      "_load_plugins",
      "_configure_io",
      "_run",
      "project_directory",
      "__init__",
      "_error_write_command_suggestions",
      "register_command_loggers",
      "poetry",
      "configure_env",
      "reset_poetry",
      "create_io",
      "command_loader",
      "_configure_run_command",
      "_default_definition",
      "_sort_global_options",
      "configure_installer_for_command",
      "_load",
      "main"
    ],
    "class_names": [
      "Application"
    ],
    "imports": [
      "cleo.events.event",
      "cleo.io.io",
      "Command",
      "Output",
      "cleo.application",
      "Installer",
      "find_similar_names",
      "annotations",
      "__version__",
      "cleo.io.inputs.argv_input",
      "SelfCommand",
      "COMMAND",
      "Path",
      "poetry.factory",
      "cleo.events.console_command_event",
      "Poetry",
      "CleoCommandNotFoundError",
      "poetry.installation.installer",
      "IO",
      "import_module",
      "CleoError",
      "EnvCommand",
      "collections.abc",
      "cleo.io.outputs.output",
      "poetry.console.logging.io_formatter",
      "suppress",
      "cleo.io.inputs.definition",
      "poetry.console.commands.self.self_command",
      "Application",
      "ApplicationPlugin",
      "Definition",
      "Factory",
      "typing",
      "PluginManager",
      "pathlib",
      "poetry.utils.env",
      "Option",
      "Callable",
      "IOHandler",
      "CommandLoader",
      "InstallerCommand",
      "cast",
      "TYPE_CHECKING",
      "poetry.console.logging.filters",
      "poetry.console.logging.io_handler",
      "cleo.events.console_events",
      "POETRY_FILTER",
      "argparse",
      "Input",
      "EnvManager",
      "ArgvInput",
      "poetry.plugins.application_plugin",
      "Event",
      "poetry.poetry",
      "cleo.events.event_dispatcher",
      "__future__",
      "poetry.console.commands.env_command",
      "EventDispatcher",
      "ConsoleCommandEvent",
      "directory",
      "poetry.__version__",
      "poetry.plugins.plugin_manager",
      "poetry.console.command_loader",
      "importlib",
      "logging",
      "ensure_path",
      "cleo.exceptions",
      "cleo.formatters.style",
      "poetry.console.commands.command",
      "poetry.console.commands.installer_command",
      "IOFormatter",
      "Style",
      "cleo.io.inputs.input",
      "contextlib",
      "poetry.utils.helpers",
      "poetry.console.exceptions",
      "cleo.io.inputs.option",
      "PoetryRuntimeError",
      "cleo._utils"
    ]
  },
  "github_extracted/wandb_wandb/code_save.py": {
    "variables": [
      "run"
    ],
    "function_params": [],
    "function_names": [],
    "class_names": [],
    "imports": [
      "wandb"
    ]
  },
  "github_extracted/wandb_wandb/use-model-error.py": {
    "variables": [
      "run",
      "tmpdir",
      "f",
      "_",
      "artifact",
      "local_path"
    ],
    "function_params": [],
    "function_names": [
      "main"
    ],
    "class_names": [],
    "imports": [
      "use_model",
      "wandb.beta.workflows",
      "tempfile",
      "wandb"
    ]
  },
  "github_extracted/wandb_wandb/log-model.py": {
    "variables": [
      "output",
      "my_model",
      "_",
      "x"
    ],
    "function_params": [
      "self",
      "x"
    ],
    "function_names": [
      "forward",
      "__init__",
      "main"
    ],
    "class_names": [
      "Net"
    ],
    "imports": [
      "torch.nn.functional",
      "log_model",
      "torch",
      "wandb",
      "wandb.beta.workflows",
      "torch.nn"
    ]
  },
  "github_extracted/wandb_wandb/hatch.py": {
    "variables": [
      "path",
      "cargo_output",
      "rust_pkg_root",
      "cmd",
      "line",
      "built_binary_path"
    ],
    "function_params": [
      "cargo_binary",
      "output_path",
      "cargo_output"
    ],
    "function_names": [
      "build_gpu_stats",
      "_get_executable_path"
    ],
    "class_names": [
      "GpuStatsBuildError"
    ],
    "imports": [
      "pathlib",
      "json",
      "subprocess"
    ]
  },
  "github_extracted/wandb_wandb/log-artifact.py": {
    "variables": [
      "run",
      "tmpdir",
      "f",
      "artifact",
      "local_path"
    ],
    "function_params": [],
    "function_names": [
      "main"
    ],
    "class_names": [],
    "imports": [
      "tempfile",
      "wandb"
    ]
  },
  "github_extracted/wandb_wandb/hatch_build.py": {
    "variables": [
      "_WANDB_BUILD_GORACEDETECT",
      "with_race_detection",
      "artifacts",
      "_WANDB_BUILD_SKIP_GPU_STATS",
      "arch",
      "go",
      "src_dir",
      "goos",
      "cargo",
      "_",
      "output",
      "macos_match",
      "with_coverage",
      "plat",
      "_WANDB_RELEASE_COMMIT",
      "_WANDB_BUILD_UNIVERSAL",
      "_WANDB_BUILD_COVERAGE",
      "os",
      "platform_tag",
      "major",
      "value",
      "goarch",
      "match"
    ],
    "function_params": [
      "name",
      "default",
      "build_data",
      "version",
      "self",
      "arch"
    ],
    "function_names": [
      "_get_platform_tag",
      "initialize",
      "_build_gpu_stats",
      "_target_platform",
      "_get_and_require_go_binary",
      "_include_gpu_stats",
      "_is_platform_wheel",
      "_build_wandb_core",
      "_include_wandb_core",
      "_get_env_bool",
      "_must_build_universal",
      "_to_goarch",
      "_prepare_wheel",
      "_git_commit_sha",
      "_get_and_require_cargo_binary"
    ],
    "class_names": [
      "TargetPlatform",
      "CustomBuildHook"
    ],
    "imports": [
      "pathlib",
      "List",
      "dataclasses",
      "re",
      "sysconfig",
      "Any",
      "sys",
      "hatchling.builders.hooks.plugin.interface",
      "typing_extensions",
      "core",
      "os",
      "override",
      "shutil",
      "Dict",
      "hatch",
      "typing",
      "BuildHookInterface",
      "subprocess",
      "platform",
      "gpu_stats"
    ]
  },
  "github_extracted/wandb_wandb/use-model.py": {
    "variables": [
      "run",
      "output",
      "art",
      "sm",
      "my_model",
      "_",
      "x"
    ],
    "function_params": [
      "self",
      "x"
    ],
    "function_names": [
      "forward",
      "__init__",
      "main"
    ],
    "class_names": [
      "Net"
    ],
    "imports": [
      "torch.nn.functional",
      "_SavedModel",
      "torch",
      "wandb",
      "wandb.data_types",
      "use_model",
      "wandb.beta.workflows",
      "torch.nn"
    ]
  },
  "github_extracted/wandb_wandb/another_lib.py": {
    "variables": [],
    "function_params": [],
    "function_names": [],
    "class_names": [],
    "imports": []
  },
  "github_extracted/wandb_wandb/link-artifact.py": {
    "variables": [
      "run",
      "tmpdir",
      "f",
      "artifact",
      "local_path"
    ],
    "function_params": [],
    "function_names": [
      "main"
    ],
    "class_names": [],
    "imports": [
      "wandb.errors",
      "tempfile",
      "CommError",
      "wandb"
    ]
  },
  "github_extracted/wandb_wandb/public_collections.py": {
    "variables": [
      "run",
      "art",
      "collections"
    ],
    "function_params": [],
    "function_names": [
      "main"
    ],
    "class_names": [],
    "imports": [
      "wandb"
    ]
  },
  "github_extracted/wandb_wandb/log_code.py": {
    "variables": [
      "run"
    ],
    "function_params": [],
    "function_names": [],
    "class_names": [],
    "imports": [
      "wandb"
    ]
  },
  "github_extracted/wandb_wandb/use-model-outside-run-error.py": {
    "variables": [
      "run",
      "tmpdir",
      "f",
      "_",
      "artifact",
      "local_path"
    ],
    "function_params": [],
    "function_names": [
      "main"
    ],
    "class_names": [],
    "imports": [
      "use_model",
      "wandb.beta.workflows",
      "tempfile",
      "wandb"
    ]
  },
  "github_extracted/wandb_wandb/fake_lib.py": {
    "variables": [],
    "function_params": [],
    "function_names": [],
    "class_names": [],
    "imports": []
  },
  "github_extracted/wandb_wandb/link-model.py": {
    "variables": [
      "best_model",
      "output",
      "my_model",
      "x"
    ],
    "function_params": [
      "self",
      "x"
    ],
    "function_names": [
      "forward",
      "__init__",
      "main"
    ],
    "class_names": [
      "Net"
    ],
    "imports": [
      "torch.nn.functional",
      "log_model",
      "torch",
      "wandb",
      "link_model",
      "wandb.beta.workflows",
      "torch.nn"
    ]
  },
  "github_extracted/wandb_wandb/log-image-artifact-path.py": {
    "variables": [
      "run",
      "image",
      "art"
    ],
    "function_params": [],
    "function_names": [
      "make_image",
      "main"
    ],
    "class_names": [],
    "imports": [
      "numpy",
      "wandb"
    ]
  },
  "github_extracted/wandb_wandb/link-model-outside-run.py": {
    "variables": [
      "output",
      "art",
      "sm",
      "my_model",
      "x"
    ],
    "function_params": [
      "self",
      "x"
    ],
    "function_names": [
      "forward",
      "__init__",
      "main"
    ],
    "class_names": [
      "Net"
    ],
    "imports": [
      "torch.nn.functional",
      "_SavedModel",
      "torch",
      "wandb",
      "wandb.data_types",
      "link_model",
      "wandb.beta.workflows",
      "torch.nn"
    ]
  },
  "github_extracted/wandb_wandb/log-unicode-artifact.py": {
    "variables": [
      "run",
      "f",
      "artifact"
    ],
    "function_params": [],
    "function_names": [
      "main"
    ],
    "class_names": [],
    "imports": [
      "wandb"
    ]
  },
  "github_extracted/wandb_wandb/public-link-model.py": {
    "variables": [
      "run",
      "output",
      "artifact",
      "fp",
      "x"
    ],
    "function_params": [
      "self",
      "x"
    ],
    "function_names": [
      "forward",
      "__init__",
      "main"
    ],
    "class_names": [
      "Net"
    ],
    "imports": [
      "torch.nn.functional",
      "CommError",
      "wandb.errors",
      "torch",
      "wandb",
      "torch.nn"
    ]
  },
  "github_extracted/wandb_wandb/use-and-link-model.py": {
    "variables": [
      "run",
      "output",
      "art",
      "sm",
      "my_model",
      "x"
    ],
    "function_params": [
      "self",
      "x"
    ],
    "function_names": [
      "forward",
      "__init__",
      "main"
    ],
    "class_names": [
      "Net"
    ],
    "imports": [
      "torch.nn.functional",
      "_SavedModel",
      "torch",
      "wandb",
      "wandb.data_types",
      "link_model",
      "use_model",
      "wandb.beta.workflows",
      "torch.nn"
    ]
  },
  "github_extracted/celery_celery/base.py": {
    "variables": [
      "__all__",
      "arg_name",
      "returned_value",
      "broker_connection",
      "optional_arg",
      "USING_EXECV",
      "pkg",
      "options",
      "routing_key",
      "_local",
      "SYSTEM",
      "return_annotation",
      "fixup",
      "countdown",
      "callback",
      "BaseModel",
      "url",
      "base",
      "router",
      "root_id",
      "attrs",
      "run",
      "arg_value",
      "entry",
      "sig",
      "pending",
      "driver_type",
      "key",
      "kwargs",
      "stamped_headers",
      "conf",
      "amqp",
      "name",
      "periodic_task_args",
      "reverse",
      "user_options",
      "fun",
      "registry_cls",
      "optional_return_annotation",
      "ignore_result",
      "now_in_utc",
      "task_signature",
      "result",
      "task_id",
      "exchange_name",
      "dump_kwargs",
      "task",
      "ERR_ENVVAR_NOT_SET",
      "d",
      "IS_macOS",
      "bound_args",
      "module_name",
      "on_after_configure",
      "backend_cls",
      "_fixups",
      "control_cls",
      "builtin_fixups",
      "log_cls",
      "exchange",
      "parent_id",
      "message",
      "_after_fork_registered",
      "new_oid",
      "have_parent",
      "_pool",
      "steps",
      "Pickler",
      "eta",
      "_filt",
      "loader_cls",
      "limit",
      "_conf",
      "expires_s",
      "exchange_type",
      "settings",
      "queue",
      "default_producer",
      "default_connection",
      "value",
      "IS_WINDOWS",
      "task_cls",
      "logger",
      "context",
      "main",
      "P",
      "BUILTIN_FIXUPS",
      "periodic_task_kwargs",
      "pending_def",
      "arg_annotation",
      "App",
      "Class",
      "stamp",
      "parent",
      "pydantic",
      "producer",
      "on_configure",
      "events_cls",
      "backend",
      "pending_beat",
      "argv",
      "on_after_fork",
      "amqp_cls",
      "ret",
      "_data",
      "on_after_finalize"
    ],
    "function_params": [
      "soft_time_limit",
      "autofinalize",
      "add_to_parent",
      "link_error",
      "serializer",
      "pool",
      "log",
      "args",
      "countdown",
      "allowed_serializers",
      "heartbeat",
      "callback",
      "packages",
      "group_index",
      "url",
      "base",
      "router",
      "root_id",
      "replaced_task_nesting",
      "changes",
      "path",
      "connect_timeout",
      "entry",
      "sig",
      "key",
      "chord",
      "kwargs",
      "conf",
      "amqp",
      "virtual_host",
      "name",
      "connection",
      "reverse",
      "bound",
      "failover_strategy",
      "password",
      "control",
      "fun",
      "fixups",
      "obj",
      "include",
      "pydantic_strict",
      "variable_name",
      "expires",
      "task_id",
      "dump_kwargs",
      "task",
      "namespace",
      "time_limit",
      "store",
      "d",
      "attribute",
      "shared",
      "cert",
      "retries",
      "publisher",
      "transport",
      "userid",
      "loader",
      "app",
      "parent_id",
      "shadow",
      "c",
      "queues",
      "schedule",
      "digest",
      "config_source",
      "set_as_current",
      "eta",
      "port",
      "group_id",
      "force",
      "module",
      "reverse_name",
      "route_name",
      "transport_options",
      "self",
      "pydantic_dump_kwargs",
      "strict",
      "value",
      "key_password",
      "task_cls",
      "context",
      "attr",
      "main",
      "ssl",
      "related_name",
      "task_type",
      "keep_reduce",
      "broker",
      "link",
      "tasks",
      "chain",
      "hostname",
      "default_key",
      "reply_to",
      "task_name",
      "task_fun",
      "lazy",
      "Class",
      "strict_typing",
      "events",
      "pydantic",
      "auto",
      "producer",
      "backend",
      "filter",
      "silent",
      "login_method",
      "argv",
      "bind",
      "result_cls",
      "pydantic_context"
    ],
    "function_names": [
      "uses_utc_timezone",
      "start",
      "worker_main",
      "select_queues",
      "autodiscover_tasks",
      "__contains__",
      "_autodiscover_tasks_from_fixups",
      "pool",
      "log",
      "Task",
      "annotations",
      "wrapper",
      "_after_fork",
      "subclass_with_self",
      "send_task",
      "_sig_to_periodic_task_entry",
      "__reduce_args__",
      "__autoset",
      "conf",
      "connection_or_acquire",
      "amqp",
      "_unpickle_appattr",
      "connection",
      "set_current",
      "Beat",
      "thread_oid",
      "_autodiscover_tasks",
      "update",
      "clear",
      "control",
      "app_has_custom",
      "cons",
      "now",
      "set_default",
      "timezone",
      "register_task",
      "connection_for_read",
      "type_checker",
      "pydantic_wrapper",
      "task",
      "setup_security",
      "producer_pool",
      "config_from_cmdline",
      "inner_create_task_cls",
      "__enter__",
      "Worker",
      "connection_for_write",
      "loader",
      "add_periodic_task",
      "config_from_envvar",
      "signature",
      "on_init",
      "__exit__",
      "_connection",
      "_canvas",
      "_ensure_after_fork",
      "_get_backend",
      "_after_fork_cleanup_app",
      "create_task_cls",
      "current_worker_task",
      "_autodiscover_tasks_from_names",
      "_load_config",
      "__len__",
      "_finalize_pending_conf",
      "_task_from_fun",
      "__setitem__",
      "oid",
      "_create_task_cls",
      "__repr__",
      "data",
      "_backend",
      "config_from_object",
      "GroupResult",
      "tasks",
      "_acquire_connection",
      "close",
      "__reduce_v1__",
      "bugreport",
      "_rgetattr",
      "__init__",
      "either",
      "__reduce_keys__",
      "_get_default_loader",
      "WorkController",
      "setdefault",
      "__reduce__",
      "producer_or_acquire",
      "_add_periodic_task",
      "gen_task_name",
      "events",
      "AsyncResult",
      "backend",
      "current_task",
      "prepare_config",
      "add_defaults",
      "ResultSet",
      "finalize"
    ],
    "class_names": [
      "Celery",
      "PendingConfiguration"
    ],
    "imports": [
      "_deregister_app",
      "starpromise",
      "kombu.transport.native_delayed_delivery",
      "utils.quorum_queues",
      "cached_property",
      "uuid",
      "_old_key_to_new",
      "connect_on_app_finalize",
      "datetime",
      "annotations",
      "threading",
      "UserDict",
      "vine",
      "celery.utils.log",
      "annotation_is_class",
      "kombu.clocks",
      "TaskRegistry",
      "AttributeDictMixin",
      "LamportClock",
      "get_loader_cls",
      "signals",
      "BaseModel",
      "os",
      "celery.local",
      "celery.utils.functional",
      "celery.bin.celery",
      "celery.security",
      "celery.exceptions",
      "kombu.common",
      "_unpickle_app_v2",
      "oid_from",
      "functools",
      "_announce_app_finalized",
      "celery.utils.dispatch",
      "backends",
      "Settings",
      "Exit",
      "calculate_routing_key",
      "timezone",
      "sys",
      "register_after_fork",
      "kombu.utils.uuid",
      "deque",
      "setup_security",
      "instantiate",
      "celery.utils.collections",
      "AlwaysEagerIgnored",
      "appstr",
      "autoretry",
      "typing",
      "kombu.utils.compat",
      "_unpickle_app",
      "abstract",
      "set_default_app",
      "celery.utils.objects",
      "FallbackContext",
      "PromiseProxy",
      "celery.loaders",
      "kombu",
      "celery.utils.time",
      "maybe_evaluate",
      "_register_app",
      "_set_current_app",
      "celery",
      "defaults",
      "get_optional_arg",
      "utils.annotations",
      "dateutil.parser",
      "maybe_make_aware",
      "click.exceptions",
      "isoparse",
      "utils",
      "canvas",
      "maybe_list",
      "detect_settings",
      "attrgetter",
      "warnings",
      "find_deprecated_settings",
      "operator",
      "Exchange",
      "_task_stack",
      "pools",
      "shared_task",
      "prepare",
      "get_current_app",
      "mro_lookup",
      "_new_key_to_old",
      "bugreport",
      "inspect",
      "collections",
      "defaultdict",
      "add_autoretry_behaviour",
      "symbol_by_name",
      "importlib",
      "head_from_fun",
      "first",
      "get_logger",
      "kombu.utils.objects",
      "AppPickler",
      "to_utc",
      "gen_task_name",
      "annotation_issubclass",
      "pydantic",
      "detect_quorum_queues",
      "celery.utils.imports",
      "registry",
      "get_current_worker_task",
      "celery.utils",
      "ImproperlyConfigured",
      "DEFAULT_SECURITY_DIGEST",
      "platforms",
      "Signal",
      "builtins",
      "celery._state"
    ]
  },
  "github_extracted/celery_celery/backends.py": {
    "variables": [
      "UNKNOWN_BACKEND",
      "__all__",
      "BACKEND_ALIASES",
      "cls",
      "aliases",
      "_",
      "loader",
      "url",
      "scheme",
      "backend"
    ],
    "function_params": [
      "backend",
      "loader",
      "extension_namespace"
    ],
    "function_names": [
      "by_name",
      "by_url"
    ],
    "class_names": [],
    "imports": [
      "ImproperlyConfigured",
      "symbol_by_name",
      "reraise",
      "sys",
      "types",
      "load_extension_class_names",
      "celery.utils.imports",
      "current_app",
      "celery.exceptions",
      "celery._state"
    ]
  },
  "github_extracted/celery_celery/trace.py": {
    "variables": [
      "exc_info",
      "__all__",
      "__slots__",
      "track_started",
      "LOG_FAILURE",
      "orig_exc",
      "_loc",
      "sargs",
      "args",
      "einfo",
      "LOG_RETRY",
      "stack",
      "pid",
      "tb",
      "postrun_receivers",
      "prerun_receivers",
      "root_id",
      "request",
      "resultrepr_maxsize",
      "deduplicate_successful_tasks",
      "_localized",
      "type_",
      "sig",
      "loader_task_init",
      "kwargs",
      "push_task",
      "trace_ok_t",
      "REJECTED",
      "sigs",
      "FAILURE",
      "fun",
      "log_policy_expected",
      "log_policy_unexpected",
      "exc_type",
      "_chsig",
      "send_prerun",
      "_type",
      "reason",
      "task_request",
      "ignore_result",
      "groups",
      "log_policy_ignore",
      "policy",
      "exc",
      "_value",
      "inherit_parent_priority",
      "T",
      "group_",
      "embed",
      "LOG_RECEIVED",
      "_tb",
      "eobj",
      "loader",
      "task_before_start",
      "app",
      "log_policy_internal",
      "send_success",
      "signature",
      "Rstr",
      "retval",
      "accept",
      "SUCCESS",
      "_does_info",
      "exception",
      "callbacks",
      "EXCEPTION_STATES",
      "req",
      "IGNORE_STATES",
      "IGNORED",
      "skwargs",
      "RETRY",
      "time_start",
      "loader_cleanup",
      "send_postrun",
      "r",
      "R",
      "logger",
      "context",
      "state",
      "request_stack",
      "LOG_SUCCESS",
      "task_on_success",
      "chain",
      "tasks",
      "hostname",
      "log_policy_t",
      "I",
      "_patched",
      "store_errors",
      "task_priority",
      "success_receivers",
      "LOG_INTERNAL_ERROR",
      "publish_result",
      "LOG_IGNORED",
      "_",
      "push_request",
      "redelivered",
      "pop_task",
      "pop_request",
      "STARTED",
      "orig",
      "log_policy_reject",
      "traceback",
      "task_after_return",
      "LOG_REJECTED"
    ],
    "function_params": [
      "name",
      "retval",
      "eager",
      "hostname",
      "propagate",
      "uuid",
      "store_errors",
      "monotonic",
      "_loc",
      "Info",
      "args",
      "einfo",
      "fmt",
      "exc",
      "content_encoding",
      "task",
      "req",
      "IGNORE_STATES",
      "content_type",
      "self",
      "request",
      "call_errbacks",
      "default",
      "body",
      "loader",
      "context",
      "attr",
      "state",
      "app",
      "kwargs",
      "loads",
      "trace_ok_t"
    ],
    "function_names": [
      "reset_worker_optimizations",
      "_install_stack_protection",
      "on_error",
      "__protected_call__",
      "_signal_internal_error",
      "report_internal_error",
      "handle_failure",
      "__init__",
      "traceback_clear",
      "handle_retry",
      "_log_error",
      "handle_error_state",
      "info",
      "setup_worker_optimizations",
      "trace_task",
      "build_tracer",
      "trace_task_ret",
      "handle_reject",
      "task_has_custom",
      "get_task_name",
      "get_log_policy",
      "fast_trace_task",
      "handle_ignore"
    ],
    "class_names": [
      "TraceInfo"
    ],
    "imports": [
      "ExceptionInfo",
      "celery.utils.objects",
      "gethostname",
      "EncodeError",
      "kombu.serialization",
      "successful_requests",
      "_task_stack",
      "namedtuple",
      "BackendGetMetaError",
      "safe_repr",
      "InvalidTaskError",
      "mro_lookup",
      "prepare_accept_content",
      "get_pickled_exception",
      "billiard.einfo",
      "collections",
      "get_pickleable_exception",
      "Retry",
      "celery.worker.state",
      "logging",
      "celery",
      "states",
      "Task",
      "saferepr",
      "sys",
      "celery.utils.serialization",
      "celery.utils.log",
      "group",
      "safe_str",
      "get_logger",
      "celery.result",
      "Reject",
      "celery.utils.nodenames",
      "celery.utils.saferepr",
      "Ignore",
      "kombu.utils.encoding",
      "AsyncResult",
      "time",
      "signals",
      "ExceptionWithTraceback",
      "current_app",
      "Context",
      "os",
      "canvas",
      "celery.app.task",
      "kombu.exceptions",
      "warnings",
      "loads",
      "warn",
      "get_pickleable_etype",
      "celery.exceptions",
      "celery._state"
    ]
  },
  "github_extracted/celery_celery/__main__.py": {
    "variables": [
      "__all__"
    ],
    "function_params": [],
    "function_names": [
      "main"
    ],
    "class_names": [],
    "imports": [
      "sys",
      "maybe_patch_concurrency",
      "main",
      "celery.bin.celery"
    ]
  },
  "github_extracted/celery_celery/amqp.py": {
    "variables": [
      "argsrepr",
      "queues",
      "q",
      "name",
      "__all__",
      "active",
      "header",
      "default_policy",
      "sent_receivers",
      "default_serializer",
      "retry",
      "ret",
      "default_rkey",
      "k",
      "task_message",
      "_producer_pool",
      "accept",
      "utc",
      "send_after_publish",
      "Consumer",
      "exname",
      "QUEUE_FORMAT",
      "eta",
      "sent_event",
      "now",
      "v",
      "default_retry",
      "headers",
      "_consume_from",
      "send_task_sent",
      "max_priority",
      "exclude",
      "routing_key",
      "stamps",
      "_",
      "timezone",
      "queue_arguments",
      "BrokerConnection",
      "create_missing",
      "autoexchange",
      "args",
      "expires",
      "default_exchange",
      "default_compressor",
      "info",
      "conf",
      "exchange_type",
      "queues_cls",
      "before_receivers",
      "Connection",
      "root_id",
      "default_evd",
      "queue",
      "send_before_publish",
      "evd",
      "Producer",
      "qname",
      "kwargsrepr_maxsize",
      "default_queue",
      "after_receivers",
      "default_delivery_mode",
      "body",
      "delivery_mode",
      "exchange",
      "declare",
      "publisher_pool",
      "properties",
      "headers2",
      "default_routing_key",
      "_rp",
      "kwargs",
      "INT_MIN",
      "_rtable",
      "argsrepr_maxsize",
      "kwargsrepr"
    ],
    "function_params": [
      "encoding",
      "soft_time_limit",
      "queues",
      "name",
      "argsrepr",
      "retry",
      "chain",
      "accept",
      "errbacks",
      "reply_to",
      "retry_policy",
      "event_dispatcher",
      "serializer",
      "eta",
      "compression",
      "now",
      "group_id",
      "kwargsrepr",
      "headers",
      "max_priority",
      "include",
      "exclude",
      "s",
      "routing_key",
      "timezone",
      "ignore_result",
      "create_missing",
      "callbacks",
      "autoexchange",
      "args",
      "task_id",
      "default_exchange",
      "expires",
      "chord",
      "countdown",
      "what",
      "time_limit",
      "message",
      "kwargs",
      "d",
      "exchange_type",
      "channel",
      "producer",
      "indent",
      "create_sent_event",
      "self",
      "group_index",
      "root_id",
      "replaced_task_nesting",
      "queue",
      "confirm_timeout",
      "origin",
      "timeout",
      "retries",
      "value",
      "delivery_mode",
      "exchange",
      "declare",
      "default_routing_key",
      "app",
      "indent_first",
      "parent_id",
      "stamped_headers",
      "shadow"
    ],
    "function_names": [
      "_create_task_sender",
      "queues",
      "add_compat",
      "consume_from",
      "utc",
      "__getitem__",
      "as_task_v2",
      "deselect",
      "__init__",
      "Router",
      "select",
      "as_task_v1",
      "add",
      "new_missing",
      "flush_routes",
      "default_exchange",
      "select_add",
      "send_task_message",
      "__missing__",
      "_handle_conf_update",
      "__setitem__",
      "producer_pool",
      "format",
      "create_task_message",
      "TaskConsumer",
      "_verify_seconds",
      "router",
      "_set_max_priority",
      "utf8dict",
      "_event_dispatcher",
      "default_queue",
      "_add",
      "routes",
      "Queues"
    ],
    "class_names": [
      "AMQP",
      "Queues"
    ],
    "imports": [
      "Exchange",
      "cached_property",
      "pools",
      "anon_nodename",
      "namedtuple",
      "celery.utils.text",
      "Consumer",
      "kombu",
      "celery.utils.time",
      "collections",
      "celery",
      "datetime",
      "timedelta",
      "saferepr",
      "collections.abc",
      "Queue",
      "numbers",
      "maybe_make_aware",
      "kombu.utils.objects",
      "celery.utils.nodenames",
      "celery.utils.saferepr",
      "Broadcast",
      "indent",
      "signals",
      "Connection",
      "Mapping",
      "Producer",
      "maybe_list",
      "kombu.utils.functional",
      "routes",
      "weakref",
      "kombu.common",
      "WeakValueDictionary"
    ]
  },
  "github_extracted/celery_celery/events.py": {
    "variables": [
      "receiver_cls",
      "d",
      "dispatcher_cls",
      "state_cls",
      "prod"
    ],
    "function_params": [
      "hostname",
      "buffer_while_offline",
      "self",
      "app",
      "enabled"
    ],
    "function_names": [
      "__init__",
      "Receiver",
      "default_dispatcher",
      "Dispatcher",
      "State"
    ],
    "class_names": [
      "Events"
    ],
    "imports": [
      "kombu.utils.objects",
      "contextmanager",
      "cached_property",
      "contextlib"
    ]
  },
  "github_extracted/celery_celery/annotations.py": {
    "variables": [
      "__all__",
      "x",
      "annotations",
      "anno",
      "_first_match_any",
      "_first_match"
    ],
    "function_params": [
      "task",
      "annotations",
      "self",
      "anno",
      "annotation"
    ],
    "function_names": [
      "annotate_any",
      "expand_annotation",
      "annotate",
      "prepare",
      "resolve_all"
    ],
    "class_names": [
      "MapAnnotation"
    ],
    "imports": [
      "celery.utils.functional",
      "mlazy",
      "instantiate",
      "celery.utils.imports",
      "firstmethod"
    ]
  },
  "github_extracted/celery_celery/task.py": {
    "variables": [
      "taskset",
      "soft_time_limit",
      "priority",
      "__all__",
      "track_started",
      "serializer",
      "__bound__",
      "headers",
      "trail",
      "mod",
      "options",
      "routing_key",
      "acks_late",
      "flags",
      "args",
      "loglevel",
      "countdown",
      "tb",
      "callback",
      "group_index",
      "final_task_links",
      "__trace__",
      "correlation_id",
      "replaced_task_nesting",
      "root_id",
      "resultrepr_maxsize",
      "request",
      "Strategy",
      "id",
      "sig",
      "config_name",
      "properties",
      "send_events",
      "key",
      "kwargs",
      "chord",
      "stamped_headers",
      "conf",
      "R_BOUND_TASK",
      "name",
      "header",
      "BaseTask",
      "errbacks",
      "celery_keys",
      "is_eager",
      "logfile",
      "stamps",
      "ignore_result",
      "acks_on_failure_or_timeout",
      "MaxRetriesExceededError",
      "expires",
      "result",
      "task_id",
      "task",
      "_protected",
      "time_limit",
      "content_type",
      "extract_exec_options",
      "d",
      "__v2_compat__",
      "limit_soft",
      "retries",
      "_children",
      "Request",
      "body",
      "_app",
      "typing",
      "exchange",
      "app",
      "parent_id",
      "check_arguments",
      "shadow",
      "abstract",
      "throw",
      "retval",
      "t",
      "max_retries",
      "utc",
      "retry_policy",
      "eta",
      "limit_hard",
      "timelimit",
      "v",
      "called_directly",
      "was_bound",
      "R_INSTANCE",
      "callbacks",
      "req",
      "store_errors_even_if_ignored",
      "delivery_info",
      "data",
      "_backend",
      "origin",
      "value",
      "S",
      "execution_options",
      "state",
      "request_stack",
      "meth",
      "chain_task",
      "chain",
      "hostname",
      "k",
      "_exec_options",
      "eager_producer",
      "reply_to",
      "default_retry_delay",
      "tracer",
      "from_config",
      "R_UNBOUND_TASK",
      "subtask_from_request",
      "attr_name",
      "fmt",
      "group",
      "content_encoding",
      "errback",
      "subtask",
      "OperationalError",
      "TaskType",
      "backend",
      "_default_request",
      "preopts",
      "throws",
      "orig",
      "reject_on_worker_lost",
      "rate_limit",
      "ret"
    ],
    "function_params": [
      "throw",
      "link",
      "retry",
      "retval",
      "consumer",
      "max_retries",
      "it",
      "retry_policy",
      "link_error",
      "eta",
      "status",
      "headers",
      "lazy",
      "options",
      "logfile",
      "flags",
      "args",
      "task_id",
      "einfo",
      "result",
      "fmt",
      "exc",
      "task",
      "countdown",
      "loglevel",
      "around",
      "cls",
      "producer",
      "self",
      "request",
      "n",
      "queue",
      "meta",
      "default",
      "retries",
      "value",
      "type_",
      "sig",
      "attr",
      "app",
      "key",
      "kwargs",
      "state",
      "shadow"
    ],
    "function_names": [
      "apply",
      "send_event",
      "starmap",
      "__name__",
      "on_failure",
      "retry",
      "signature",
      "update",
      "on_replace",
      "add_trail",
      "_get_request",
      "replace",
      "_get_app",
      "clear",
      "on_bound",
      "__init__",
      "si",
      "_get_custom_headers",
      "delay",
      "s",
      "_reprtask",
      "_get_exec_options",
      "update_state",
      "get",
      "__call__",
      "annotate",
      "signature_from_request",
      "__reduce__",
      "start_strategy",
      "push_request",
      "as_execution_options",
      "apply_async",
      "map",
      "on_retry",
      "before_start",
      "chunks",
      "on_success",
      "AsyncResult",
      "children",
      "__repr__",
      "backend",
      "add_to_chord",
      "run",
      "after_return",
      "pop_request",
      "add_around",
      "bind",
      "_strflags",
      "shadow_name"
    ],
    "class_names": [
      "Context",
      "Task"
    ],
    "imports": [
      "abstract",
      "ExceptionInfo",
      "gethostname",
      "signature",
      "_task_stack",
      "serialization",
      "uuid",
      "kombu",
      "class_property",
      "billiard.einfo",
      "Retry",
      "LocalStack",
      "celery",
      "states",
      "annotations",
      "celery.canvas",
      "sys",
      "denied_join_result",
      "mattrgetter",
      "MaxRetriesExceededError",
      "celery.utils.serialization",
      "EagerResult",
      "_unpickle_task_v2",
      "group",
      "xmap",
      "kombu.utils.uuid",
      "celery.result",
      "Reject",
      "celery.utils.nodenames",
      "Ignore",
      "chunks",
      "celery.utils.threads",
      "OperationalError",
      "raise_with_context",
      "build_tracer",
      "instantiate",
      "celery.utils.imports",
      "celery.app.trace",
      "ExceptionWithTraceback",
      "_chain",
      "current_app",
      "registry",
      "resolve_all",
      "utils",
      "celery.local",
      "celery.utils",
      "ImproperlyConfigured",
      "celery.utils.functional",
      "appstr",
      "maybe_list",
      "kombu.exceptions",
      "xstarmap",
      "celery.exceptions",
      "celery._state"
    ]
  },
  "github_extracted/celery_celery/registry.py": {
    "variables": [
      "NotRegistered",
      "task",
      "name",
      "__all__"
    ],
    "function_params": [
      "task",
      "name",
      "module",
      "self",
      "key",
      "type"
    ],
    "function_names": [
      "__missing__",
      "_unpickle_task",
      "filter_types",
      "register",
      "regular",
      "unregister",
      "periodic",
      "_unpickle_task_v2"
    ],
    "class_names": [
      "TaskRegistry"
    ],
    "imports": [
      "import_module",
      "inspect",
      "add_autoretry_behaviour",
      "InvalidTaskError",
      "NotRegistered",
      "importlib",
      "get_current_app",
      "celery.app.autoretry",
      "celery.exceptions",
      "celery._state"
    ]
  },
  "github_extracted/celery_celery/builtins.py": {
    "variables": [
      "header",
      "__all__",
      "deps",
      "tasks",
      "ready",
      "culprit",
      "ch",
      "taskit",
      "s",
      "reason",
      "i",
      "result",
      "parent",
      "task",
      "j",
      "producer",
      "callback",
      "stask",
      "index",
      "r",
      "item",
      "body",
      "interval",
      "logger",
      "app",
      "ret"
    ],
    "function_params": [
      "header",
      "eager",
      "tasks",
      "max_retries",
      "it",
      "add_to_parent",
      "group_id",
      "result_from_tuple",
      "partial_args",
      "result",
      "Result",
      "task",
      "countdown",
      "callback",
      "self",
      "n",
      "body",
      "interval",
      "app",
      "GroupResult"
    ],
    "function_names": [
      "add_accumulate_task",
      "add_map_task",
      "add_chord_task",
      "accumulate",
      "xstarmap",
      "add_chunk_task",
      "chunks",
      "chain",
      "add_chain_task",
      "add_starmap_task",
      "backend_cleanup",
      "add_unlock_chord_task",
      "chord",
      "group",
      "unlock_chord",
      "add_group_task",
      "add_backend_cleanup_task",
      "xmap"
    ],
    "class_names": [],
    "imports": [
      "connect_on_app_finalize",
      "get_logger",
      "celery.result",
      "result_from_tuple",
      "maybe_signature",
      "ChordError",
      "signature",
      "chunks",
      "celery",
      "celery.canvas",
      "allow_join_result",
      "group",
      "celery.utils.log",
      "chord",
      "celery.exceptions",
      "celery._state"
    ]
  },
  "github_extracted/celery_celery/defaults.py": {
    "variables": [
      "name",
      "__all__",
      "opts",
      "OLD_NS_BEAT",
      "DEFAULT_ACCEPT_CONTENT",
      "old",
      "DEFAULT_TASK_LOG_FMT",
      "deprecate_by",
      "_OLD_SETTING_KEYS",
      "old_key",
      "typemap",
      "options",
      "new_key",
      "_",
      "__compat",
      "namespace",
      "stack",
      "ns",
      "NAMESPACES",
      "o",
      "_TO_NEW_KEY",
      "DEFAULTS",
      "DEFAULT_PROCESS_LOG_FMT",
      "OLD_NS",
      "_TO_OLD_KEY",
      "remove_by",
      "oldkey",
      "DEFAULT_SECURITY_DIGEST",
      "opt",
      "value",
      "DEFAULT_POOL",
      "alt",
      "OLD_NS_WORKER",
      "SETTING_KEYS",
      "attr",
      "key",
      "_OLD_DEFAULTS",
      "searchresult"
    ],
    "function_params": [
      "keyfilter",
      "name",
      "source",
      "default",
      "opt",
      "namespace",
      "ns",
      "value",
      "d",
      "self",
      "__old__",
      "key",
      "root"
    ],
    "function_names": [
      "flatten",
      "__init__",
      "to_python",
      "Namespace",
      "find_deprecated_settings",
      "__repr__",
      "old_ns",
      "find",
      "_flatten_keys",
      "_to_compat"
    ],
    "class_names": [
      "Option"
    ],
    "imports": [
      "celery.utils.functional",
      "celery.utils",
      "collections",
      "deque",
      "memoize",
      "deprecated",
      "datetime",
      "timedelta",
      "strtobool",
      "namedtuple",
      "celery.utils.serialization"
    ]
  },
  "github_extracted/celery_celery/utils.py": {
    "variables": [
      "__all__",
      "suspect",
      "really_left",
      "k",
      "preconf",
      "found",
      "ignore_keys",
      "all_keys",
      "left",
      "is_in_new",
      "v",
      "source",
      "filt",
      "E_MIX_NEW_INTO_OLD",
      "part",
      "defaults",
      "sym",
      "conn",
      "_settings_info_t",
      "HIDDEN_SETTINGS",
      "x",
      "driver_v",
      "dict_members",
      "info",
      "settings",
      "is_in_old",
      "FMT_REPLACE_SETTING",
      "setting",
      "_old_settings_info",
      "old_keys",
      "value",
      "_settings_info",
      "have",
      "transport",
      "E_MIX_OLD_INTO_NEW",
      "BUGREPORT_INFO",
      "key",
      "kwargs",
      "app",
      "conf"
    ],
    "function_params": [
      "amqp",
      "name",
      "censored",
      "imp",
      "preconf",
      "ignore_keys",
      "config_source",
      "all_keys",
      "control",
      "log",
      "symbol_by_name",
      "pickler",
      "prefix",
      "namespace",
      "events",
      "kwargs",
      "cls",
      "with_defaults",
      "self",
      "backend",
      "changes",
      "accept_magic_kwargs",
      "old_keys",
      "value",
      "loader",
      "app",
      "key",
      "main",
      "mask",
      "conf",
      "convert"
    ],
    "function_names": [
      "table",
      "get_by_parts",
      "build_standard_kwargs",
      "result_backend",
      "without_defaults",
      "find_value_for_key",
      "build_kwargs",
      "_unpickle_app_v2",
      "broker_write_url",
      "construct",
      "broker_url",
      "_old_key_to_new",
      "prepare",
      "task_default_routing_key",
      "_new_key_to_old",
      "filter_hidden_settings",
      "humanize",
      "bugreport",
      "__init__",
      "value_set_for",
      "find_app",
      "find_option",
      "timezone",
      "task_default_exchange",
      "__call__",
      "maybe_censor",
      "maybe_warn_deprecated_settings",
      "appstr",
      "broker_read_url",
      "detect_settings",
      "finalize",
      "_unpickle_app"
    ],
    "class_names": [
      "Settings",
      "AppPickler"
    ],
    "imports": [
      "pyimplementation",
      "kombu.utils.url",
      "celery.utils.text",
      "namedtuple",
      "_OLD_DEFAULTS",
      "re",
      "kombu",
      "celery.platforms",
      "collections",
      "pretty",
      "_OLD_SETTING_KEYS",
      "symbol_by_name",
      "celery",
      "maybe_sanitize_url",
      "defaults",
      "Celery",
      "collections.abc",
      "ConfigurationView",
      "find",
      "import_from_cwd",
      "qualname",
      "deepcopy",
      "_TO_NEW_KEY",
      "billiard",
      "DEFAULTS",
      "celery.utils.imports",
      "celery.utils.collections",
      "Mapping",
      "os",
      "Connection",
      "base",
      "_TO_OLD_KEY",
      "celery.utils",
      "copy",
      "ImproperlyConfigured",
      "ModuleType",
      "deprecated",
      "celery.app.defaults",
      "types",
      "SETTING_KEYS",
      "platform",
      "celery.exceptions"
    ]
  },
  "github_extracted/celery_celery/routes.py": {
    "variables": [
      "v",
      "route",
      "map",
      "__all__",
      "query",
      "options",
      "k",
      "routes",
      "regex",
      "kwargs",
      "router",
      "Pattern",
      "queue"
    ],
    "function_params": [
      "task",
      "queues",
      "name",
      "route",
      "map",
      "options",
      "kwargs",
      "self",
      "routes",
      "app",
      "create_missing",
      "router",
      "args",
      "task_type"
    ],
    "function_names": [
      "__init__",
      "expand_route",
      "route",
      "query_router",
      "expand_router_string",
      "lookup_route",
      "expand_destination",
      "__call__",
      "prepare"
    ],
    "class_names": [
      "Router",
      "MapRoute"
    ],
    "imports": [
      "Queue",
      "celery.utils.functional",
      "fnmatch",
      "mlazy",
      "collections",
      "maybe_evaluate",
      "symbol_by_name",
      "celery.utils.collections",
      "kombu",
      "lpmerge",
      "collections.abc",
      "celery.utils.imports",
      "re",
      "Mapping",
      "OrderedDict",
      "celery.exceptions",
      "QueueNotFound"
    ]
  },
  "github_extracted/celery_celery/__init__.py": {
    "variables": [],
    "function_params": [],
    "function_names": [],
    "class_names": [],
    "imports": []
  },
  "github_extracted/celery_celery/_state.py": {
    "variables": [
      "pop_current_task",
      "task",
      "__all__",
      "current_task",
      "default_app",
      "_task_join_will_block",
      "_tls",
      "_on_app_finalizers",
      "app_or_default",
      "_apps",
      "_task_stack",
      "callback",
      "callbacks",
      "get_current_app",
      "current_app",
      "push_current_task",
      "current_process"
    ],
    "function_params": [
      "callback",
      "blocks",
      "app"
    ],
    "function_names": [
      "connect_on_app_finalize",
      "_deregister_app",
      "set_default_app",
      "_app_or_default_trace",
      "_get_active_apps",
      "_app_or_default",
      "_set_current_app",
      "_register_app",
      "enable_trace",
      "_set_task_join_will_block",
      "task_join_will_block",
      "get_current_task",
      "_get_current_app",
      "_announce_app_finalized",
      "get_current_app",
      "get_current_worker_task",
      "disable_trace"
    ],
    "class_names": [
      "_TLS"
    ],
    "imports": [
      "celery.local",
      "print_stack",
      "LocalStack",
      "billiard.process",
      "celery.utils.threads",
      "Proxy",
      "Celery",
      "sys",
      "threading",
      "traceback",
      "celery.app.base",
      "weakref",
      "os",
      "current_process"
    ]
  },
  "github_extracted/celery_celery/autoretry.py": {
    "variables": [
      "autoretry_for",
      "retry_backoff_max",
      "retry_jitter",
      "retry_backoff",
      "dont_autoretry_for",
      "ret",
      "retry_kwargs"
    ],
    "function_params": [
      "task"
    ],
    "function_names": [
      "run",
      "add_autoretry_behaviour"
    ],
    "class_names": [],
    "imports": [
      "Retry",
      "Ignore",
      "wraps",
      "get_exponential_backoff_interval",
      "celery.utils.time",
      "vine.utils",
      "celery.exceptions"
    ]
  },
  "github_extracted/celery_celery/log.py": {
    "variables": [
      "task",
      "handler",
      "loglevel",
      "__all__",
      "stream",
      "MP_LOG",
      "proxy",
      "logfile_name",
      "logfile",
      "format",
      "receivers",
      "logger",
      "root",
      "colorize",
      "handled",
      "h",
      "_setup"
    ],
    "function_params": [
      "stdout",
      "redirect_stdouts",
      "loglevel",
      "name",
      "was_setup",
      "hostname",
      "logfile",
      "format",
      "propagate",
      "stderr",
      "self",
      "logger",
      "app",
      "formatter",
      "colorize",
      "enabled",
      "redirect_level",
      "record"
    ],
    "function_names": [
      "_detect_handler",
      "__init__",
      "redirect_stdouts",
      "colored",
      "redirect_stdouts_to_logger",
      "setup_task_loggers",
      "format",
      "_configure_logger",
      "setup_handlers",
      "supports_color",
      "setup",
      "get_default_logger",
      "_has_handler",
      "_is_configured",
      "setup_logging_subsystem",
      "already_setup"
    ],
    "class_names": [
      "TaskFormatter",
      "Logging"
    ],
    "imports": [
      "CPendingDeprecationWarning",
      "LoggingProxy",
      "set_default_encoding_file",
      "class_property",
      "celery.platforms",
      "mlevel",
      "colored",
      "logging",
      "celery",
      "sys",
      "celery.utils.log",
      "get_logger",
      "reset_multiprocessing_logger",
      "celery.utils.nodenames",
      "logging.handlers",
      "kombu.utils.encoding",
      "signals",
      "node_format",
      "os",
      "isatty",
      "ColorFormatter",
      "celery.local",
      "WatchedFileHandler",
      "CDeprecationWarning",
      "get_current_task",
      "warnings",
      "celery.utils.term",
      "celery.exceptions",
      "get_multiprocessing_logger",
      "celery._state"
    ]
  },
  "github_extracted/celery_celery/control.py": {
    "variables": [
      "name",
      "__all__",
      "node",
      "dupes",
      "Mailbox",
      "response",
      "ids",
      "reply",
      "nodes",
      "by_node",
      "conn",
      "task_ids",
      "result",
      "host",
      "discard_all",
      "item",
      "arguments",
      "registered_tasks",
      "W_DUPNODE",
      "logger",
      "matcher",
      "app",
      "pattern"
    ],
    "function_params": [
      "connection",
      "command",
      "soft",
      "type",
      "control",
      "reply",
      "action",
      "headers",
      "task_name",
      "options",
      "routing_key",
      "signal",
      "min",
      "limit",
      "revoked",
      "hard",
      "task_id",
      "safe",
      "max",
      "exchange_type",
      "with_defaults",
      "channel",
      "destination",
      "self",
      "callback",
      "n",
      "queue",
      "reload",
      "timeout",
      "topic",
      "arguments",
      "id",
      "max_depth",
      "exchange",
      "reloader",
      "from_node",
      "samples",
      "matcher",
      "app",
      "rate_limit",
      "modules",
      "pattern",
      "terminate"
    ],
    "function_names": [
      "active_queues",
      "reserved",
      "active",
      "pool_grow",
      "ping",
      "stats",
      "memsample",
      "memdump",
      "__init__",
      "inspect",
      "revoke",
      "query_task",
      "_prepare",
      "scheduled",
      "pool_restart",
      "_after_fork",
      "revoked",
      "hello",
      "pool_shrink",
      "rate_limit",
      "heartbeat",
      "time_limit",
      "broadcast",
      "election",
      "objgraph",
      "purge",
      "disable_events",
      "_request",
      "registered",
      "add_consumer",
      "autoscale",
      "flatten_reply",
      "revoke_by_stamped_headers",
      "enable_events",
      "report",
      "clock",
      "shutdown",
      "cancel_consumer",
      "_after_fork_cleanup_control",
      "terminate",
      "conf"
    ],
    "class_names": [
      "Inspect",
      "Control"
    ],
    "imports": [
      "cached_property",
      "celery.utils.text",
      "Mailbox",
      "lazy",
      "kombu.pidbox",
      "register_after_fork",
      "pluralize",
      "celery.utils.log",
      "get_logger",
      "kombu.utils.objects",
      "TERM_SIGNAME",
      "billiard.common",
      "DuplicateNodenameWarning",
      "kombu.matcher",
      "kombu.utils.functional",
      "match",
      "kombu.utils.compat",
      "warnings",
      "celery.exceptions"
    ]
  },
  "github_extracted/Textualize_textual/question_title02.py": {
    "variables": [
      "CSS_PATH",
      "TITLE",
      "SUB_TITLE",
      "app",
      "reply"
    ],
    "function_params": [
      "event",
      "self"
    ],
    "function_names": [
      "compose",
      "on_key",
      "on_button_pressed"
    ],
    "class_names": [
      "MyApp"
    ],
    "imports": [
      "textual.widgets",
      "Header",
      "Key",
      "textual.app",
      "App",
      "ComposeResult",
      "textual.events",
      "Label",
      "Button"
    ]
  },
  "github_extracted/Textualize_textual/gen_inspect.py": {
    "variables": [
      "c",
      "f"
    ],
    "function_params": [],
    "function_names": [],
    "class_names": [],
    "imports": [
      "rich",
      "rich.console",
      "Console",
      "inspect"
    ]
  },
  "github_extracted/Textualize_textual/simple01.py": {
    "variables": [],
    "function_params": [],
    "function_names": [],
    "class_names": [
      "MyApp"
    ],
    "imports": [
      "textual.app",
      "App"
    ]
  },
  "github_extracted/Textualize_textual/question_title01.py": {
    "variables": [
      "CSS_PATH",
      "TITLE",
      "SUB_TITLE",
      "app",
      "reply"
    ],
    "function_params": [
      "event",
      "self"
    ],
    "function_names": [
      "compose",
      "on_button_pressed"
    ],
    "class_names": [
      "MyApp"
    ],
    "imports": [
      "textual.widgets",
      "Header",
      "textual.app",
      "App",
      "ComposeResult",
      "Label",
      "Button"
    ]
  },
  "github_extracted/Textualize_textual/question02.py": {
    "variables": [
      "reply",
      "CSS_PATH",
      "app"
    ],
    "function_params": [
      "event",
      "self"
    ],
    "function_names": [
      "compose",
      "on_button_pressed"
    ],
    "class_names": [
      "QuestionApp"
    ],
    "imports": [
      "textual.widgets",
      "textual.app",
      "App",
      "ComposeResult",
      "Label",
      "Button"
    ]
  },
  "github_extracted/Textualize_textual/blocking01.py": {
    "variables": [
      "CSS",
      "BINDINGS"
    ],
    "function_params": [
      "self"
    ],
    "function_names": [
      "compose",
      "action_load",
      "on_click"
    ],
    "class_names": [
      "ColourChanger",
      "MyApp"
    ],
    "imports": [
      "VerticalScroll",
      "textual.widgets",
      "Widget",
      "textual.color",
      "Footer",
      "textual.app",
      "App",
      "ComposeResult",
      "random",
      "Color",
      "randint",
      "time",
      "textual.containers",
      "textual.widget",
      "Label",
      "Grid"
    ]
  },
  "github_extracted/Textualize_textual/suspend.py": {
    "variables": [],
    "function_params": [
      "self"
    ],
    "function_names": [
      "compose",
      "run_external_editor"
    ],
    "class_names": [
      "SuspendingApp"
    ],
    "imports": [
      "system",
      "textual.widgets",
      "on",
      "textual.app",
      "App",
      "ComposeResult",
      "textual",
      "os",
      "Button"
    ]
  },
  "github_extracted/Textualize_textual/nonblocking01.py": {
    "variables": [
      "CSS",
      "BINDINGS"
    ],
    "function_params": [
      "self"
    ],
    "function_names": [
      "compose",
      "action_load",
      "on_click"
    ],
    "class_names": [
      "ColourChanger",
      "MyApp"
    ],
    "imports": [
      "asyncio",
      "VerticalScroll",
      "textual.widgets",
      "Widget",
      "textual.color",
      "Footer",
      "textual.app",
      "App",
      "ComposeResult",
      "random",
      "Color",
      "randint",
      "textual.containers",
      "textual.widget",
      "Label",
      "Grid"
    ]
  },
  "github_extracted/Textualize_textual/question03.py": {
    "variables": [
      "CSS",
      "reply",
      "app"
    ],
    "function_params": [
      "event",
      "self"
    ],
    "function_names": [
      "compose",
      "on_button_pressed"
    ],
    "class_names": [
      "QuestionApp"
    ],
    "imports": [
      "textual.widgets",
      "textual.app",
      "App",
      "ComposeResult",
      "Label",
      "Button"
    ]
  },
  "github_extracted/Textualize_textual/blocking02.py": {
    "variables": [
      "CSS",
      "BINDINGS"
    ],
    "function_params": [
      "self"
    ],
    "function_names": [
      "compose",
      "action_load",
      "on_click"
    ],
    "class_names": [
      "ColourChanger",
      "MyApp"
    ],
    "imports": [
      "asyncio",
      "VerticalScroll",
      "textual.widgets",
      "Widget",
      "textual.color",
      "Footer",
      "textual.app",
      "App",
      "ComposeResult",
      "random",
      "Color",
      "randint",
      "time",
      "textual.containers",
      "textual.widget",
      "Label",
      "Grid"
    ]
  },
  "github_extracted/Textualize_textual/simple02.py": {
    "variables": [
      "app"
    ],
    "function_params": [],
    "function_names": [],
    "class_names": [
      "MyApp"
    ],
    "imports": [
      "textual.app",
      "App"
    ]
  },
  "github_extracted/Textualize_textual/question01.py": {
    "variables": [
      "reply",
      "app"
    ],
    "function_params": [
      "event",
      "self"
    ],
    "function_names": [
      "compose",
      "on_button_pressed"
    ],
    "class_names": [
      "QuestionApp"
    ],
    "imports": [
      "textual.widgets",
      "textual.app",
      "App",
      "ComposeResult",
      "Label",
      "Button"
    ]
  },
  "github_extracted/Textualize_textual/event01.py": {
    "variables": [
      "COLORS",
      "app"
    ],
    "function_params": [
      "event",
      "self"
    ],
    "function_names": [
      "on_mount",
      "on_key"
    ],
    "class_names": [
      "EventApp"
    ],
    "imports": [
      "textual",
      "textual.app",
      "App",
      "events"
    ]
  },
  "github_extracted/Textualize_textual/suspend_process.py": {
    "variables": [
      "BINDINGS"
    ],
    "function_params": [
      "self"
    ],
    "function_names": [
      "compose"
    ],
    "class_names": [
      "SuspendKeysApp"
    ],
    "imports": [
      "textual.widgets",
      "textual.app",
      "App",
      "ComposeResult",
      "Binding",
      "textual.binding",
      "Label"
    ]
  },
  "github_extracted/Textualize_textual/widgets01.py": {
    "variables": [
      "app"
    ],
    "function_params": [
      "self"
    ],
    "function_names": [
      "compose",
      "on_button_pressed"
    ],
    "class_names": [
      "WelcomeApp"
    ],
    "imports": [
      "textual.widgets",
      "Welcome",
      "textual.app",
      "App",
      "ComposeResult"
    ]
  },
  "github_extracted/pallets_jinja/bccache.py": {
    "variables": [
      "name",
      "code",
      "out",
      "directory",
      "filename",
      "checksum",
      "hash",
      "actual_dir_stat",
      "tmpdir",
      "files",
      "dirname",
      "actual_dir",
      "magic",
      "value",
      "f",
      "bc_version",
      "key",
      "bc_magic",
      "bucket"
    ],
    "function_params": [
      "ignore_memcache_errors",
      "name",
      "timeout",
      "environment",
      "source",
      "directory",
      "value",
      "f",
      "filename",
      "client",
      "string",
      "self",
      "checksum",
      "key",
      "pattern",
      "bucket",
      "prefix"
    ],
    "function_names": [
      "bytecode_to_string",
      "load_bytecode",
      "__init__",
      "get_cache_key",
      "bytecode_from_string",
      "get_source_checksum",
      "set_bucket",
      "_get_default_cache_dir",
      "remove_silent",
      "_unsafe_dir",
      "_get_cache_filename",
      "set",
      "write_bytecode",
      "get",
      "clear",
      "reset",
      "dump_bytecode",
      "get_bucket"
    ],
    "class_names": [
      "FileSystemBytecodeCache",
      "BytecodeCache",
      "_MemcachedClient",
      "Bucket",
      "MemcachedBytecodeCache"
    ],
    "imports": [
      "BytesIO",
      "remove",
      "errno",
      "stat",
      "sha1",
      "sys",
      "hashlib",
      "CodeType",
      "typing_extensions",
      "environment",
      "pickle",
      "io",
      "Environment",
      "os",
      "fnmatch",
      "tempfile",
      "typing",
      "types",
      "marshal"
    ]
  },
  "github_extracted/pallets_jinja/_identifier.py": {
    "variables": [
      "pattern"
    ],
    "function_params": [],
    "function_names": [],
    "class_names": [],
    "imports": [
      "re"
    ]
  },
  "github_extracted/pallets_jinja/cycle.py": {
    "variables": [
      "env"
    ],
    "function_params": [],
    "function_names": [],
    "class_names": [],
    "imports": [
      "jinja2",
      "Environment"
    ]
  },
  "github_extracted/pallets_jinja/inheritance.py": {
    "variables": [
      "env"
    ],
    "function_params": [],
    "function_names": [],
    "class_names": [],
    "imports": [
      "jinja2",
      "jinja2.loaders",
      "DictLoader",
      "Environment"
    ]
  },
  "github_extracted/pallets_jinja/generate_identifier_pattern.py": {
    "variables": [
      "pattern",
      "out",
      "b",
      "g",
      "s",
      "f",
      "filename",
      "_",
      "a",
      "cp",
      "lb"
    ],
    "function_params": [
      "data",
      "ranges"
    ],
    "function_names": [
      "build_pattern",
      "collapse_ranges",
      "get_characters",
      "main"
    ],
    "class_names": [],
    "imports": [
      "re",
      "sys",
      "os",
      "itertools"
    ]
  },
  "github_extracted/pallets_jinja/test_loop_filter.py": {
    "variables": [
      "tmpl"
    ],
    "function_params": [],
    "function_names": [],
    "class_names": [],
    "imports": [
      "jinja2",
      "Environment"
    ]
  },
  "github_extracted/pallets_jinja/debugger.py": {
    "variables": [
      "tmpl",
      "env"
    ],
    "function_params": [],
    "function_names": [],
    "class_names": [],
    "imports": [
      "FileSystemLoader",
      "jinja2",
      "jinja2.loaders",
      "Environment"
    ]
  },
  "github_extracted/pallets_jinja/inline_gettext_extension.py": {
    "variables": [
      "pos",
      "lineno",
      "token",
      "match",
      "new_pos",
      "paren_stack",
      "preval",
      "gtok",
      "_inside_re",
      "_outside_re"
    ],
    "function_params": [
      "self",
      "stream"
    ],
    "function_names": [
      "filter_stream"
    ],
    "class_names": [
      "InlineGettext"
    ],
    "imports": [
      "jinja2.exceptions",
      "TemplateSyntaxError",
      "Token",
      "jinja2.lexer",
      "count_newlines",
      "jinja2.ext",
      "re",
      "Extension"
    ]
  },
  "github_extracted/pallets_jinja/async_utils.py": {
    "variables": [
      "need_eval_context",
      "b",
      "async_func_attrs",
      "normal_func_attrs",
      "wrapper",
      "_common_primitives",
      "V",
      "args",
      "pass_arg",
      "x"
    ],
    "function_params": [
      "normal_func",
      "async_func",
      "iterator",
      "self",
      "iterable",
      "args"
    ],
    "function_names": [
      "__init__",
      "async_variant",
      "decorator",
      "wrapper",
      "auto_aiter",
      "__aiter__",
      "is_async"
    ],
    "class_names": [
      "_IteratorToAsyncIterator"
    ],
    "imports": [
      "WRAPPER_ASSIGNMENTS",
      "pass_eval_context",
      "inspect",
      "typing_extensions",
      "_PassArg",
      "functools",
      "typing",
      "wraps",
      "utils"
    ]
  },
  "github_extracted/pallets_jinja/test.py": {
    "variables": [
      "tmpl",
      "env"
    ],
    "function_params": [],
    "function_names": [],
    "class_names": [],
    "imports": [
      "jinja2",
      "jinja2.loaders",
      "DictLoader",
      "Environment"
    ]
  },
  "github_extracted/pallets_jinja/__init__.py": {
    "variables": [],
    "function_params": [
      "name"
    ],
    "function_names": [
      "__getattr__"
    ],
    "class_names": [],
    "imports": [
      "bccache",
      "ChainableUndefined",
      "TemplateNotFound",
      "loaders",
      "PrefixLoader",
      "ModuleLoader",
      "pass_context",
      "pass_environment",
      "StrictUndefined",
      "DictLoader",
      "Template",
      "TemplateAssertionError",
      "importlib.metadata",
      "TemplateRuntimeError",
      "Undefined",
      "select_autoescape",
      "BytecodeCache",
      "ChoiceLoader",
      "annotations",
      "make_logging_undefined",
      "DebugUndefined",
      "exceptions",
      "MemcachedBytecodeCache",
      "TemplatesNotFound",
      "runtime",
      "FunctionLoader",
      "environment",
      "PackageLoader",
      "is_undefined",
      "TemplateSyntaxError",
      "Environment",
      "utils",
      "pass_eval_context",
      "clear_caches",
      "FileSystemLoader",
      "FileSystemBytecodeCache",
      "typing",
      "BaseLoader",
      "warnings",
      "UndefinedError",
      "TemplateError",
      "__future__"
    ]
  },
  "github_extracted/pallets_jinja/translate.py": {
    "variables": [
      "env"
    ],
    "function_params": [],
    "function_names": [],
    "class_names": [],
    "imports": [
      "jinja2",
      "Environment"
    ]
  },
  "github_extracted/pallets_jinja/conf.py": {
    "variables": [
      "html_theme",
      "extensions",
      "extlinks",
      "autodoc_preserve_defaults",
      "html_sidebars",
      "copyright",
      "default_role",
      "intersphinx_mapping",
      "html_logo",
      "html_show_sourcelink",
      "html_context",
      "project",
      "autodoc_member_order",
      "html_title",
      "version",
      "singlehtml_sidebars",
      "author",
      "release",
      "html_favicon",
      "autodoc_typehints",
      "html_theme_options",
      "html_static_path"
    ],
    "function_params": [],
    "function_names": [],
    "class_names": [],
    "imports": [
      "pallets_sphinx_themes",
      "get_version",
      "ProjectLink"
    ]
  },
  "github_extracted/pallets_jinja/test_filter_and_linestatements.py": {
    "variables": [
      "tmpl",
      "env"
    ],
    "function_params": [],
    "function_names": [],
    "class_names": [],
    "imports": [
      "jinja2",
      "Environment"
    ]
  },
  "github_extracted/pallets_jinja/cache_extension.py": {
    "variables": [
      "lineno",
      "body",
      "tags",
      "rv",
      "key",
      "args"
    ],
    "function_params": [
      "name",
      "timeout",
      "environment",
      "parser",
      "caller",
      "self"
    ],
    "function_names": [
      "parse",
      "__init__",
      "_cache_support"
    ],
    "class_names": [
      "FragmentCacheExtension"
    ],
    "imports": [
      "nodes",
      "jinja2",
      "Extension",
      "jinja2.ext"
    ]
  },
  "github_extracted/facebookresearch_fairseq/loss.py": {
    "variables": [
      "targets"
    ],
    "function_params": [
      "text_label",
      "self",
      "logits",
      "targets"
    ],
    "function_names": [
      "__call__",
      "__init__"
    ],
    "class_names": [
      "DummyK400Loss",
      "L1",
      "NLGLoss",
      "Loss",
      "MSE",
      "BCE",
      "SmoothL1",
      "DummyLoss",
      "CrossEntropy",
      "ArgmaxCrossEntropy"
    ],
    "imports": [
      "nn",
      "torch"
    ]
  },
  "github_extracted/facebookresearch_fairseq/mmfusionnlg.py": {
    "variables": [
      "video_tokens",
      "top_k",
      "next_scores",
      "batch_idx",
      "beam_tokens",
      "eos_in_sents",
      "text_offset",
      "beam_scores",
      "next_tokens",
      "token_id",
      "x",
      "best",
      "beam_token_id",
      "token_type_ids",
      "cur_len",
      "input_ids_len",
      "output_batch_size",
      "text_sequence_output",
      "bad_words_ids",
      "bos_token_id",
      "beam_token_rank",
      "next_token_logscores",
      "outputs",
      "next_token",
      "sent_max_len",
      "input_video_embeds_hidden",
      "temperature",
      "expanded_batch_idxs",
      "eos_token_id",
      "sequence_output",
      "i",
      "batch_size",
      "output_num_return_sequences_per_batch",
      "min_length",
      "encoder",
      "vocab_size",
      "attention_mask",
      "next_scores_indices",
      "no_repeat_ngram_size",
      "final_tokens",
      "seq_len",
      "j",
      "sorted_hyps",
      "probs",
      "max_length",
      "past",
      "use_cache",
      "next_batch_beam",
      "decoder_start_token_id",
      "is_beam_token_worse_than_top_num_beams",
      "token_type_ids_len",
      "next_token_logits",
      "unfinished_sents",
      "effective_batch_idx",
      "encoder_outputs",
      "best_hyp",
      "device",
      "model_inputs",
      "_scores",
      "pad_token_id",
      "num_return_sequences",
      "input_ids",
      "do_sample",
      "generated_hyps",
      "length_penalty",
      "beam_id",
      "output",
      "prediction_scores",
      "repetition_penalty",
      "beam_idx",
      "tokens_to_add",
      "is_sents_unfinished_and_token_to_add_is_eos",
      "beam_token_score",
      "hypotheses",
      "sent_lengths",
      "top_p",
      "next_sent_beam",
      "final_score",
      "selected_text_output",
      "hypo",
      "_",
      "input_video_embeds",
      "effective_batch_size",
      "attention_mask_to_len",
      "effective_batch_mult",
      "attention_mask_from_len",
      "effective_beam_id",
      "scores",
      "input_video_embeds_len",
      "num_beams",
      "done",
      "hidden_size",
      "labels_mask",
      "decoded",
      "early_stopping"
    ],
    "function_params": [
      "text_label",
      "top_k",
      "temperature",
      "eos_token_id",
      "top_p",
      "pad_token_id",
      "model_kwargs",
      "caps",
      "return_dict",
      "inputs_embeds",
      "input_ids",
      "position_ids",
      "num_return_sequences",
      "do_sample",
      "cmasks",
      "batch_size",
      "min_length",
      "vocab_size",
      "input_video_embeds",
      "attention_mask",
      "head_mask",
      "video_label",
      "length_penalty",
      "no_repeat_ngram_size",
      "output_attentions",
      "config",
      "vfeats",
      "self",
      "token_type_ids",
      "masked_lm_labels",
      "max_length",
      "cur_len",
      "use_cache",
      "num_beams",
      "repetition_penalty",
      "bad_words_ids",
      "vmasks",
      "decoder_start_token_id",
      "bos_token_id",
      "decoder_input_ids",
      "early_stopping",
      "output_hidden_states"
    ],
    "function_names": [
      "get_output_embeddings",
      "_generate_beam_search",
      "__init__",
      "forward",
      "_generate_no_beam_search",
      "prepare_inputs_for_generation",
      "generate"
    ],
    "class_names": [
      "MMFusionNLG",
      "MMBertForNLG"
    ],
    "imports": [
      "BertOnlyMLMHead",
      "transformermodel",
      "transformers.generation_utils",
      "transformers.modeling_outputs",
      "transformers.modeling_bert",
      "mmfusion",
      "BeamHypotheses",
      "CausalLMOutput",
      "Iterable",
      "top_k_top_p_filtering",
      "transformers.file_utils",
      "Optional",
      "MMBertModel",
      "ModelOutput",
      "functional",
      "transformers",
      "BertPreTrainedModel",
      "torch",
      "typing",
      "modules",
      "MMFusion",
      "VideoTokenMLP",
      "torch.nn"
    ]
  },
  "github_extracted/facebookresearch_fairseq/predictor.py": {
    "variables": [
      "y",
      "step",
      "lbd",
      "key",
      "outputs",
      "sample",
      "window_start",
      "start",
      "Y_true",
      "end",
      "batch_idx",
      "v_len",
      "pooled_text",
      "eye_mask",
      "pooled_video",
      "logits",
      "rank",
      "label_sim",
      "Y_pred",
      "ctx",
      "_cap",
      "hidden_video",
      "s",
      "O",
      "targets",
      "i",
      "text_hidden",
      "label_hidden_states",
      "label_select",
      "ranks",
      "logits_counts",
      "line",
      "logits_max",
      "t_len",
      "video_hidden",
      "full_scores",
      "video_len",
      "output",
      "task",
      "valid_mask",
      "moment",
      "video_end",
      "num_labels",
      "tensor",
      "vid",
      "annot_path",
      "m_idx",
      "idx",
      "video_outputs",
      "fw",
      "data",
      "scores",
      "logits_argmax",
      "pred",
      "model",
      "generated_text",
      "hidden_size",
      "batch_logit_idx",
      "error_mask",
      "f",
      "vmasks",
      "e",
      "_output",
      "texts",
      "rank_of_moment",
      "batch_logits",
      "data_file",
      "batch",
      "Y"
    ],
    "function_params": [
      "K",
      "lbd",
      "outputs",
      "sample",
      "Y_true",
      "Y_pred",
      "ctx",
      "answers",
      "label_hidden_states",
      "full_scores",
      "output",
      "config",
      "tensor",
      "dtype",
      "T",
      "self",
      "data",
      "scores",
      "path",
      "model",
      "output_file",
      "eval_dataloader",
      "texts"
    ],
    "function_names": [
      "__init__",
      "_get_pooled_outputs",
      "_aggregate_scores",
      "_read_assignment",
      "reshape_subsample",
      "flat_subsample",
      "_append_scores",
      "to_ctx",
      "_merge_windows",
      "finalize",
      "__call__",
      "predict_loop"
    ],
    "class_names": [
      "COINZSPredictor",
      "Predictor",
      "RetrievalPredictor",
      "COINPredictor",
      "NLGPredictor",
      "DiDeMoPredictor",
      "CrossTaskPredictor",
      "QAPredictor"
    ],
    "imports": [
      "numpy",
      "dp",
      "math",
      "transformers",
      "itertools",
      "torch",
      "random",
      "pickle",
      "AutoTokenizer",
      "os",
      "json",
      "tqdm"
    ]
  },
  "github_extracted/facebookresearch_fairseq/nce.py": {
    "variables": [
      "text_label",
      "logits_per_video",
      "loss_video",
      "neg_scores",
      "logits",
      "logits_per_text",
      "loss_text",
      "vt_logits",
      "masked_lm_loss",
      "targets",
      "batch_size",
      "align_scores",
      "text_logits",
      "video_label",
      "vt_label",
      "scores",
      "pos_scores",
      "selected_text_label",
      "labels_mask",
      "masked_frame_loss"
    ],
    "function_params": [
      "text_label",
      "text_logits",
      "self",
      "video_logits",
      "align_scores",
      "pooled_text",
      "pooled_video",
      "video_label"
    ],
    "function_names": [
      "__call__",
      "__init__"
    ],
    "class_names": [
      "NCE",
      "V2TContraLoss",
      "MFMMLM",
      "T2VContraLoss",
      "MMContraLoss",
      "MTM"
    ],
    "imports": [
      "nn",
      "loss",
      "torch",
      "Loss"
    ]
  },
  "github_extracted/facebookresearch_fairseq/mmfusion.py": {
    "variables": [
      "target_vfeats",
      "outputs",
      "text_attention_mask",
      "iso_mask",
      "dummy_cmasks",
      "model_config",
      "pooled_text",
      "pooled_video",
      "logits",
      "hidden_state",
      "mm_encoder_cls",
      "text_encoder_cls",
      "iso_mm_masks",
      "caps",
      "input_ids",
      "video_frames",
      "cmasks",
      "batch_size",
      "text_offset",
      "_",
      "mm_mask",
      "separate_forward_split",
      "non_masked_frame_mask",
      "attention_mask",
      "video_attention_mask",
      "text_logits",
      "checkpoint_path",
      "output",
      "video_encoder",
      "seq_len",
      "config",
      "tokenizer",
      "layer_idx",
      "dummy_vmasks",
      "iso_video_mask",
      "vfeats",
      "iso_text_mask",
      "video_outputs",
      "dummy_vfeats",
      "token_type_ids",
      "text_outputs",
      "transformer_config",
      "mmtask",
      "video_encoder_cls",
      "cls_self_mask",
      "bsz",
      "vmasks",
      "dummy_caps",
      "video_logits",
      "padding",
      "aligner",
      "video_seq",
      "output_hidden_states"
    ],
    "function_params": [
      "caps",
      "text_label",
      "video_encoder",
      "model",
      "config",
      "video_frames",
      "cls",
      "cmasks",
      "vmasks",
      "checkpoint",
      "batch_size",
      "vfeats",
      "self",
      "layered_sequence_output",
      "output_hidden_states",
      "return_score",
      "attention_mask",
      "video_label"
    ],
    "function_names": [
      "from_pretrained",
      "__init__",
      "forward",
      "_mm_attention_mask",
      "_make_iso_mask",
      "forward_text",
      "forward_video",
      "_mm_on_the_fly",
      "_pooling_vt_layer"
    ],
    "class_names": [
      "MMFusionMFMMLM",
      "MMPTModel",
      "MMFusionSeparate",
      "MMFusionShare",
      "MMFusionSeparateActionSegmentation",
      "MMFusionMTM",
      "MMFusionSeparateActionLocalization",
      "MMFusionShareActionLocalization",
      "MMFusionActionLocalization",
      "MMFusion",
      "MMFusionJoint",
      "MMFusionActionSegmentation"
    ],
    "imports": [
      "processors.models.s3dg",
      "S3D",
      "transformers",
      "os",
      "recursive_config",
      "tasks",
      "torch",
      "AutoConfig",
      "Task",
      "MMBertForMTM",
      "nn",
      "transformermodel",
      "AutoTokenizer",
      "processors",
      "utils",
      "Aligner"
    ]
  },
  "github_extracted/facebookresearch_fairseq/metric.py": {
    "variables": [
      "r1",
      "Bleu_1",
      "ys_true",
      "rank5",
      "accs",
      "Bleu_3",
      "recalls",
      "rank1",
      "r1s",
      "ious",
      "t",
      "n_errors",
      "split1",
      "r5s",
      "METEOR",
      "logits",
      "y_true",
      "fa",
      "label_test_sp",
      "r5",
      "label_test",
      "results",
      "max_idx",
      "s",
      "ex_idx",
      "y_pred",
      "ranks",
      "Bleu_2",
      "labels",
      "Bleu_4",
      "step_match",
      "x",
      "mr",
      "task",
      "split3",
      "split2",
      "d",
      "intersection",
      "vid",
      "acc",
      "all_video_embd",
      "ys_pred",
      "fw",
      "ind",
      "miou",
      "r10",
      "avg_recall",
      "n",
      "r10s",
      "pred",
      "metrics",
      "average_ranks",
      "n_frames",
      "sorted_pred",
      "rec",
      "ROUGE_L",
      "sx",
      "union",
      "CIDEr",
      "X_pred",
      "step_total",
      "split",
      "error",
      "average_iou"
    ],
    "function_params": [
      "splits",
      "pred",
      "metrics",
      "segments",
      "gt",
      "Y_pred",
      "config",
      "outputs",
      "targets",
      "metric",
      "Y_true",
      "self",
      "data",
      "metric_name",
      "texts",
      "metric_names",
      "fn"
    ],
    "function_names": [
      "__init__",
      "_iou",
      "_rank",
      "compute_metrics",
      "best_metric",
      "_get_recalls",
      "_eval_predictions",
      "print_computed_metrics",
      "save_metrics"
    ],
    "class_names": [
      "QAMetric",
      "COINActionSegmentationMetric",
      "NLGMetric",
      "Metric",
      "DiDeMoMetric",
      "RetrievalMetric",
      "ActionRecognitionMetric",
      "CrossTaskMetric"
    ],
    "imports": [
      "numpy",
      "accuracy_score",
      "NLGEval",
      "sklearn.metrics",
      "json",
      "nlgeval"
    ]
  },
  "github_extracted/facebookresearch_fairseq/locallaunch.py": {
    "variables": [
      "config_file",
      "overwrite_config",
      "pipe_id",
      "run_yamls",
      "task_file",
      "yaml_file",
      "config_file_path",
      "stage",
      "task_list",
      "yaml_files",
      "configs_to_save",
      "args",
      "job_config",
      "job_type",
      "config_sets",
      "config",
      "stage_yamls",
      "JOB_CONFIG",
      "pipelines",
      "fn",
      "save_file_path",
      "parser",
      "pipeline",
      "job",
      "job_key"
    ],
    "function_params": [
      "job_type",
      "dryrun",
      "configs_to_save",
      "job_config",
      "self",
      "idx",
      "args",
      "yaml_file",
      "fn"
    ],
    "function_names": [
      "__init__",
      "_save_configs",
      "__len__",
      "_overwrite_task",
      "__call__",
      "__getitem__",
      "main"
    ],
    "class_names": [
      "JobLauncher",
      "Pipeline"
    ],
    "imports": [
      "mmpt_cli.localjob",
      "LocalJob",
      "recursive_config",
      "omegaconf",
      "overwrite_dir",
      "OmegaConf",
      "mmpt.utils",
      "argparse",
      "os"
    ]
  },
  "github_extracted/facebookresearch_fairseq/evaluator.py": {
    "variables": [
      "metric_cls",
      "outputs",
      "results",
      "pred_file",
      "eval_dataloader",
      "predictor_cls"
    ],
    "function_params": [
      "model",
      "config",
      "output_file",
      "eval_dataloader",
      "self"
    ],
    "function_names": [
      "__call__",
      "evaluate",
      "__init__"
    ],
    "class_names": [
      "Evaluator"
    ],
    "imports": [
      "numpy",
      "metric",
      "predictor",
      "glob",
      "os"
    ]
  },
  "github_extracted/facebookresearch_fairseq/mmdataset.py": {
    "variables": [
      "text_feature",
      "output",
      "caps",
      "video_id",
      "video_feature",
      "sample",
      "tokenizer",
      "value",
      "text_id",
      "key",
      "batch"
    ],
    "function_params": [
      "text_processor",
      "output",
      "meta_processor",
      "self",
      "idx",
      "samples",
      "video_processor",
      "align_processor"
    ],
    "function_names": [
      "__init__",
      "print_example",
      "collater",
      "__len__",
      "__getitem__"
    ],
    "class_names": [
      "MMDataset"
    ],
    "imports": [
      "default_collate",
      "Dataset",
      "collections",
      "torch.utils.data.dataloader",
      "torch",
      "set_seed",
      "torch.utils.data",
      "OrderedDict",
      "utils"
    ]
  },
  "github_extracted/facebookresearch_fairseq/fairseqmmmodel.py": {
    "variables": [
      "keys_to_delete",
      "key"
    ],
    "function_params": [
      "task",
      "name",
      "cls",
      "mmmodel",
      "state_dict",
      "self",
      "args"
    ],
    "function_names": [
      "__init__",
      "upgrade_state_dict_named",
      "mmarch",
      "forward",
      "build_model"
    ],
    "class_names": [
      "FairseqMMModel"
    ],
    "imports": [
      "register_model_architecture",
      "BaseFairseqModel",
      "register_model",
      "fairseq.models"
    ]
  },
  "github_extracted/facebookresearch_fairseq/fairseqmmdataset.py": {
    "variables": [
      "sample",
      "batch",
      "key"
    ],
    "function_params": [
      "index",
      "epoch",
      "mmdataset",
      "self",
      "samples",
      "idx"
    ],
    "function_names": [
      "set_epoch",
      "__init__",
      "size",
      "collater",
      "num_tokens",
      "__len__",
      "__getitem__"
    ],
    "class_names": [
      "FairseqMMDataset"
    ],
    "imports": [
      "default_collate",
      "Dataset",
      "collections",
      "torch.utils.data.dataloader",
      "data_utils",
      "fairseq.data",
      "FairseqDataset",
      "torch.utils.data",
      "OrderedDict"
    ]
  },
  "github_extracted/facebookresearch_fairseq/__init__.py": {
    "variables": [],
    "function_params": [],
    "function_names": [],
    "class_names": [],
    "imports": [
      "expmm",
      "mm",
      "*"
    ]
  },
  "github_extracted/facebookresearch_fairseq/fairseqmmloss.py": {
    "variables": [
      "log",
      "outputs",
      "max_len",
      "loss",
      "loss_scalar",
      "batch_size",
      "logging_output",
      "sample_size",
      "loss_sum"
    ],
    "function_params": [
      "logging_outputs",
      "task",
      "model",
      "sample",
      "self"
    ],
    "function_names": [
      "forward",
      "__init__",
      "reduce_metrics",
      "logging_outputs_can_be_summed"
    ],
    "class_names": [
      "MMCriterion"
    ],
    "imports": [
      "metrics",
      "fairseq.criterions",
      "fairseq.logging",
      "register_criterion",
      "FairseqCriterion"
    ]
  },
  "github_extracted/facebookresearch_fairseq/transformermodel.py": {
    "variables": [
      "video_tokens",
      "hidden_states",
      "encoder_outputs",
      "outputs",
      "non_masked_frame_hidden_states",
      "target_video_hidden_states",
      "masked_frame_logits",
      "video_sequence_output",
      "device",
      "non_masked_frame_logits",
      "video_hidden_states",
      "all_attentions",
      "text_on_vocab_logits",
      "return_dict",
      "v",
      "selected_text_output",
      "text_hidden_states",
      "encoder_batch_size",
      "sequence_output",
      "i",
      "text_offset",
      "text_on_video_logits",
      "_",
      "layer_head_mask",
      "layer_attention_mask",
      "encoder_sequence_length",
      "attention_mask",
      "text_logits",
      "encoder_hidden_shape",
      "head_mask",
      "output",
      "_all_hidden_states",
      "output_attentions",
      "all_hidden_states",
      "layer_idx",
      "split_encoder_outputs",
      "pooled_output",
      "prediction_scores",
      "video_on_vocab_logits",
      "input_shape",
      "token_type_ids",
      "split_embedding_output",
      "text_sequence_output",
      "hidden_size",
      "split_extended_attention_mask",
      "embedding_output",
      "encoder_attention_mask",
      "labels_mask",
      "layer_outputs",
      "mfm_scores",
      "extended_attention_mask",
      "video_logits",
      "encoder_extended_attention_mask",
      "layer_module",
      "selected_video_output",
      "output_hidden_states"
    ],
    "function_params": [
      "hidden_states",
      "target_video_hidden_states",
      "non_masked_frame_hidden_states",
      "device",
      "video_hidden_states",
      "next_sentence_label",
      "return_dict",
      "add_pooling_layer",
      "inputs_embeds",
      "input_ids",
      "position_ids",
      "text_hidden_states",
      "separate_forward_split",
      "non_masked_frame_mask",
      "input_video_embeds",
      "attention_mask",
      "masked_frame_labels",
      "head_mask",
      "output_attentions",
      "config",
      "module",
      "self",
      "input_shape",
      "token_type_ids",
      "masked_lm_labels",
      "encoder_hidden_states",
      "encoder_attention_mask",
      "output_hidden_states"
    ],
    "function_names": [
      "get_output_embeddings",
      "__init__",
      "forward",
      "custom_forward",
      "create_custom_forward",
      "get_extended_attention_mask"
    ],
    "class_names": [
      "MMBertForEncoder",
      "MultiLayerAttentionMaskBertEncoder",
      "MMBertForMFMMLM",
      "MTMHead",
      "MFMMLMHead",
      "MMBertForMTM",
      "MMBertModel",
      "MMBertForTokenClassification",
      "MMBertForJoint",
      "BertMTMPredictionHead",
      "BertMFMMLMPredictionHead"
    ],
    "imports": [
      "BertPredictionHeadTransform",
      "BertPreTrainedModel",
      "BertModel",
      "torch",
      "nn",
      "BertEncoder",
      "modules",
      "MMBertEmbeddings",
      "VideoTokenMLP",
      "transformers.modeling_bert"
    ]
  },
  "github_extracted/facebookresearch_fairseq/conf.py": {
    "variables": [
      "html_theme",
      "github_doc_root",
      "pygments_style",
      "extensions",
      "release",
      "intersphinx_mapping",
      "exclude_patterns",
      "version",
      "highlight_language",
      "source_suffix",
      "author",
      "todo_include_todos",
      "language",
      "master_doc",
      "project",
      "copyright",
      "templates_path"
    ],
    "function_params": [],
    "function_names": [],
    "class_names": [],
    "imports": [
      "__version__",
      "fairseq",
      "sys",
      "os"
    ]
  },
  "github_extracted/pallets_flask/blog.py": {
    "variables": [
      "title",
      "bp",
      "post",
      "body",
      "db",
      "posts",
      "error"
    ],
    "function_params": [
      "check_author",
      "id"
    ],
    "function_names": [
      "create",
      "index",
      "delete",
      "update",
      "get_post"
    ],
    "class_names": [],
    "imports": [
      "url_for",
      "abort",
      "flash",
      "redirect",
      "Blueprint",
      "flask",
      "login_required",
      "g",
      "render_template",
      "auth",
      "get_db",
      "db",
      "werkzeug.exceptions",
      "request"
    ]
  },
  "github_extracted/pallets_flask/test_blog.py": {
    "variables": [
      "db",
      "post",
      "response",
      "count"
    ],
    "function_params": [
      "auth",
      "path",
      "app",
      "client"
    ],
    "function_names": [
      "test_create_update_validate",
      "test_author_required",
      "test_exists_required",
      "test_delete",
      "test_index",
      "test_update",
      "test_create",
      "test_login_required"
    ],
    "class_names": [],
    "imports": [
      "flaskr.db",
      "pytest",
      "get_db"
    ]
  },
  "github_extracted/pallets_flask/__main__.py": {
    "variables": [],
    "function_params": [],
    "function_names": [],
    "class_names": [],
    "imports": [
      "cli",
      "main"
    ]
  },
  "github_extracted/pallets_flask/views.py": {
    "variables": [
      "b",
      "a"
    ],
    "function_params": [
      "js"
    ],
    "function_names": [
      "add",
      "index"
    ],
    "class_names": [],
    "imports": [
      "jsonify",
      "flask",
      "render_template",
      "app",
      "request"
    ]
  },
  "github_extracted/pallets_flask/test_js_example.py": {
    "variables": [
      "response"
    ],
    "function_params": [
      "path",
      "b",
      "client",
      "template",
      "a",
      "sender",
      "context",
      "template_name",
      "app",
      "result"
    ],
    "function_names": [
      "check",
      "test_add",
      "test_index"
    ],
    "class_names": [],
    "imports": [
      "template_rendered",
      "pytest",
      "flask"
    ]
  },
  "github_extracted/pallets_flask/test_db.py": {
    "variables": [
      "db",
      "called",
      "result",
      "e"
    ],
    "function_params": [
      "monkeypatch",
      "runner",
      "app"
    ],
    "function_names": [
      "fake_init_db",
      "test_init_db_command",
      "test_get_close_db"
    ],
    "class_names": [
      "Recorder"
    ],
    "imports": [
      "flaskr.db",
      "sqlite3",
      "pytest",
      "get_db"
    ]
  },
  "github_extracted/pallets_flask/make_celery.py": {
    "variables": [
      "celery_app",
      "flask_app"
    ],
    "function_params": [],
    "function_names": [],
    "class_names": [],
    "imports": [
      "create_app",
      "task_app"
    ]
  },
  "github_extracted/pallets_flask/auth.py": {
    "variables": [
      "username",
      "user",
      "bp",
      "user_id",
      "db",
      "error",
      "password"
    ],
    "function_params": [
      "view"
    ],
    "function_names": [
      "wrapped_view",
      "load_logged_in_user",
      "login_required",
      "login",
      "logout",
      "register"
    ],
    "class_names": [],
    "imports": [
      "url_for",
      "flash",
      "flask",
      "Blueprint",
      "redirect",
      "get_db",
      "g",
      "render_template",
      "functools",
      "db",
      "werkzeug.security",
      "check_password_hash",
      "session",
      "generate_password_hash",
      "request"
    ]
  },
  "github_extracted/pallets_flask/tasks.py": {
    "variables": [
      "i"
    ],
    "function_params": [
      "b",
      "a",
      "self",
      "total"
    ],
    "function_names": [
      "add",
      "block",
      "process"
    ],
    "class_names": [],
    "imports": [
      "time",
      "Task",
      "celery",
      "shared_task"
    ]
  },
  "github_extracted/pallets_flask/test_auth.py": {
    "variables": [
      "response"
    ],
    "function_params": [
      "username",
      "auth",
      "client",
      "app",
      "message",
      "password"
    ],
    "function_names": [
      "test_login",
      "test_register",
      "test_register_validate_input",
      "test_logout",
      "test_login_validate_input"
    ],
    "class_names": [],
    "imports": [
      "flask",
      "get_db",
      "g",
      "flaskr.db",
      "session",
      "pytest"
    ]
  },
  "github_extracted/pallets_flask/__init__.py": {
    "variables": [],
    "function_params": [],
    "function_names": [],
    "class_names": [],
    "imports": [
      "message_flashed",
      "blueprints",
      "abort",
      "Blueprint",
      "Config",
      "send_file",
      "send_from_directory",
      "request_finished",
      "render_template",
      "render_template_string",
      "appcontext_popped",
      "get_template_attribute",
      "got_request_exception",
      "helpers",
      "request_tearing_down",
      "json",
      "appcontext_pushed",
      "stream_template_string",
      "has_request_context",
      "url_for",
      "ctx",
      "after_this_request",
      "get_flashed_messages",
      "wrappers",
      "stream_template",
      "Flask",
      "before_render_template",
      "redirect",
      "jsonify",
      "request_started",
      "config",
      "globals",
      "Response",
      "make_response",
      "templating",
      "signals",
      "session",
      "has_app_context",
      "current_app",
      "request",
      "template_rendered",
      "appcontext_tearing_down",
      "flash",
      "g",
      "Request",
      "copy_current_request_context",
      "app",
      "stream_with_context"
    ]
  },
  "github_extracted/pallets_flask/db.py": {
    "variables": [
      "db",
      "f"
    ],
    "function_params": [
      "app",
      "e"
    ],
    "function_names": [
      "init_db_command",
      "get_db",
      "init_db",
      "init_app",
      "close_db"
    ],
    "class_names": [],
    "imports": [
      "flask",
      "g",
      "sqlite3",
      "datetime",
      "click",
      "current_app"
    ]
  },
  "github_extracted/pallets_flask/conf.py": {
    "variables": [
      "html_theme",
      "extensions",
      "gettext_compact",
      "base_url",
      "node",
      "extlinks",
      "autodoc_preserve_defaults",
      "html_sidebars",
      "copyright",
      "default_role",
      "intersphinx_mapping",
      "html_logo",
      "options",
      "html_show_sourcelink",
      "html_context",
      "project",
      "autodoc_member_order",
      "html_title",
      "version",
      "singlehtml_sidebars",
      "words",
      "author",
      "url",
      "release",
      "html_favicon",
      "gettext_uuid",
      "autodoc_typehints",
      "app",
      "text",
      "html_theme_options",
      "html_static_path"
    ],
    "function_params": [
      "name",
      "lineno",
      "options",
      "inliner",
      "content",
      "app",
      "rawtext",
      "text"
    ],
    "function_names": [
      "github_link",
      "setup"
    ],
    "class_names": [],
    "imports": [
      "set_classes",
      "packaging.version",
      "get_version",
      "docutils.nodes",
      "reference",
      "pallets_sphinx_themes",
      "docutils.parsers.rst.roles",
      "ProjectLink"
    ]
  },
  "github_extracted/pallets_flask/conftest.py": {
    "variables": [
      "db_fd",
      "f",
      "app",
      "_data_sql",
      "db_path"
    ],
    "function_params": [
      "username",
      "client",
      "self",
      "app",
      "password"
    ],
    "function_names": [
      "__init__",
      "runner",
      "auth",
      "login",
      "client",
      "app",
      "logout"
    ],
    "class_names": [
      "AuthActions"
    ],
    "imports": [
      "tempfile",
      "get_db",
      "init_db",
      "create_app",
      "flaskr",
      "pytest",
      "flaskr.db",
      "os"
    ]
  },
  "github_extracted/pallets_flask/test_factory.py": {
    "variables": [
      "response"
    ],
    "function_params": [
      "client"
    ],
    "function_names": [
      "test_config",
      "test_hello"
    ],
    "class_names": [],
    "imports": [
      "create_app",
      "flaskr"
    ]
  },
  "github_extracted/PrefectHQ_prefect/check_output_of_interrupted_serve.py": {
    "variables": [
      "expected_messages",
      "unexpected_messages",
      "stderr_buffer",
      "expected",
      "python_executable",
      "command",
      "unexpected",
      "stderr_output"
    ],
    "function_params": [],
    "function_names": [],
    "class_names": [],
    "imports": [
      "asyncio",
      "StringIO",
      "pathlib",
      "prefect.utilities.processutils",
      "io",
      "sys",
      "run_process",
      "Path"
    ]
  },
  "github_extracted/PrefectHQ_prefect/cool.py": {
    "variables": [],
    "function_params": [],
    "function_names": [
      "do_something_cool"
    ],
    "class_names": [],
    "imports": []
  },
  "github_extracted/PrefectHQ_prefect/client_context_lifespan.py": {
    "variables": [
      "thread",
      "threads",
      "_",
      "startup",
      "tg",
      "app",
      "shutdown"
    ],
    "function_params": [
      "shutdown",
      "startup"
    ],
    "function_names": [
      "make_lifespan",
      "client_context_lifespan_is_robust_to_threaded_concurrency"
    ],
    "class_names": [],
    "imports": [
      "asyncio",
      "asynccontextmanager",
      "unittest.mock",
      "fastapi",
      "contextlib",
      "MagicMock",
      "prefect",
      "PrefectClient",
      "prefect.exceptions",
      "random",
      "typing",
      "FastAPI",
      "threading",
      "anyio",
      "Callable",
      "prefect.client.orchestration",
      "prefect.context"
    ]
  },
  "github_extracted/PrefectHQ_prefect/flows.py": {
    "variables": [],
    "function_params": [
      "msg"
    ],
    "function_names": [
      "my_flow",
      "my_nested_flow"
    ],
    "class_names": [],
    "imports": [
      "prefect",
      "flow"
    ]
  },
  "github_extracted/PrefectHQ_prefect/client_flow.py": {
    "variables": [
      "in_gha",
      "secret_not_set"
    ],
    "function_params": [],
    "function_names": [
      "skip_remote_run",
      "smoke_test_task",
      "smoke_test_flow"
    ],
    "class_names": [],
    "imports": [
      "asyncio",
      "task",
      "services",
      "prefect",
      "Any",
      "prefect.concurrency",
      "typing",
      "sync",
      "prefect.main",
      "flow",
      "os"
    ]
  },
  "github_extracted/PrefectHQ_prefect/__main__.py": {
    "variables": [
      "process",
      "options",
      "default_target",
      "targets",
      "arg"
    ],
    "function_params": [],
    "function_names": [],
    "class_names": [],
    "imports": [
      "sys",
      "pathlib",
      "Path",
      "subprocess"
    ]
  },
  "github_extracted/PrefectHQ_prefect/concurrent_subflows.py": {
    "variables": [
      "j",
      "i"
    ],
    "function_params": [],
    "function_names": [],
    "class_names": [],
    "imports": [
      "asyncio",
      "task",
      "prefect",
      "random",
      "flow"
    ]
  },
  "github_extracted/PrefectHQ_prefect/bench_cli.py": {
    "variables": [],
    "function_params": [
      "benchmark"
    ],
    "function_names": [
      "bench_prefect_profile_ls",
      "bench_prefect_version",
      "bench_prefect_help",
      "bench_prefect_short_version"
    ],
    "class_names": [],
    "imports": [
      "subprocess"
    ]
  },
  "github_extracted/PrefectHQ_prefect/flow_pauses.py": {
    "variables": [
      "flow_run_id_future",
      "flow_run_id"
    ],
    "function_params": [],
    "function_names": [
      "pause_test",
      "my_task",
      "resume_after_started"
    ],
    "class_names": [],
    "imports": [
      "concurrent.futures",
      "task",
      "prefect",
      "get_run_context",
      "threading",
      "time",
      "Future",
      "flow",
      "resume_flow_run",
      "pause_flow_run",
      "prefect.context"
    ]
  },
  "github_extracted/PrefectHQ_prefect/bench_import.py": {
    "variables": [
      "collector",
      "module",
      "prefect_modules",
      "key"
    ],
    "function_params": [
      "benchmark"
    ],
    "function_names": [
      "import_prefect",
      "bench_import_prefect_flow",
      "import_prefect_flow",
      "bench_import_prefect",
      "reset_imports"
    ],
    "class_names": [],
    "imports": [
      "pytest_benchmark.fixture",
      "prefect",
      "importlib",
      "prometheus_client",
      "BenchmarkFixture",
      "typing",
      "sys",
      "REGISTRY",
      "pytest",
      "TYPE_CHECKING",
      "flow"
    ]
  },
  "github_extracted/PrefectHQ_prefect/bench_flows.py": {
    "variables": [
      "test_task",
      "_",
      "test_flow",
      "tg",
      "noop_flow"
    ],
    "function_params": [
      "benchmark",
      "num_tasks",
      "options",
      "num_flows"
    ],
    "function_names": [
      "bench_flow_with_subflows",
      "bench_flow_with_submitted_tasks",
      "noop_function",
      "benchmark_flow",
      "bench_async_flow_with_async_tasks",
      "bench_async_flow_with_concurrent_subflows",
      "bench_flow_call",
      "bench_flow_with_called_tasks",
      "bench_async_flow_with_sequential_subflows",
      "bench_flow_decorator"
    ],
    "class_names": [],
    "imports": [
      "task",
      "prefect",
      "pytest_benchmark.fixture",
      "BenchmarkFixture",
      "TYPE_CHECKING",
      "typing",
      "pytest",
      "anyio",
      "flow"
    ]
  },
  "github_extracted/PrefectHQ_prefect/tasks.py": {
    "variables": [],
    "function_params": [
      "name"
    ],
    "function_names": [
      "my_background_task"
    ],
    "class_names": [],
    "imports": [
      "task",
      "prefect"
    ]
  },
  "github_extracted/PrefectHQ_prefect/utils.py": {
    "variables": [],
    "function_params": [],
    "function_names": [
      "put",
      "post"
    ],
    "class_names": [],
    "imports": []
  },
  "github_extracted/PrefectHQ_prefect/deploy.py": {
    "variables": [
      "flow_instance",
      "flow_run",
      "client"
    ],
    "function_params": [],
    "function_names": [
      "main"
    ],
    "class_names": [],
    "imports": [
      "pathlib",
      "prefect",
      "shutil",
      "sys",
      "anyio",
      "subprocess",
      "prefect.deployments",
      "run_deployment",
      "Path"
    ]
  },
  "github_extracted/PrefectHQ_prefect/client_deploy.py": {
    "variables": [
      "smoke_test_flow",
      "coro",
      "flow_run",
      "client",
      "deployment_id"
    ],
    "function_params": [],
    "function_names": [],
    "class_names": [],
    "imports": [
      "asyncio",
      "WorkPoolCreate",
      "inspect",
      "pathlib",
      "prefect",
      "Flow",
      "prefect.exceptions",
      "typing",
      "ObjectNotFound",
      "get_client",
      "TYPE_CHECKING",
      "prefect.client.schemas.actions",
      "prefect.runner.runner",
      "Runner",
      "Path"
    ]
  },
  "github_extracted/PrefectHQ_prefect/bench_tasks.py": {
    "variables": [
      "noop_task"
    ],
    "function_params": [
      "benchmark"
    ],
    "function_names": [
      "bench_task_call",
      "noop_function",
      "bench_task_submit",
      "benchmark_flow",
      "bench_task_decorator"
    ],
    "class_names": [],
    "imports": [
      "task",
      "prefect",
      "pytest_benchmark.fixture",
      "BenchmarkFixture",
      "typing",
      "TYPE_CHECKING",
      "flow"
    ]
  },
  "github_extracted/PrefectHQ_prefect/db.py": {
    "variables": [],
    "function_params": [
      "query"
    ],
    "function_names": [
      "execute"
    ],
    "class_names": [
      "Table"
    ],
    "imports": []
  },
  "github_extracted/PrefectHQ_prefect/conftest.py": {
    "variables": [
      "project_root",
      "item",
      "reason",
      "full_path",
      "SKIP_FILES",
      "file",
      "mock_response"
    ],
    "function_params": [
      "monkeypatch",
      "items"
    ],
    "function_names": [
      "mock_post_200",
      "pytest_collection_modifyitems",
      "pytest_markdown_docs_globals",
      "mock_runner_start",
      "mock_post",
      "mock_base_worker_submit"
    ],
    "class_names": [],
    "imports": [
      "sa",
      "mock",
      "typing",
      "Run",
      "Mapped",
      "Union",
      "pytest",
      "unittest",
      "mapped_column",
      "prefect.server.database.orm_models",
      "os"
    ]
  },
  "github_extracted/PrefectHQ_prefect/docker_deploy.py": {
    "variables": [
      "flow_run",
      "dockerfile",
      "df",
      "client"
    ],
    "function_params": [],
    "function_names": [
      "main",
      "flow_that_needs_pandas"
    ],
    "class_names": [],
    "imports": [
      "asyncio",
      "pathlib",
      "prefect",
      "prefect.docker.docker_image",
      "prefect.deployments",
      "DockerImage",
      "textwrap",
      "sys",
      "get_client",
      "pandas",
      "subprocess",
      "flow",
      "dedent",
      "run_deployment",
      "Path"
    ]
  },
  "github_extracted/PrefectHQ_prefect/automation-assessments.py": {
    "variables": [
      "listening",
      "name",
      "prefect",
      "events",
      "event",
      "expected_resource",
      "filter",
      "i",
      "subscriber",
      "listener",
      "second",
      "logger",
      "age",
      "first",
      "existing",
      "parsed_datetime",
      "response",
      "automation"
    ],
    "function_params": [],
    "function_names": [],
    "class_names": [],
    "imports": [
      "asyncio",
      "uuid4",
      "get_run_logger",
      "uuid",
      "now",
      "EventFilter",
      "Any",
      "datetime",
      "timedelta",
      "EventNameFilter",
      "EventOccurredFilter",
      "parse_datetime",
      "get_events_client",
      "asynccontextmanager",
      "prefect.events.filters",
      "prefect.client.orchestration",
      "prefect.events.clients",
      "prefect.events",
      "EventResourceFilter",
      "prefect.logging",
      "os",
      "get_events_subscriber",
      "contextlib",
      "prefect",
      "Dict",
      "typing",
      "get_client",
      "prefect.types._datetime",
      "anyio",
      "flow",
      "Event",
      "AsyncGenerator"
    ]
  },
  "github_extracted/pygame_pygame/setup_win_common.py": {
    "variables": [
      "__all__",
      "m",
      "deps",
      "setup_in",
      "match",
      "line",
      "PATH"
    ],
    "function_params": [
      "value",
      "self",
      "name"
    ],
    "function_names": [
      "read",
      "__init__",
      "get_definitions"
    ],
    "class_names": [
      "Definition"
    ],
    "imports": [
      "re",
      "os"
    ]
  },
  "github_extracted/pygame_pygame/download_win_prebuilt.py": {
    "variables": [
      "mode",
      "prebuilt_dirs",
      "filename",
      "download_prebuilt",
      "checksum",
      "lst",
      "zip_dir",
      "response",
      "strs",
      "headers",
      "s",
      "move_to_dir",
      "zip_ref",
      "url_sha1",
      "x",
      "use_requests",
      "dest_str",
      "d",
      "download_dir",
      "the_file",
      "target",
      "url",
      "skip_download",
      "ignore",
      "cont_checksum",
      "data",
      "check",
      "request",
      "prebuilt_x64",
      "prebuilt_x86",
      "path",
      "item",
      "f",
      "excl",
      "st",
      "save_to",
      "prebuilt_dir"
    ],
    "function_params": [
      "contents",
      "x86",
      "save_to_directory",
      "src",
      "symlinks",
      "dir",
      "move_to_dir",
      "checksum",
      "dst",
      "url",
      "unzip",
      "ignore",
      "x64",
      "temp_dir"
    ],
    "function_names": [
      "copy",
      "download_prebuilts",
      "ignore_func",
      "get_urls",
      "cached",
      "download_sha1_unzip",
      "place_downloaded_prebuilts",
      "create_ignore_target_fnc",
      "copytree",
      "update",
      "ask"
    ],
    "class_names": [],
    "imports": [
      "zipfile",
      "shutil",
      "stat",
      "logging",
      "requests",
      "urllib.request",
      "hashlib",
      "os"
    ]
  },
  "github_extracted/pygame_pygame/vstools.py": {
    "variables": [
      "output",
      "compiler",
      "def_file",
      "_fmt_header",
      "f",
      "dll_base",
      "symbols",
      "it",
      "lines",
      "line",
      "found",
      "arch",
      "lib_file",
      "dumpbin_path",
      "exp"
    ],
    "function_params": [
      "dll",
      "arch",
      "def_file"
    ],
    "function_names": [
      "find_symbols",
      "lib_from_def",
      "dump_def"
    ],
    "class_names": [
      "DumpbinError",
      "DumpbinParseError"
    ],
    "imports": [
      "subprocess",
      "MSVCCompiler",
      "get_build_architecture",
      "distutils.msvccompiler",
      "re",
      "os",
      "setuptools._distutils.msvccompiler"
    ]
  },
  "github_extracted/pygame_pygame/config_conan.py": {
    "variables": [
      "DEPS",
      "info",
      "build_dir",
      "cmd",
      "other_args",
      "infos",
      "conanbuildinfo_json",
      "conanbuildinfo",
      "n"
    ],
    "function_params": [
      "conan_name",
      "name",
      "sdl2",
      "self",
      "force_build",
      "auto_config",
      "conanbuildinfo",
      "extra_libs"
    ],
    "function_names": [
      "__init__",
      "main",
      "conan_install"
    ],
    "class_names": [
      "Dependency"
    ],
    "imports": [
      "sys",
      "os",
      "json",
      "subprocess"
    ]
  },
  "github_extracted/pygame_pygame/__main__.py": {
    "variables": [
      "last",
      "path",
      "pkg_dir",
      "rest",
      "main_page",
      "url_path",
      "drive",
      "url"
    ],
    "function_params": [
      "path"
    ],
    "function_names": [
      "open_docs",
      "has_local_docs",
      "_iterpath"
    ],
    "class_names": [],
    "imports": [
      "urllib.parse",
      "webbrowser",
      "quote",
      "os",
      "urlunparse"
    ]
  },
  "github_extracted/pygame_pygame/.travis_osx_rename_whl.py": {
    "variables": [
      "f",
      "path",
      "filenames",
      "new_path"
    ],
    "function_params": [],
    "function_names": [],
    "class_names": [],
    "imports": [
      "sys",
      "os",
      "glob"
    ]
  },
  "github_extracted/pygame_pygame/install_mac_deps.py": {
    "variables": [
      "destpath",
      "path"
    ],
    "function_params": [
      "verbose",
      "srcdir",
      "path",
      "destdir"
    ],
    "function_names": [
      "symtree",
      "rmpath"
    ],
    "class_names": [],
    "imports": [
      "sys",
      "shutil",
      "pathlib",
      "Path"
    ]
  },
  "github_extracted/pygame_pygame/config_darwin.py": {
    "variables": [
      "name",
      "libdirs",
      "found",
      "incname",
      "libext",
      "fullpath",
      "libnames",
      "fmwk",
      "d",
      "incnames",
      "pkg_config",
      "deptype",
      "n",
      "DEPS",
      "path",
      "BASE_DIRS",
      "freetype_config",
      "dir",
      "incdirs"
    ],
    "function_params": [
      "checkhead",
      "name",
      "header",
      "module",
      "libdirs",
      "checklib",
      "incdirs",
      "self",
      "auto_config",
      "libs"
    ],
    "function_names": [
      "find_freetype",
      "__init__",
      "main",
      "configure"
    ],
    "class_names": [
      "FrameworkDependency",
      "Dependency",
      "DependencyPython"
    ],
    "imports": [
      "sysconfig",
      "DependencyProg",
      "get_path",
      "buildconfig.config_unix",
      "os",
      "config_unix"
    ]
  },
  "github_extracted/pygame_pygame/config_win.py": {
    "variables": [
      "name",
      "link",
      "header_file",
      "found",
      "inc_hunt",
      "w",
      "hh",
      "fullpath",
      "jpeg",
      "p",
      "nonext_name",
      "dllPaths",
      "lib_hunt",
      "entries",
      "parent",
      "lib_info",
      "imageDep",
      "lib_match",
      "info",
      "check_hunt_roots",
      "def_file",
      "mixerDep",
      "png",
      "d",
      "prune",
      "inc_info",
      "fontDep",
      "huntpaths",
      "lib",
      "dep",
      "lib_file",
      "h",
      "dll",
      "basename",
      "header_match",
      "path",
      "DEPS",
      "machine_type",
      "use_prebuilt",
      "auto_download",
      "download_kwargs",
      "f",
      "dir",
      "e",
      "libs",
      "prebuilt_dir"
    ],
    "function_params": [
      "size",
      "name",
      "header",
      "link",
      "paths",
      "dll_regex",
      "lib_match",
      "print_result",
      "required",
      "module",
      "link_lib",
      "search_paths",
      "self",
      "auto_config",
      "base",
      "find_lib",
      "lib",
      "header_match",
      "path",
      "DEPS",
      "wildcards",
      "find_header",
      "cflags",
      "match",
      "root",
      "libs",
      "prebuilt_dir"
    ],
    "function_names": [
      "hunt_dll",
      "add_win",
      "__iter__",
      "setup",
      "add_dll",
      "as_machine_type",
      "__init__",
      "get_machine_type",
      "add",
      "setup_prebuilt_sdl2",
      "_add_sdl2_dll_deps",
      "find",
      "get_ptr_size",
      "hunt",
      "choosepath",
      "add_dummy",
      "prunepaths",
      "matchfile",
      "findhunt",
      "main",
      "configure",
      "check_roots"
    ],
    "class_names": [
      "DependencyGroup",
      "Dependency",
      "DependencyPython",
      "DependencyDLL",
      "DependencyDummy",
      "DependencyWin"
    ],
    "imports": [
      "download_win_prebuilt",
      "sysconfig",
      "splitext",
      "logging",
      "setup_win_common",
      "get_path",
      "sys",
      "buildconfig.setup_win_common",
      "os.path",
      "glob",
      "vstools",
      "re",
      "buildconfig",
      "os",
      "get_definitions"
    ]
  },
  "github_extracted/pygame_pygame/bundle_docs.py": {
    "variables": [
      "bundle_name",
      "directories",
      "alias",
      "sub_root",
      "root",
      "reject_dirs",
      "file_name",
      "files",
      "sub_alias",
      "d",
      "f",
      "match",
      "version",
      "reject_files_reversed",
      "setup",
      "file_alias",
      "bundle"
    ],
    "function_params": [
      "file_names",
      "root",
      "bundle",
      "alias"
    ],
    "function_names": [
      "add_directory",
      "add_files",
      "main"
    ],
    "class_names": [],
    "imports": [
      "re",
      "tarfile",
      "os"
    ]
  },
  "github_extracted/pygame_pygame/msysio.py": {
    "variables": [
      "sep",
      "__all__",
      "stream",
      "end",
      "arg"
    ],
    "function_params": [],
    "function_names": [
      "is_msys",
      "print_"
    ],
    "class_names": [],
    "imports": [
      "sys",
      "os"
    ]
  },
  "github_extracted/pygame_pygame/config.py": {
    "variables": [
      "backup_path",
      "deps",
      "origsetup",
      "IPREFIX",
      "conan",
      "legalVars",
      "LPREFIX",
      "setup_path",
      "lineDeps",
      "additional_platform_setup",
      "newsetup",
      "lids",
      "aparts",
      "line",
      "sdl_setup_filename",
      "addit",
      "parts",
      "d",
      "al",
      "kwds",
      "lib",
      "useit",
      "l",
      "BASE_PATH",
      "basepath",
      "new_lines",
      "startind",
      "dir",
      "incs",
      "lines",
      "libs"
    ],
    "function_params": [
      "basepath",
      "additional_lines",
      "deps",
      "auto",
      "dep"
    ],
    "function_names": [
      "is_msys2",
      "writesetupfile",
      "prepdep",
      "is_msys_mingw",
      "print_",
      "main"
    ],
    "class_names": [],
    "imports": [
      "config_emsdk",
      "config_darwin",
      "config_msys2",
      "buildconfig.config_unix",
      "msysio",
      "re",
      "config_unix",
      "buildconfig.config_msys2",
      "sysconfig",
      "logging",
      "sys",
      "config_win",
      "buildconfig.config_win",
      "buildconfig.msysio",
      "os",
      "shutil",
      "buildconfig.config_emsdk",
      "buildconfig.config_darwin",
      "config_conan",
      "buildconfig.config_conan"
    ]
  },
  "github_extracted/pygame_pygame/gen_stubs.py": {
    "variables": [
      "import_line",
      "import_items",
      "k",
      "info_header",
      "doc_as_comment",
      "pygame_all_imports",
      "items",
      "v",
      "locals_file",
      "mod",
      "i",
      "constant_type",
      "string",
      "PG_AUTOIMPORT_CLASSES",
      "PG_AUTOIMPORT_SUBMODS",
      "constants_file",
      "element",
      "item",
      "PG_STAR_IMPORTS",
      "f",
      "misc_stubs",
      "init_file"
    ],
    "function_params": [
      "mod"
    ],
    "function_names": [
      "get_all"
    ],
    "class_names": [],
    "imports": [
      "pathlib",
      "Any",
      "pygame.locals",
      "typing",
      "pygame.constants"
    ]
  },
  "github_extracted/pygame_pygame/__init__.py": {
    "variables": [],
    "function_params": [],
    "function_names": [],
    "class_names": [],
    "imports": []
  },
  "github_extracted/pygame_pygame/makeref.py": {
    "variables": [
      "rst_doctree_dir",
      "rst_dir",
      "subprocess_args",
      "c_header_dir",
      "argument",
      "rst_build_dir",
      "rst_source_dir",
      "full_generation_flag"
    ],
    "function_params": [],
    "function_names": [
      "run",
      "runit"
    ],
    "class_names": [],
    "imports": [
      "sys",
      "os",
      "subprocess"
    ]
  },
  "github_extracted/pygame_pygame/conf.py": {
    "variables": [
      "html_theme",
      "extensions",
      "htmlhelp_basename",
      "headers_mkdirs",
      "html_show_sphinx",
      "language",
      "versionchanged_format",
      "html_extra_path",
      "copyright",
      "templates_path",
      "html_logo",
      "boilerplate_skip_transform",
      "project",
      "unused_docs",
      "html_title",
      "version",
      "deprecated_format",
      "edit_on_github_project",
      "html_use_modindex",
      "master_doc",
      "latex_documents",
      "edit_on_github_branch",
      "headers_filename_sfx",
      "pygments_style",
      "release",
      "add_module_names",
      "html_favicon",
      "smartquotes",
      "html_theme_path",
      "headers_dest",
      "source_suffix",
      "modindex_common_prefix",
      "versionadded_format",
      "html_theme_options",
      "html_static_path"
    ],
    "function_params": [],
    "function_names": [],
    "class_names": [],
    "imports": [
      "sys",
      "os"
    ]
  },
  "github_extracted/pygame_pygame/config_unix.py": {
    "variables": [
      "name",
      "libdirs",
      "command",
      "arg",
      "is_freebsd",
      "incname",
      "sdl_lib_name",
      "fullpath",
      "origlibdirs",
      "inc",
      "porttime_dep",
      "libnames",
      "extrabase",
      "flags",
      "err",
      "portmidi_as_porttime",
      "origincdirs",
      "is_hurd",
      "extrabases",
      "config",
      "configcommand",
      "d",
      "pkg_config",
      "inc_porttime",
      "dep",
      "stdout",
      "DEPS",
      "path",
      "cmd",
      "freetype_config",
      "f",
      "dir",
      "incdirs"
    ],
    "function_params": [
      "exename",
      "checkhead",
      "minver",
      "name",
      "header",
      "module",
      "envname",
      "libdirs",
      "incdirs",
      "version_flag",
      "checklib",
      "self",
      "defaultlibs",
      "auto_config",
      "libdir",
      "libs"
    ],
    "function_names": [
      "__init__",
      "get_porttime_dep",
      "find_freetype",
      "main",
      "configure"
    ],
    "class_names": [
      "Dependency",
      "DependencyPython",
      "DependencyProg"
    ],
    "imports": [
      "sysconfig",
      "os",
      "logging",
      "get_path",
      "glob",
      "platform"
    ]
  },
  "github_extracted/pygame_pygame/config_msys2.py": {
    "variables": [
      "ftDep",
      "name",
      "link",
      "download_prebuilt",
      "header_file",
      "found",
      "inc_hunt",
      "hh",
      "fullpath",
      "jpeg",
      "p",
      "nonext_name",
      "dllPaths",
      "lib_hunt",
      "entries",
      "parent",
      "output",
      "lib_info",
      "lib_match",
      "imageDep",
      "info",
      "check_hunt_roots",
      "def_file",
      "mixerDep",
      "png",
      "d",
      "prune",
      "inc_info",
      "fontDep",
      "huntpaths",
      "lib",
      "dep",
      "lib_file",
      "h",
      "dll",
      "basename",
      "header_match",
      "path",
      "DEPS",
      "sdlDep",
      "f",
      "dir",
      "e",
      "libs",
      "prebuilt_dir"
    ],
    "function_params": [
      "size",
      "name",
      "header",
      "link",
      "paths",
      "dll_regex",
      "msys2_path",
      "lib_match",
      "print_result",
      "required",
      "module",
      "link_lib",
      "search_paths",
      "self",
      "auto_config",
      "base",
      "find_lib",
      "lib",
      "header_match",
      "path",
      "DEPS",
      "wildcards",
      "find_header",
      "cflags",
      "match",
      "root",
      "libs",
      "prebuilt_dir"
    ],
    "function_names": [
      "hunt_dll",
      "add_win",
      "__iter__",
      "add_dll",
      "as_machine_type",
      "__init__",
      "get_machine_type",
      "add",
      "setup_prebuilt_sdl2",
      "_add_sdl2_dll_deps",
      "get_absolute_win_path",
      "find",
      "hunt",
      "get_ptr_size",
      "choosepath",
      "add_dummy",
      "prunepaths",
      "matchfile",
      "findhunt",
      "main",
      "configure",
      "check_roots"
    ],
    "class_names": [
      "DependencyGroup",
      "Dependency",
      "DependencyPython",
      "DependencyDLL",
      "DependencyDummy",
      "DependencyWin"
    ],
    "imports": [
      "download_msys2_prebuilt",
      "sysconfig",
      "splitext",
      "logging",
      "setup_win_common",
      "get_path",
      "sys",
      "buildconfig.setup_win_common",
      "os.path",
      "glob",
      "subprocess",
      "re",
      "vstools",
      "buildconfig",
      "os",
      "get_definitions"
    ]
  },
  "github_extracted/pygame_pygame/download_msys2_prebuilt.py": {
    "variables": [
      "output",
      "msystem",
      "deps",
      "pkg",
      "full_arch_names",
      "errors",
      "error",
      "x"
    ],
    "function_params": [
      "pkg_name",
      "arch"
    ],
    "function_names": [
      "detect_arch",
      "update",
      "get_packages",
      "install_pacman_package",
      "install_prebuilts"
    ],
    "class_names": [],
    "imports": [
      "sys",
      "os",
      "logging",
      "subprocess"
    ]
  }
}